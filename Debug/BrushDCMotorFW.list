
BrushDCMotorFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080074f8  080074f8  000174f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007674  08007674  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08007674  08007674  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007674  08007674  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800767c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200000ec  08007768  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08007768  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011eb5  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387f  00000000  00000000  00031fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00035850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00036a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b642  00000000  00000000  00037a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016683  00000000  00000000  0005304a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e90  00000000  00000000  000696cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd55d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000513c  00000000  00000000  000fd5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ec 	.word	0x200000ec
 8000128:	00000000 	.word	0x00000000
 800012c:	080074e0 	.word	0x080074e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f0 	.word	0x200000f0
 8000148:	080074e0 	.word	0x080074e0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <PID_Update>:
#include "PID.h"
#include "math.h"



float PID_Update(PID *pid,float now){
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]

	float error = pid->target - now;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6a1b      	ldr	r3, [r3, #32]
 800074e:	6839      	ldr	r1, [r7, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fcff 	bl	8000154 <__aeabi_fsub>
 8000756:	4603      	mov	r3, r0
 8000758:	60bb      	str	r3, [r7, #8]
	pid->Integral += (pid->PreError + error)/2*pid->dt;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	69dc      	ldr	r4, [r3, #28]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	68b9      	ldr	r1, [r7, #8]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fcf7 	bl	8000158 <__addsf3>
 800076a:	4603      	mov	r3, r0
 800076c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fead 	bl	80004d0 <__aeabi_fdiv>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	4619      	mov	r1, r3
 8000780:	4610      	mov	r0, r2
 8000782:	f7ff fdf1 	bl	8000368 <__aeabi_fmul>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	4620      	mov	r0, r4
 800078c:	f7ff fce4 	bl	8000158 <__addsf3>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	61da      	str	r2, [r3, #28]

	float out =
			pid->PGain * error +
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fde2 	bl	8000368 <__aeabi_fmul>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461c      	mov	r4, r3
			pid->IGain * pid->Integral +
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	4619      	mov	r1, r3
 80007b2:	4610      	mov	r0, r2
 80007b4:	f7ff fdd8 	bl	8000368 <__aeabi_fmul>
 80007b8:	4603      	mov	r3, r0
			pid->PGain * error +
 80007ba:	4619      	mov	r1, r3
 80007bc:	4620      	mov	r0, r4
 80007be:	f7ff fccb 	bl	8000158 <__addsf3>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461d      	mov	r5, r3
			pid->DGain * (error - pid->PreError)/pid->dt;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689c      	ldr	r4, [r3, #8]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4619      	mov	r1, r3
 80007d0:	68b8      	ldr	r0, [r7, #8]
 80007d2:	f7ff fcbf 	bl	8000154 <__aeabi_fsub>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4619      	mov	r1, r3
 80007da:	4620      	mov	r0, r4
 80007dc:	f7ff fdc4 	bl	8000368 <__aeabi_fmul>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4610      	mov	r0, r2
 80007ec:	f7ff fe70 	bl	80004d0 <__aeabi_fdiv>
 80007f0:	4603      	mov	r3, r0
	float out =
 80007f2:	4619      	mov	r1, r3
 80007f4:	4628      	mov	r0, r5
 80007f6:	f7ff fcaf 	bl	8000158 <__addsf3>
 80007fa:	4603      	mov	r3, r0
 80007fc:	60fb      	str	r3, [r7, #12]

	pid->PreError = error;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	619a      	str	r2, [r3, #24]

	if(fabsf(out) > pid->max){
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	4619      	mov	r1, r3
 8000810:	4610      	mov	r0, r2
 8000812:	f7ff ff65 	bl	80006e0 <__aeabi_fcmpgt>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d010      	beq.n	800083e <PID_Update+0xfe>
		out = pid->max * (out / fabsf(out));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	691c      	ldr	r4, [r3, #16]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000826:	4619      	mov	r1, r3
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f7ff fe51 	bl	80004d0 <__aeabi_fdiv>
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	4620      	mov	r0, r4
 8000834:	f7ff fd98 	bl	8000368 <__aeabi_fmul>
 8000838:	4603      	mov	r3, r0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	e00e      	b.n	800085c <PID_Update+0x11c>
	}else if(fabsf(out) < pid->epsilon){
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	4619      	mov	r1, r3
 800084a:	4610      	mov	r0, r2
 800084c:	f7ff ff2a 	bl	80006a4 <__aeabi_fcmplt>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <PID_Update+0x11c>
		out = 0;
 8000856:	f04f 0300 	mov.w	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
	}

	return out;
 800085c:	68fb      	ldr	r3, [r7, #12]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bdb0      	pop	{r4, r5, r7, pc}

08000866 <PID_Reset>:

void PID_Reset(PID* pid,float normal_error){
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
	pid->Integral = 0;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
	pid->PreError = normal_error;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	619a      	str	r2, [r3, #24]
	pid->target = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f04f 0200 	mov.w	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_ADC1_Init+0x74>)
 80008a2:	4a19      	ldr	r2, [pc, #100]	; (8000908 <MX_ADC1_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_ADC1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_ADC1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_ADC1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_ADC1_Init+0x74>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ce:	f001 fbeb 	bl	80020a8 <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008d8:	f000 fce5 	bl	80012a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ee:	f001 fdad 	bl	800244c <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80008f8:	f000 fcd5 	bl	80012a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000108 	.word	0x20000108
 8000908:	40012400 	.word	0x40012400

0800090c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <HAL_ADC_MspInit+0xbc>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d149      	bne.n	80009c0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a26      	ldr	r2, [pc, #152]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a20      	ldr	r2, [pc, #128]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095c:	2301      	movs	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000960:	2303      	movs	r3, #3
 8000962:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	4819      	ldr	r0, [pc, #100]	; (80009d0 <HAL_ADC_MspInit+0xc4>)
 800096c:	f003 f952 	bl	8003c14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 8000972:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <HAL_ADC_MspInit+0xcc>)
 8000974:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 800098a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800098e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 8000992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000996:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 800099a:	2220      	movs	r2, #32
 800099c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 80009a6:	f002 ff47 	bl	8003838 <HAL_DMA_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80009b0:	f000 fc79 	bl	80012a6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 80009b8:	621a      	str	r2, [r3, #32]
 80009ba:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40012400 	.word	0x40012400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010800 	.word	0x40010800
 80009d4:	20000138 	.word	0x20000138
 80009d8:	40020008 	.word	0x40020008

080009dc <CAN_FILTER_Init>:
#include "motor_control.h"
#include "led.h"
#include "encoder.h"
extern MotorMode motor_mode;

void CAN_FILTER_Init(void){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
	filter.SlaveStartFilterBank = 14;
 8000a02:	230e      	movs	r3, #14
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterActivation = ENABLE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <CAN_FILTER_Init+0x4c>)
 8000a10:	f002 f8bf 	bl	8002b92 <HAL_CAN_ConfigFilter>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <CAN_FILTER_Init+0x42>
	{
		Error_Handler();
 8000a1a:	f000 fc44 	bl	80012a6 <Error_Handler>
	}

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000017c 	.word	0x2000017c

08000a2c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_CAN_Init+0x80>)
 8000a32:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <MX_CAN_Init+0x84>)
 8000a34:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_CAN_Init+0x80>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_CAN_Init+0x80>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_CAN_Init+0x80>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_CAN_Init+0x80>)
 8000a4a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000a4e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_CAN_Init+0x80>)
 8000a52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_CAN_Init+0x80>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_CAN_Init+0x80>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_CAN_Init+0x80>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_CAN_Init+0x80>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_CAN_Init+0x80>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_CAN_Init+0x80>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <MX_CAN_Init+0x80>)
 8000a7e:	f001 ff8d 	bl	800299c <HAL_CAN_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a88:	f000 fc0d 	bl	80012a6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FILTER_Init();
 8000a8c:	f7ff ffa6 	bl	80009dc <CAN_FILTER_Init>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000a90:	2102      	movs	r1, #2
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_CAN_Init+0x80>)
 8000a94:	f002 fb7a 	bl	800318c <HAL_CAN_ActivateNotification>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_CAN_Init+0x76>
	{
		Error_Handler();
 8000a9e:	f000 fc02 	bl	80012a6 <Error_Handler>
	}

	HAL_CAN_Start(&hcan);
 8000aa2:	4802      	ldr	r0, [pc, #8]	; (8000aac <MX_CAN_Init+0x80>)
 8000aa4:	f002 f93e 	bl	8002d24 <HAL_CAN_Start>
  /* USER CODE END CAN_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000017c 	.word	0x2000017c
 8000ab0:	40006400 	.word	0x40006400

08000ab4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a20      	ldr	r2, [pc, #128]	; (8000b50 <HAL_CAN_MspInit+0x9c>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d139      	bne.n	8000b48 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ade:	61d3      	str	r3, [r2, #28]
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4619      	mov	r1, r3
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <HAL_CAN_MspInit+0xa4>)
 8000b1a:	f003 f87b 	bl	8003c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4809      	ldr	r0, [pc, #36]	; (8000b58 <HAL_CAN_MspInit+0xa4>)
 8000b34:	f003 f86e 	bl	8003c14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2103      	movs	r1, #3
 8000b3c:	2014      	movs	r0, #20
 8000b3e:	f002 fe44 	bl	80037ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000b42:	2014      	movs	r0, #20
 8000b44:	f002 fe5d 	bl	8003802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40006400 	.word	0x40006400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800

08000b5c <CAN_Send_Status>:

/* USER CODE BEGIN 1 */



void CAN_Send_Status(uint8_t status){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	uint32_t TxMailbox;
	static const CAN_TxHeaderTypeDef TxHeader ={
			.StdId = BASE_ID + 3,
			.DLC = 1
	};
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, &status, &TxMailbox);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	1dfa      	adds	r2, r7, #7
 8000b6c:	4905      	ldr	r1, [pc, #20]	; (8000b84 <CAN_Send_Status+0x28>)
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <CAN_Send_Status+0x2c>)
 8000b70:	f002 f91c 	bl	8002dac <HAL_CAN_AddTxMessage>
    led_on(can);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 fa85 	bl	8001084 <led_on>
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	08007524 	.word	0x08007524
 8000b88:	2000017c 	.word	0x2000017c

08000b8c <CAN_Set_InterLock_Group>:



__IO uint8_t interlock_group_id = 0;

void CAN_Set_InterLock_Group(uint8_t id){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	interlock_group_id = id;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <CAN_Set_InterLock_Group+0x1c>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	7013      	strb	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200001a4 	.word	0x200001a4

08000bac <CAN_Send_Partial_Stop>:

void CAN_Send_Partial_Stop(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	uint32_t TxMailbox;
	static const CAN_TxHeaderTypeDef TxHeader ={
			.StdId = 0x1,
			.DLC = 1
	};
	uint8_t group_id = interlock_group_id;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <CAN_Send_Partial_Stop+0x28>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	70fb      	strb	r3, [r7, #3]
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, &group_id, &TxMailbox);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	1cfa      	adds	r2, r7, #3
 8000bbe:	4906      	ldr	r1, [pc, #24]	; (8000bd8 <CAN_Send_Partial_Stop+0x2c>)
 8000bc0:	4806      	ldr	r0, [pc, #24]	; (8000bdc <CAN_Send_Partial_Stop+0x30>)
 8000bc2:	f002 f8f3 	bl	8002dac <HAL_CAN_AddTxMessage>
    led_on(can);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f000 fa5c 	bl	8001084 <led_on>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200001a4 	.word	0x200001a4
 8000bd8:	0800753c 	.word	0x0800753c
 8000bdc:	2000017c 	.word	0x2000017c

08000be0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	f107 0214 	add.w	r2, r7, #20
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f002 f9a9 	bl	8002f4a <HAL_CAN_GetRxMessage>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 80db 	bne.w	8000db6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
    {
    	led_on(can);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 fa3f 	bl	8001084 <led_on>
    	switch(RxHeader.StdId){
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	2b1a      	cmp	r3, #26
 8000c0a:	f200 80d4 	bhi.w	8000db6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
 8000c0e:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c81 	.word	0x08000c81
 8000c18:	08000c89 	.word	0x08000c89
 8000c1c:	08000db7 	.word	0x08000db7
 8000c20:	08000db7 	.word	0x08000db7
 8000c24:	08000db7 	.word	0x08000db7
 8000c28:	08000db7 	.word	0x08000db7
 8000c2c:	08000db7 	.word	0x08000db7
 8000c30:	08000db7 	.word	0x08000db7
 8000c34:	08000db7 	.word	0x08000db7
 8000c38:	08000db7 	.word	0x08000db7
 8000c3c:	08000db7 	.word	0x08000db7
 8000c40:	08000db7 	.word	0x08000db7
 8000c44:	08000db7 	.word	0x08000db7
 8000c48:	08000db7 	.word	0x08000db7
 8000c4c:	08000db7 	.word	0x08000db7
 8000c50:	08000db7 	.word	0x08000db7
 8000c54:	08000db7 	.word	0x08000db7
 8000c58:	08000db7 	.word	0x08000db7
 8000c5c:	08000db7 	.word	0x08000db7
 8000c60:	08000db7 	.word	0x08000db7
 8000c64:	08000db7 	.word	0x08000db7
 8000c68:	08000db7 	.word	0x08000db7
 8000c6c:	08000db7 	.word	0x08000db7
 8000c70:	08000db7 	.word	0x08000db7
 8000c74:	08000c9f 	.word	0x08000c9f
 8000c78:	08000cd1 	.word	0x08000cd1
 8000c7c:	08000cdb 	.word	0x08000cdb
    	case 0x0:
    	{
    		//emergency stop
    		ChangeMode(Stop);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f000 fb41 	bl	8001308 <ChangeMode>
    		return;
 8000c86:	e096      	b.n	8000db6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
    		break;
    	}
    	case 0x01:
    	{
    		//Partial stop
    		if(interlock_group_id == RxData[0]){
 8000c88:	7b3a      	ldrb	r2, [r7, #12]
 8000c8a:	4b4c      	ldr	r3, [pc, #304]	; (8000dbc <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f040 808f 	bne.w	8000db4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
    			ChangeMode(Interlock_Stop);
 8000c96:	2006      	movs	r0, #6
 8000c98:	f000 fb36 	bl	8001308 <ChangeMode>
    		}
    		return;
 8000c9c:	e08a      	b.n	8000db4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
    		break;
    	}
    	case BASE_ID:
    	{
    		//set target
    		switch(motor_mode){
 8000c9e:	4b48      	ldr	r3, [pc, #288]	; (8000dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d00e      	beq.n	8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	dc10      	bgt.n	8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d002      	beq.n	8000cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d004      	beq.n	8000cbc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
    			memcpy(&positionPID.target,RxData,4);
    			break;
    		}
    		case Stop:
    		default:
    			break;
 8000cb2:	e00b      	b.n	8000ccc <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    			memcpy(&currentPID.target,RxData,4);
 8000cb6:	4a43      	ldr	r2, [pc, #268]	; (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000cb8:	6213      	str	r3, [r2, #32]
    			break;
 8000cba:	e008      	b.n	8000cce <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    			memcpy(&positionPID.target,RxData,4);
 8000cbe:	4a42      	ldr	r2, [pc, #264]	; (8000dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000cc0:	6213      	str	r3, [r2, #32]
    			break;
 8000cc2:	e004      	b.n	8000cce <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    			memcpy(&positionPID.target,RxData,4);
 8000cc6:	4a40      	ldr	r2, [pc, #256]	; (8000dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000cc8:	6213      	str	r3, [r2, #32]
    			break;
 8000cca:	e000      	b.n	8000cce <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
    			break;
 8000ccc:	bf00      	nop
    		}
    		return;
 8000cce:	e072      	b.n	8000db6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
    		break;
    	}
    	case BASE_ID + 1:
		{
			//mode setting
			ChangeMode(RxData[0]);
 8000cd0:	7b3b      	ldrb	r3, [r7, #12]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fb18 	bl	8001308 <ChangeMode>
			return;
 8000cd8:	e06d      	b.n	8000db6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
			//parameter setting
			/*
			 * byte: parameter index
			 * float: parameter value
			 */
			switch(RxData[0]){
 8000cda:	7b3b      	ldrb	r3, [r7, #12]
 8000cdc:	2b09      	cmp	r3, #9
 8000cde:	d867      	bhi.n	8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>
 8000ce0:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce6:	bf00      	nop
 8000ce8:	08000d11 	.word	0x08000d11
 8000cec:	08000d21 	.word	0x08000d21
 8000cf0:	08000d31 	.word	0x08000d31
 8000cf4:	08000d41 	.word	0x08000d41
 8000cf8:	08000d51 	.word	0x08000d51
 8000cfc:	08000d61 	.word	0x08000d61
 8000d00:	08000d71 	.word	0x08000d71
 8000d04:	08000d81 	.word	0x08000d81
 8000d08:	08000d91 	.word	0x08000d91
 8000d0c:	08000d9b 	.word	0x08000d9b
			case 0:{memcpy(&currentPID.PGain,RxData + 1,4);break;}
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	3301      	adds	r3, #1
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	e048      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
			case 1:{memcpy(&currentPID.IGain,RxData + 1,4);break;}
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	3301      	adds	r3, #1
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	e040      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
			case 2:{memcpy(&currentPID.DGain,RxData + 1,4);break;}
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	3301      	adds	r3, #1
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	e038      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
			case 3:{memcpy(&currentPID.max,  RxData + 1,4);break;}
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	3301      	adds	r3, #1
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	e030      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>

			case 4:{memcpy(&positionPID.PGain,RxData + 1,4);break;}
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	3301      	adds	r3, #1
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e028      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
			case 5:{memcpy(&positionPID.IGain,RxData + 1,4);break;}
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	3301      	adds	r3, #1
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	e020      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
			case 6:{memcpy(&positionPID.DGain,RxData + 1,4);break;}
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	3301      	adds	r3, #1
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	e018      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
			case 7:{memcpy(&positionPID.max,  RxData + 1,4);break;}
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	3301      	adds	r3, #1
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000d8c:	611a      	str	r2, [r3, #16]
 8000d8e:	e010      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>

			case 8:{CAN_Set_InterLock_Group(RxData[1]);break;}
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fefa 	bl	8000b8c <CAN_Set_InterLock_Group>
 8000d98:	e00b      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
			case 9:{Encoder_SetDirection(RxData[1]? 1:-1);break;}
 8000d9a:	7b7b      	ldrb	r3, [r7, #13]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e001      	b.n	8000da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f85b 	bl	8000e64 <Encoder_SetDirection>
 8000dae:	e000      	b.n	8000db2 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
			default:break;
 8000db0:	bf00      	nop
			}
			return;
 8000db2:	e000      	b.n	8000db6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
    		return;
 8000db4:	bf00      	nop
			break;
		}
    	}

    }
}
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200001a4 	.word	0x200001a4
 8000dc0:	200001b4 	.word	0x200001b4
 8000dc4:	20000034 	.word	0x20000034
 8000dc8:	20000058 	.word	0x20000058

08000dcc <InitADC>:

// It is uint16_t. but I use uint32_t for DMA.
uint32_t current = 0;

void InitADC()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000dd0:	4808      	ldr	r0, [pc, #32]	; (8000df4 <InitADC+0x28>)
 8000dd2:	f001 fd35 	bl	8002840 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(&hadc1,&current, 1);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <InitADC+0x2c>)
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <InitADC+0x28>)
 8000ddc:	f001 fa3c 	bl	8002258 <HAL_ADC_Start_DMA>
    hdma_adc1.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <InitADC+0x30>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <InitADC+0x30>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0206 	bic.w	r2, r2, #6
 8000dee:	601a      	str	r2, [r3, #0]
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000108 	.word	0x20000108
 8000df8:	200001a8 	.word	0x200001a8
 8000dfc:	20000138 	.word	0x20000138

08000e00 <GetLawCurrent>:
    */
    return (float)current / UINT16_MAX * 3.3 / CURRENT_REGISTER * A_COEFF;
}

uint16_t GetLawCurrent()
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
    return current;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <GetLawCurrent+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	b29b      	uxth	r3, r3
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200001a8 	.word	0x200001a8

08000e18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_DMA_Init+0x38>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <MX_DMA_Init+0x38>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6153      	str	r3, [r2, #20]
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_DMA_Init+0x38>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	200b      	movs	r0, #11
 8000e3c:	f002 fcc5 	bl	80037ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e40:	200b      	movs	r0, #11
 8000e42:	f002 fcde 	bl	8003802 <HAL_NVIC_EnableIRQ>

}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000

08000e54 <ClearFault>:
{
    // read status1
    return (uint8_t)(SPI_Read(0x2));
}
void ClearFault()
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    SPI_Write(8, 0b10001001);
 8000e58:	2189      	movs	r1, #137	; 0x89
 8000e5a:	2008      	movs	r0, #8
 8000e5c:	f000 fc70 	bl	8001740 <SPI_Write>
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <Encoder_SetDirection>:
#include "config.h"

int overflowcnt = 0;
__IO int direction = 1;

void Encoder_SetDirection(int dir){
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	direction = dir;
 8000e6c:	4a03      	ldr	r2, [pc, #12]	; (8000e7c <Encoder_SetDirection+0x18>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000000 	.word	0x20000000

08000e80 <Encoder_OverflowCallback>:

void Encoder_OverflowCallback(){
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

    __HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <Encoder_OverflowCallback+0x3c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f06f 0201 	mvn.w	r2, #1
 8000e8c:	611a      	str	r2, [r3, #16]
    if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) //0 → 65535
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <Encoder_OverflowCallback+0x3c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	2b10      	cmp	r3, #16
 8000e9a:	d105      	bne.n	8000ea8 <Encoder_OverflowCallback+0x28>
    {
        overflowcnt --;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <Encoder_OverflowCallback+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <Encoder_OverflowCallback+0x40>)
 8000ea4:	6013      	str	r3, [r2, #0]
    else //65535 → 0
    {
        overflowcnt ++;

    }
}
 8000ea6:	e004      	b.n	8000eb2 <Encoder_OverflowCallback+0x32>
        overflowcnt ++;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <Encoder_OverflowCallback+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <Encoder_OverflowCallback+0x40>)
 8000eb0:	6013      	str	r3, [r2, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000268 	.word	0x20000268
 8000ec0:	200001ac 	.word	0x200001ac

08000ec4 <Encoder_GetPosition>:
float Encoder_GetPosition(){
 8000ec4:	b5b0      	push	{r4, r5, r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	return direction *ENCODER_SCALER* ((float)overflowcnt * UINT16_MAX + htim2.Instance->CNT);
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <Encoder_GetPosition+0x58>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ed0:	fb02 f303 	mul.w	r3, r2, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff f9f3 	bl	80002c0 <__aeabi_i2f>
 8000eda:	4604      	mov	r4, r0
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <Encoder_GetPosition+0x5c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff f9ed 	bl	80002c0 <__aeabi_i2f>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	490e      	ldr	r1, [pc, #56]	; (8000f24 <Encoder_GetPosition+0x60>)
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fa3c 	bl	8000368 <__aeabi_fmul>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <Encoder_GetPosition+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff f9dc 	bl	80002b8 <__aeabi_ui2f>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4619      	mov	r1, r3
 8000f04:	4628      	mov	r0, r5
 8000f06:	f7ff f927 	bl	8000158 <__addsf3>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f7ff fa2a 	bl	8000368 <__aeabi_fmul>
 8000f14:	4603      	mov	r3, r0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bdb0      	pop	{r4, r5, r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	200001ac 	.word	0x200001ac
 8000f24:	477fff00 	.word	0x477fff00
 8000f28:	20000268 	.word	0x20000268

08000f2c <Encoder_Reset>:

void Encoder_Reset(){
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	overflowcnt = 0;
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Encoder_Reset+0x1c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
	htim2.Instance->CNT =0;
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <Encoder_Reset+0x20>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200001ac 	.word	0x200001ac
 8000f4c:	20000268 	.word	0x20000268

08000f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f64:	4b34      	ldr	r3, [pc, #208]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a33      	ldr	r2, [pc, #204]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f6a:	f043 0310 	orr.w	r3, r3, #16
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a2d      	ldr	r2, [pc, #180]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f82:	f043 0320 	orr.w	r3, r3, #32
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0320 	and.w	r3, r3, #32
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_GPIO_Init+0xe8>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nSleep_Pin|PH_Pin|nSCS_Pin|DRVOFF_Pin
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f641 31e2 	movw	r1, #7138	; 0x1be2
 8000fca:	481c      	ldr	r0, [pc, #112]	; (800103c <MX_GPIO_Init+0xec>)
 8000fcc:	f002 ffbd 	bl	8003f4a <HAL_GPIO_WritePin>
                          |LED_STATE2_Pin|LED_STATE1_Pin|LED_MOTOR_Pin|LED_CAN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LimitA_Pin|LimitB_Pin;
 8000fd0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_GPIO_Init+0xf0>)
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4817      	ldr	r0, [pc, #92]	; (8001044 <MX_GPIO_Init+0xf4>)
 8000fe6:	f002 fe15 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nFAULT_Pin;
 8000fea:	2301      	movs	r3, #1
 8000fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nFAULT_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480f      	ldr	r0, [pc, #60]	; (800103c <MX_GPIO_Init+0xec>)
 8000ffe:	f002 fe09 	bl	8003c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = nSleep_Pin|PH_Pin|nSCS_Pin|DRVOFF_Pin
 8001002:	f641 33e2 	movw	r3, #7138	; 0x1be2
 8001006:	613b      	str	r3, [r7, #16]
                          |LED_STATE2_Pin|LED_STATE1_Pin|LED_MOTOR_Pin|LED_CAN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2302      	movs	r3, #2
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <MX_GPIO_Init+0xec>)
 800101c:	f002 fdfa 	bl	8003c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2101      	movs	r1, #1
 8001024:	2028      	movs	r0, #40	; 0x28
 8001026:	f002 fbd0 	bl	80037ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800102a:	2028      	movs	r0, #40	; 0x28
 800102c:	f002 fbe9 	bl	8003802 <HAL_NVIC_EnableIRQ>

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	40010c00 	.word	0x40010c00
 8001040:	10210000 	.word	0x10210000
 8001044:	40011000 	.word	0x40011000

08001048 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

uint32_t last_time=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
	//for avoiding chattering.
	if(HAL_GetTick()-last_time>1000)StopFromLimit(GPIO_Pin);
 8001052:	f000 fffb 	bl	800204c <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_GPIO_EXTI_Callback+0x38>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001062:	d903      	bls.n	800106c <HAL_GPIO_EXTI_Callback+0x24>
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fa78 	bl	800155c <StopFromLimit>
	last_time = HAL_GetTick();
 800106c:	f000 ffee 	bl	800204c <HAL_GetTick>
 8001070:	4603      	mov	r3, r0
 8001072:	4a03      	ldr	r2, [pc, #12]	; (8001080 <HAL_GPIO_EXTI_Callback+0x38>)
 8001074:	6013      	str	r3, [r2, #0]
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001b0 	.word	0x200001b0

08001084 <led_on>:
	{LED_STATE1_GPIO_Port,LED_STATE1_Pin,0,0},
	{LED_STATE2_GPIO_Port,LED_STATE2_Pin,0,0}
};

void led_on(led name)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
    // if the led is off.
    if (led_list[name].is_high == 0)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <led_on+0x54>)
 8001092:	011b      	lsls	r3, r3, #4
 8001094:	4413      	add	r3, r2
 8001096:	330c      	adds	r3, #12
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d117      	bne.n	80010ce <led_on+0x4a>
    {
        HAL_GPIO_WritePin(led_list[name].gpio, led_list[name].pin, GPIO_PIN_SET);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <led_on+0x54>)
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <led_on+0x54>)
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	4413      	add	r3, r2
 80010b0:	3304      	adds	r3, #4
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f002 ff47 	bl	8003f4a <HAL_GPIO_WritePin>
        led_list[name].before_tick = HAL_GetTick();
 80010bc:	79fc      	ldrb	r4, [r7, #7]
 80010be:	f000 ffc5 	bl	800204c <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	4904      	ldr	r1, [pc, #16]	; (80010d8 <led_on+0x54>)
 80010c6:	0123      	lsls	r3, r4, #4
 80010c8:	440b      	add	r3, r1
 80010ca:	3308      	adds	r3, #8
 80010cc:	601a      	str	r2, [r3, #0]
    }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd90      	pop	{r4, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000004 	.word	0x20000004

080010dc <led_process>:

void led_process(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_LIST_SIZE; i++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	e02d      	b.n	8001144 <led_process+0x68>
    {
        if (led_list[i].is_high || HAL_GetTick() - led_list[i].before_tick > LED_INTERVAL)
 80010e8:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <led_process+0x78>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	330c      	adds	r3, #12
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10c      	bne.n	8001112 <led_process+0x36>
 80010f8:	f000 ffa8 	bl	800204c <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	4915      	ldr	r1, [pc, #84]	; (8001154 <led_process+0x78>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	440b      	add	r3, r1
 8001106:	3308      	adds	r3, #8
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001110:	d915      	bls.n	800113e <led_process+0x62>
        {
            HAL_GPIO_WritePin(led_list[i].gpio, led_list[i].pin, GPIO_PIN_RESET);
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <led_process+0x78>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4413      	add	r3, r2
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <led_process+0x78>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	4413      	add	r3, r2
 8001124:	3304      	adds	r3, #4
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	f002 ff0d 	bl	8003f4a <HAL_GPIO_WritePin>
            led_list[i].is_high = 0;
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <led_process+0x78>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	4413      	add	r3, r2
 8001138:	330c      	adds	r3, #12
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < LED_LIST_SIZE; i++)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3301      	adds	r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	ddce      	ble.n	80010e8 <led_process+0xc>
        }
    }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000004 	.word	0x20000004

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115e:	f000 ff1d 	bl	8001f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001162:	f000 f845 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001166:	f7ff fef3 	bl	8000f50 <MX_GPIO_Init>
  MX_DMA_Init();
 800116a:	f7ff fe55 	bl	8000e18 <MX_DMA_Init>
  MX_CAN_Init();
 800116e:	f7ff fc5d 	bl	8000a2c <MX_CAN_Init>
  MX_SPI1_Init();
 8001172:	f000 fa53 	bl	800161c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001176:	f000 fc89 	bl	8001a8c <MX_TIM1_Init>
  MX_ADC1_Init();
 800117a:	f7ff fb89 	bl	8000890 <MX_ADC1_Init>
  MX_TIM2_Init();
 800117e:	f000 fd25 	bl	8001bcc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001182:	f000 fd77 	bl	8001c74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  led_on(state1);
 8001186:	2001      	movs	r0, #1
 8001188:	f7ff ff7c 	bl	8001084 <led_on>
  led_on(state2);
 800118c:	2002      	movs	r0, #2
 800118e:	f7ff ff79 	bl	8001084 <led_on>
  led_on(can);
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff ff76 	bl	8001084 <led_on>
  led_process();
 8001198:	f7ff ffa0 	bl	80010dc <led_process>
  Activate();
 800119c:	f000 f93a 	bl	8001414 <Activate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int lasttime_send_stop = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)==GPIO_PIN_RESET){
 80011a4:	2101      	movs	r1, #1
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <main+0x94>)
 80011a8:	f002 feb8 	bl	8003f1c <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d107      	bne.n	80011c2 <main+0x6a>
		  led_on(can);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff ff66 	bl	8001084 <led_on>
		  ClearFault();
 80011b8:	f7ff fe4c 	bl	8000e54 <ClearFault>
		  ChangeMode(Stop);
 80011bc:	2000      	movs	r0, #0
 80011be:	f000 f8a3 	bl	8001308 <ChangeMode>
	  }

	  if(GetMode() == Interlock_Waiting && (HAL_GetTick() - lasttime_send_stop>50)){
 80011c2:	f000 f875 	bl	80012b0 <GetMode>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d10c      	bne.n	80011e6 <main+0x8e>
 80011cc:	f000 ff3e 	bl	800204c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b32      	cmp	r3, #50	; 0x32
 80011d8:	d905      	bls.n	80011e6 <main+0x8e>
		  CAN_Send_Partial_Stop();
 80011da:	f7ff fce7 	bl	8000bac <CAN_Send_Partial_Stop>
		  lasttime_send_stop = HAL_GetTick();
 80011de:	f000 ff35 	bl	800204c <HAL_GetTick>
 80011e2:	4603      	mov	r3, r0
 80011e4:	607b      	str	r3, [r7, #4]
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  led_process();
 80011e6:	f7ff ff79 	bl	80010dc <led_process>
	  if(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)==GPIO_PIN_RESET){
 80011ea:	e7db      	b.n	80011a4 <main+0x4c>
 80011ec:	40010c00 	.word	0x40010c00

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	; 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fa:	2228      	movs	r2, #40	; 0x28
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f005 f99e 	bl	8006540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001220:	2301      	movs	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122e:	2301      	movs	r3, #1
 8001230:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001232:	2302      	movs	r3, #2
 8001234:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800123c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001240:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001246:	4618      	mov	r0, r3
 8001248:	f002 feb0 	bl	8003fac <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001252:	f000 f828 	bl	80012a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001266:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2102      	movs	r1, #2
 8001272:	4618      	mov	r0, r3
 8001274:	f003 f91c 	bl	80044b0 <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800127e:	f000 f812 	bl	80012a6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001282:	2302      	movs	r3, #2
 8001284:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800128a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fa88 	bl	80047a4 <HAL_RCCEx_PeriphCLKConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800129a:	f000 f804 	bl	80012a6 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	; 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012aa:	b672      	cpsid	i
}
 80012ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ae:	e7fe      	b.n	80012ae <Error_Handler+0x8>

080012b0 <GetMode>:

void SetPWMAndDirection(int32_t pwm);
int GetCurrentDirection();

__IO MotorMode motor_mode = Stop;
MotorMode GetMode(){
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	return motor_mode;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <GetMode+0x14>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200001b4 	.word	0x200001b4

080012c8 <StateReset>:
void StateReset(){
 80012c8:	b598      	push	{r3, r4, r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	PID_Reset(&currentPID,GetCurrentDirection() * GetLawCurrent());
 80012cc:	f000 f99c 	bl	8001608 <GetCurrentDirection>
 80012d0:	4604      	mov	r4, r0
 80012d2:	f7ff fd95 	bl	8000e00 <GetLawCurrent>
 80012d6:	4603      	mov	r3, r0
 80012d8:	fb04 f303 	mul.w	r3, r4, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f7fe ffef 	bl	80002c0 <__aeabi_i2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <StateReset+0x38>)
 80012e8:	f7ff fabd 	bl	8000866 <PID_Reset>
	PID_Reset(&positionPID,0);
 80012ec:	f04f 0100 	mov.w	r1, #0
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <StateReset+0x3c>)
 80012f2:	f7ff fab8 	bl	8000866 <PID_Reset>
	Encoder_Reset();
 80012f6:	f7ff fe19 	bl	8000f2c <Encoder_Reset>
}
 80012fa:	bf00      	nop
 80012fc:	bd98      	pop	{r3, r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000034 	.word	0x20000034
 8001304:	20000058 	.word	0x20000058

08001308 <ChangeMode>:
void ChangeMode(MotorMode mode){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	//if motor_mode is InterlockWaiting, Cannot Change Interlock_Stop.
	if(motor_mode == Interlock_Waiting && mode == Interlock_Stop)return;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <ChangeMode+0x90>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b05      	cmp	r3, #5
 800131a:	d102      	bne.n	8001322 <ChangeMode+0x1a>
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b06      	cmp	r3, #6
 8001320:	d035      	beq.n	800138e <ChangeMode+0x86>

	motor_mode = mode;
 8001322:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <ChangeMode+0x90>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	7013      	strb	r3, [r2, #0]
	if(motor_mode == Stop ||motor_mode == Interlock_Waiting ||motor_mode == Interlock_Stop){
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <ChangeMode+0x90>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <ChangeMode+0x3e>
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <ChangeMode+0x90>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b05      	cmp	r3, #5
 800133a:	d004      	beq.n	8001346 <ChangeMode+0x3e>
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <ChangeMode+0x90>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b06      	cmp	r3, #6
 8001344:	d10f      	bne.n	8001366 <ChangeMode+0x5e>
		HAL_GPIO_WritePin(LED_MOTOR_GPIO_Port, LED_MOTOR_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <ChangeMode+0x94>)
 800134e:	f002 fdfc 	bl	8003f4a <HAL_GPIO_WritePin>
		//pid control stop
		HAL_TIM_Base_Stop_IT(&htim3);
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <ChangeMode+0x98>)
 8001354:	f003 ff0e 	bl	8005174 <HAL_TIM_Base_Stop_IT>
		//pwm stop
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001358:	2100      	movs	r1, #0
 800135a:	4812      	ldr	r0, [pc, #72]	; (80013a4 <ChangeMode+0x9c>)
 800135c:	f004 f88a 	bl	8005474 <HAL_TIM_PWM_Stop>
		StateReset();
 8001360:	f7ff ffb2 	bl	80012c8 <StateReset>
 8001364:	e00c      	b.n	8001380 <ChangeMode+0x78>
	}else{

		HAL_GPIO_WritePin(LED_MOTOR_GPIO_Port, LED_MOTOR_Pin, GPIO_PIN_SET);
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <ChangeMode+0x94>)
 800136e:	f002 fdec 	bl	8003f4a <HAL_GPIO_WritePin>
		//pid control start
		HAL_TIM_Base_Start_IT(&htim3);
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <ChangeMode+0x98>)
 8001374:	f003 feac 	bl	80050d0 <HAL_TIM_Base_Start_IT>
		//pwm start
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001378:	2100      	movs	r1, #0
 800137a:	480a      	ldr	r0, [pc, #40]	; (80013a4 <ChangeMode+0x9c>)
 800137c:	f003 ffd8 	bl	8005330 <HAL_TIM_PWM_Start>
	}
	CAN_Send_Status(motor_mode);
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <ChangeMode+0x90>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fbe8 	bl	8000b5c <CAN_Send_Status>
 800138c:	e000      	b.n	8001390 <ChangeMode+0x88>
	if(motor_mode == Interlock_Waiting && mode == Interlock_Stop)return;
 800138e:	bf00      	nop
}
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200001b4 	.word	0x200001b4
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	200002b0 	.word	0x200002b0
 80013a4:	20000220 	.word	0x20000220

080013a8 <DriverActivate>:

void DriverActivate(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2102      	movs	r1, #2
 80013b0:	4817      	ldr	r0, [pc, #92]	; (8001410 <DriverActivate+0x68>)
 80013b2:	f002 fdca 	bl	8003f4a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DRVOFF_GPIO_Port, DRVOFF_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2120      	movs	r1, #32
 80013ba:	4815      	ldr	r0, [pc, #84]	; (8001410 <DriverActivate+0x68>)
 80013bc:	f002 fdc5 	bl	8003f4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2102      	movs	r1, #2
 80013c4:	4812      	ldr	r0, [pc, #72]	; (8001410 <DriverActivate+0x68>)
 80013c6:	f002 fdc0 	bl	8003f4a <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)!=GPIO_PIN_RESET){
 80013ca:	e004      	b.n	80013d6 <DriverActivate+0x2e>
	  led_on(state1);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff fe59 	bl	8001084 <led_on>
	  led_process();
 80013d2:	f7ff fe83 	bl	80010dc <led_process>
	while(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)!=GPIO_PIN_RESET){
 80013d6:	2101      	movs	r1, #1
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <DriverActivate+0x68>)
 80013da:	f002 fd9f 	bl	8003f1c <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f3      	bne.n	80013cc <DriverActivate+0x24>
	}
	while(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)!=GPIO_PIN_SET){
 80013e4:	e006      	b.n	80013f4 <DriverActivate+0x4c>
	  led_on(state2);
 80013e6:	2002      	movs	r0, #2
 80013e8:	f7ff fe4c 	bl	8001084 <led_on>
	  ClearFault();
 80013ec:	f7ff fd32 	bl	8000e54 <ClearFault>
	  led_process();
 80013f0:	f7ff fe74 	bl	80010dc <led_process>
	while(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)!=GPIO_PIN_SET){
 80013f4:	2101      	movs	r1, #1
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <DriverActivate+0x68>)
 80013f8:	f002 fd90 	bl	8003f1c <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d1f1      	bne.n	80013e6 <DriverActivate+0x3e>
	}
	HAL_GPIO_WritePin(DRVOFF_GPIO_Port, DRVOFF_Pin, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2120      	movs	r1, #32
 8001406:	4802      	ldr	r0, [pc, #8]	; (8001410 <DriverActivate+0x68>)
 8001408:	f002 fd9f 	bl	8003f4a <HAL_GPIO_WritePin>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40010c00 	.word	0x40010c00

08001414 <Activate>:
void Activate(){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001418:	213c      	movs	r1, #60	; 0x3c
 800141a:	4806      	ldr	r0, [pc, #24]	; (8001434 <Activate+0x20>)
 800141c:	f004 f930 	bl	8005680 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <Activate+0x20>)
 8001422:	f003 fe55 	bl	80050d0 <HAL_TIM_Base_Start_IT>
	DriverActivate();
 8001426:	f7ff ffbf 	bl	80013a8 <DriverActivate>
	InitADC();
 800142a:	f7ff fccf 	bl	8000dcc <InitADC>
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000268 	.word	0x20000268

08001438 <MotorControlUpdate>:
float encoder_position;
int32_t pwm=0;
/*
Position -> Current -> PWM
*/
void MotorControlUpdate(){
 8001438:	b598      	push	{r3, r4, r7, lr}
 800143a:	af00      	add	r7, sp, #0
	led_on(state1);
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff fe21 	bl	8001084 <led_on>
//	if(!HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin))return;

	switch(motor_mode){
 8001442:	4b41      	ldr	r3, [pc, #260]	; (8001548 <MotorControlUpdate+0x110>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b05      	cmp	r3, #5
 800144a:	d86b      	bhi.n	8001524 <MotorControlUpdate+0xec>
 800144c:	a201      	add	r2, pc, #4	; (adr r2, 8001454 <MotorControlUpdate+0x1c>)
 800144e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001452:	bf00      	nop
 8001454:	0800152d 	.word	0x0800152d
 8001458:	0800152d 	.word	0x0800152d
 800145c:	0800146d 	.word	0x0800146d
 8001460:	0800149d 	.word	0x0800149d
 8001464:	080014e1 	.word	0x080014e1
 8001468:	0800152d 	.word	0x0800152d
		//TODO
		break;
	}
	case Current:
	{
		pwm = PID_Update(&currentPID, GetCurrentDirection() * GetLawCurrent());
 800146c:	f000 f8cc 	bl	8001608 <GetCurrentDirection>
 8001470:	4604      	mov	r4, r0
 8001472:	f7ff fcc5 	bl	8000e00 <GetLawCurrent>
 8001476:	4603      	mov	r3, r0
 8001478:	fb04 f303 	mul.w	r3, r4, r3
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe ff1f 	bl	80002c0 <__aeabi_i2f>
 8001482:	4603      	mov	r3, r0
 8001484:	4619      	mov	r1, r3
 8001486:	4831      	ldr	r0, [pc, #196]	; (800154c <MotorControlUpdate+0x114>)
 8001488:	f7ff f95a 	bl	8000740 <PID_Update>
 800148c:	4603      	mov	r3, r0
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f930 	bl	80006f4 <__aeabi_f2iz>
 8001494:	4603      	mov	r3, r0
 8001496:	4a2e      	ldr	r2, [pc, #184]	; (8001550 <MotorControlUpdate+0x118>)
 8001498:	6013      	str	r3, [r2, #0]
		break;
 800149a:	e048      	b.n	800152e <MotorControlUpdate+0xf6>
	}
	case Position:
	{
		currentPID.target = PID_Update(&positionPID, Encoder_GetPosition());
 800149c:	f7ff fd12 	bl	8000ec4 <Encoder_GetPosition>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4619      	mov	r1, r3
 80014a4:	482b      	ldr	r0, [pc, #172]	; (8001554 <MotorControlUpdate+0x11c>)
 80014a6:	f7ff f94b 	bl	8000740 <PID_Update>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <MotorControlUpdate+0x114>)
 80014ae:	6213      	str	r3, [r2, #32]
		pwm = PID_Update(&currentPID, GetCurrentDirection() * GetLawCurrent());
 80014b0:	f000 f8aa 	bl	8001608 <GetCurrentDirection>
 80014b4:	4604      	mov	r4, r0
 80014b6:	f7ff fca3 	bl	8000e00 <GetLawCurrent>
 80014ba:	4603      	mov	r3, r0
 80014bc:	fb04 f303 	mul.w	r3, r4, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe fefd 	bl	80002c0 <__aeabi_i2f>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4619      	mov	r1, r3
 80014ca:	4820      	ldr	r0, [pc, #128]	; (800154c <MotorControlUpdate+0x114>)
 80014cc:	f7ff f938 	bl	8000740 <PID_Update>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f90e 	bl	80006f4 <__aeabi_f2iz>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <MotorControlUpdate+0x118>)
 80014dc:	6013      	str	r3, [r2, #0]
		break;
 80014de:	e026      	b.n	800152e <MotorControlUpdate+0xf6>
	}
	case Interlock_Position:
	{
		currentPID.target = PID_Update(&positionPID, Encoder_GetPosition());
 80014e0:	f7ff fcf0 	bl	8000ec4 <Encoder_GetPosition>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4619      	mov	r1, r3
 80014e8:	481a      	ldr	r0, [pc, #104]	; (8001554 <MotorControlUpdate+0x11c>)
 80014ea:	f7ff f929 	bl	8000740 <PID_Update>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a16      	ldr	r2, [pc, #88]	; (800154c <MotorControlUpdate+0x114>)
 80014f2:	6213      	str	r3, [r2, #32]
		pwm = PID_Update(&currentPID, GetCurrentDirection() * GetLawCurrent());
 80014f4:	f000 f888 	bl	8001608 <GetCurrentDirection>
 80014f8:	4604      	mov	r4, r0
 80014fa:	f7ff fc81 	bl	8000e00 <GetLawCurrent>
 80014fe:	4603      	mov	r3, r0
 8001500:	fb04 f303 	mul.w	r3, r4, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe fedb 	bl	80002c0 <__aeabi_i2f>
 800150a:	4603      	mov	r3, r0
 800150c:	4619      	mov	r1, r3
 800150e:	480f      	ldr	r0, [pc, #60]	; (800154c <MotorControlUpdate+0x114>)
 8001510:	f7ff f916 	bl	8000740 <PID_Update>
 8001514:	4603      	mov	r3, r0
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f8ec 	bl	80006f4 <__aeabi_f2iz>
 800151c:	4603      	mov	r3, r0
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <MotorControlUpdate+0x118>)
 8001520:	6013      	str	r3, [r2, #0]
		break;
 8001522:	e004      	b.n	800152e <MotorControlUpdate+0xf6>
	}


	default:
		ChangeMode(Stop);
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff feef 	bl	8001308 <ChangeMode>
		break;
 800152a:	e000      	b.n	800152e <MotorControlUpdate+0xf6>
		break;
 800152c:	bf00      	nop
	}

	SetPWMAndDirection(pwm);
 800152e:	4b08      	ldr	r3, [pc, #32]	; (8001550 <MotorControlUpdate+0x118>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f82e 	bl	8001594 <SetPWMAndDirection>
	encoder_position = Encoder_GetPosition();
 8001538:	f7ff fcc4 	bl	8000ec4 <Encoder_GetPosition>
 800153c:	4603      	mov	r3, r0
 800153e:	4a06      	ldr	r2, [pc, #24]	; (8001558 <MotorControlUpdate+0x120>)
 8001540:	6013      	str	r3, [r2, #0]


}
 8001542:	bf00      	nop
 8001544:	bd98      	pop	{r3, r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	200001b4 	.word	0x200001b4
 800154c:	20000034 	.word	0x20000034
 8001550:	200001bc 	.word	0x200001bc
 8001554:	20000058 	.word	0x20000058
 8001558:	200001b8 	.word	0x200001b8

0800155c <StopFromLimit>:


void StopFromLimit(uint32_t GPIO_Pin){
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	MotorMode mode = motor_mode;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <StopFromLimit+0x34>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	73fb      	strb	r3, [r7, #15]
	//first, stop as soon as possible
	ChangeMode(Stop);
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fecc 	bl	8001308 <ChangeMode>

	if(mode == Interlock_Position || mode == Interlock_Waiting){
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b04      	cmp	r3, #4
 8001574:	d002      	beq.n	800157c <StopFromLimit+0x20>
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d104      	bne.n	8001586 <StopFromLimit+0x2a>
		ChangeMode(Interlock_Waiting);
 800157c:	2005      	movs	r0, #5
 800157e:	f7ff fec3 	bl	8001308 <ChangeMode>
		CAN_Send_Partial_Stop();
 8001582:	f7ff fb13 	bl	8000bac <CAN_Send_Partial_Stop>
		// the job keeps doing on main function.

	}
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200001b4 	.word	0x200001b4

08001594 <SetPWMAndDirection>:


int currentDirection = 0;
int lastMotorDirectionSetting = 0;
void SetPWMAndDirection(int32_t pwm){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

	//set direction
	if(pwm > 0){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	dd09      	ble.n	80015b6 <SetPWMAndDirection+0x22>
		HAL_GPIO_WritePin(PH_GPIO_Port, PH_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a8:	4814      	ldr	r0, [pc, #80]	; (80015fc <SetPWMAndDirection+0x68>)
 80015aa:	f002 fcce 	bl	8003f4a <HAL_GPIO_WritePin>
		currentDirection = 1;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <SetPWMAndDirection+0x6c>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	e00c      	b.n	80015d0 <SetPWMAndDirection+0x3c>
	}else{
		HAL_GPIO_WritePin(PH_GPIO_Port, PH_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015bc:	480f      	ldr	r0, [pc, #60]	; (80015fc <SetPWMAndDirection+0x68>)
 80015be:	f002 fcc4 	bl	8003f4a <HAL_GPIO_WritePin>
		pwm = -pwm;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	425b      	negs	r3, r3
 80015c6:	607b      	str	r3, [r7, #4]
		currentDirection = -1;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <SetPWMAndDirection+0x6c>)
 80015ca:	f04f 32ff 	mov.w	r2, #4294967295
 80015ce:	601a      	str	r2, [r3, #0]
	}

	if(pwm> UINT16_MAX)pwm = UINT16_MAX;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d6:	db02      	blt.n	80015de <SetPWMAndDirection+0x4a>
 80015d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015dc:	607b      	str	r3, [r7, #4]

	//low pwm cut off
	if(pwm < 300) pwm = 0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015e4:	da01      	bge.n	80015ea <SetPWMAndDirection+0x56>
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <SetPWMAndDirection+0x70>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	200001c0 	.word	0x200001c0
 8001604:	20000220 	.word	0x20000220

08001608 <GetCurrentDirection>:

//it is -1 or 1
int GetCurrentDirection(){
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
	return currentDirection;
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <GetCurrentDirection+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	200001c0 	.word	0x200001c0

0800161c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */
  HAL_GPIO_WritePin(nSCS_GPIO_Port, nSCS_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001626:	481e      	ldr	r0, [pc, #120]	; (80016a0 <MX_SPI1_Init+0x84>)
 8001628:	f002 fc8f 	bl	8003f4a <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_SPI1_Init+0x88>)
 800162e:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <MX_SPI1_Init+0x8c>)
 8001630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_SPI1_Init+0x88>)
 8001634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_SPI1_Init+0x88>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_SPI1_Init+0x88>)
 8001642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001646:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_SPI1_Init+0x88>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_SPI1_Init+0x88>)
 8001650:	2201      	movs	r2, #1
 8001652:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_SPI1_Init+0x88>)
 8001656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800165a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_SPI1_Init+0x88>)
 800165e:	2220      	movs	r2, #32
 8001660:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_SPI1_Init+0x88>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_SPI1_Init+0x88>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <MX_SPI1_Init+0x88>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_SPI1_Init+0x88>)
 8001676:	220a      	movs	r2, #10
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800167a:	480a      	ldr	r0, [pc, #40]	; (80016a4 <MX_SPI1_Init+0x88>)
 800167c:	f003 f9fe 	bl	8004a7c <HAL_SPI_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001686:	f7ff fe0e 	bl	80012a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_SPI1_Init+0x88>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <MX_SPI1_Init+0x88>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001698:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40010c00 	.word	0x40010c00
 80016a4:	200001c4 	.word	0x200001c4
 80016a8:	40013000 	.word	0x40013000

080016ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_SPI_MspInit+0x88>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d12f      	bne.n	800172c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a13      	ldr	r2, [pc, #76]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_SPI_MspInit+0x8c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016fc:	23a0      	movs	r3, #160	; 0xa0
 80016fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4619      	mov	r1, r3
 800170e:	480b      	ldr	r0, [pc, #44]	; (800173c <HAL_SPI_MspInit+0x90>)
 8001710:	f002 fa80 	bl	8003c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001714:	2340      	movs	r3, #64	; 0x40
 8001716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <HAL_SPI_MspInit+0x90>)
 8001728:	f002 fa74 	bl	8003c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40013000 	.word	0x40013000
 8001738:	40021000 	.word	0x40021000
 800173c:	40010800 	.word	0x40010800

08001740 <SPI_Write>:
	HAL_GPIO_WritePin(nSCS_GPIO_Port, nSCS_Pin, GPIO_PIN_SET);
	if(status!=HAL_OK)led_on(state2);
	return (((uint16_t)RxData[1]) << 8) + RxData[0];

}
uint16_t SPI_Write(uint8_t address,uint8_t data){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af02      	add	r7, sp, #8
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
	//address size assert
	assert(!(address & 0b11000000));
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <SPI_Write+0x26>
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <SPI_Write+0x90>)
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <SPI_Write+0x94>)
 800175e:	218d      	movs	r1, #141	; 0x8d
 8001760:	481d      	ldr	r0, [pc, #116]	; (80017d8 <SPI_Write+0x98>)
 8001762:	f004 fe93 	bl	800648c <__assert_func>

	uint8_t TxData[2];
	TxData[1] = address | 0b00000000;
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	737b      	strb	r3, [r7, #13]
	TxData[0] = data;
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	733b      	strb	r3, [r7, #12]
	uint8_t RxData[2];

	HAL_GPIO_WritePin(nSCS_GPIO_Port, nSCS_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001774:	4819      	ldr	r0, [pc, #100]	; (80017dc <SPI_Write+0x9c>)
 8001776:	f002 fbe8 	bl	8003f4a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f000 fc70 	bl	8002060 <HAL_Delay>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)TxData, (uint8_t*)RxData, 1, SPI_TIMEOUT);
 8001780:	f107 0208 	add.w	r2, r7, #8
 8001784:	f107 010c 	add.w	r1, r7, #12
 8001788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2301      	movs	r3, #1
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <SPI_Write+0xa0>)
 8001792:	f003 f9f7 	bl	8004b84 <HAL_SPI_TransmitReceive>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f000 fc60 	bl	8002060 <HAL_Delay>
	HAL_GPIO_WritePin(nSCS_GPIO_Port, nSCS_Pin, GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a6:	480d      	ldr	r0, [pc, #52]	; (80017dc <SPI_Write+0x9c>)
 80017a8:	f002 fbcf 	bl	8003f4a <HAL_GPIO_WritePin>
	if(status!=HAL_OK){
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <SPI_Write+0x78>
		led_on(state2);
 80017b2:	2002      	movs	r0, #2
 80017b4:	f7ff fc66 	bl	8001084 <led_on>
	}
	return (((uint16_t)RxData[1]) << 8) + RxData[0];
 80017b8:	7a7b      	ldrb	r3, [r7, #9]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	b29a      	uxth	r2, r3
 80017c0:	7a3b      	ldrb	r3, [r7, #8]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	b29b      	uxth	r3, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	080074f8 	.word	0x080074f8
 80017d4:	08007554 	.word	0x08007554
 80017d8:	08007510 	.word	0x08007510
 80017dc:	40010c00 	.word	0x40010c00
 80017e0:	200001c4 	.word	0x200001c4

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_MspInit+0x5c>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4a14      	ldr	r2, [pc, #80]	; (8001840 <HAL_MspInit+0x5c>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6193      	str	r3, [r2, #24]
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_MspInit+0x5c>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_MspInit+0x5c>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_MspInit+0x5c>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_MspInit+0x5c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_MspInit+0x60>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_MspInit+0x60>)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000
 8001844:	40010000 	.word	0x40010000

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler+0x4>

08001866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188e:	f000 fbcb 	bl	8002028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <DMA1_Channel1_IRQHandler+0x10>)
 800189e:	f002 f885 	bl	80039ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000138 	.word	0x20000138

080018ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80018b2:	f001 fc90 	bl	80031d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000017c 	.word	0x2000017c

080018c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <TIM2_IRQHandler+0x10>)
 80018c6:	f003 ff69 	bl	800579c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000268 	.word	0x20000268

080018d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <TIM3_IRQHandler+0x10>)
 80018da:	f003 ff5f 	bl	800579c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200002b0 	.word	0x200002b0

080018e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LimitA_Pin);
 80018ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018f0:	f002 fb44 	bl	8003f7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LimitB_Pin);
 80018f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018f8:	f002 fb40 	bl	8003f7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}

08001900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return 1;
 8001904:	2301      	movs	r3, #1
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <_kill>:

int _kill(int pid, int sig)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001918:	f004 fdd6 	bl	80064c8 <__errno>
 800191c:	4603      	mov	r3, r0
 800191e:	2216      	movs	r2, #22
 8001920:	601a      	str	r2, [r3, #0]
  return -1;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_exit>:

void _exit (int status)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001936:	f04f 31ff 	mov.w	r1, #4294967295
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffe7 	bl	800190e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001940:	e7fe      	b.n	8001940 <_exit+0x12>

08001942 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e00a      	b.n	800196a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001954:	f3af 8000 	nop.w
 8001958:	4601      	mov	r1, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	60ba      	str	r2, [r7, #8]
 8001960:	b2ca      	uxtb	r2, r1
 8001962:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	dbf0      	blt.n	8001954 <_read+0x12>
  }

  return len;
 8001972:	687b      	ldr	r3, [r7, #4]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e009      	b.n	80019a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	60ba      	str	r2, [r7, #8]
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	dbf1      	blt.n	800198e <_write+0x12>
  }
  return len;
 80019aa:	687b      	ldr	r3, [r7, #4]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_close>:

int _close(int file)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr

080019ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019da:	605a      	str	r2, [r3, #4]
  return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <_isatty>:

int _isatty(int file)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f0:	2301      	movs	r3, #1
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <_sbrk+0x5c>)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <_sbrk+0x60>)
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <_sbrk+0x64>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <_sbrk+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d207      	bcs.n	8001a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a44:	f004 fd40 	bl	80064c8 <__errno>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	e009      	b.n	8001a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_sbrk+0x64>)
 8001a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20005000 	.word	0x20005000
 8001a74:	00000400 	.word	0x00000400
 8001a78:	2000021c 	.word	0x2000021c
 8001a7c:	20000310 	.word	0x20000310

08001a80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b096      	sub	sp, #88	; 0x58
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 fd3b 	bl	8006540 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aca:	4b3e      	ldr	r3, [pc, #248]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001acc:	4a3e      	ldr	r2, [pc, #248]	; (8001bc8 <MX_TIM1_Init+0x13c>)
 8001ace:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001ad0:	4b3c      	ldr	r3, [pc, #240]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001adc:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae4:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aea:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001af6:	4833      	ldr	r0, [pc, #204]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001af8:	f003 fa9a 	bl	8005030 <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b02:	f7ff fbd0 	bl	80012a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b10:	4619      	mov	r1, r3
 8001b12:	482c      	ldr	r0, [pc, #176]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001b14:	f004 f868 	bl	8005be8 <HAL_TIM_ConfigClockSource>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b1e:	f7ff fbc2 	bl	80012a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b22:	4828      	ldr	r0, [pc, #160]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001b24:	f003 fbac 	bl	8005280 <HAL_TIM_PWM_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b2e:	f7ff fbba 	bl	80012a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001b42:	f004 fbe1 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b4c:	f7ff fbab 	bl	80012a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b50:	2360      	movs	r3, #96	; 0x60
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	2200      	movs	r2, #0
 8001b72:	4619      	mov	r1, r3
 8001b74:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001b76:	f003 ff75 	bl	8005a64 <HAL_TIM_PWM_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b80:	f7ff fb91 	bl	80012a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001ba8:	f004 fc0c 	bl	80063c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001bb2:	f7ff fb78 	bl	80012a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <MX_TIM1_Init+0x138>)
 8001bb8:	f000 f97e 	bl	8001eb8 <HAL_TIM_MspPostInit>

}
 8001bbc:	bf00      	nop
 8001bbe:	3758      	adds	r7, #88	; 0x58
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000220 	.word	0x20000220
 8001bc8:	40012c00 	.word	0x40012c00

08001bcc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	2224      	movs	r2, #36	; 0x24
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 fcb0 	bl	8006540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c10:	2303      	movs	r3, #3
 8001c12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001c3c:	f003 fc7e 	bl	800553c <HAL_TIM_Encoder_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c46:	f7ff fb2e 	bl	80012a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001c58:	f004 fb56 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c62:	f7ff fb20 	bl	80012a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	3730      	adds	r7, #48	; 0x30
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000268 	.word	0x20000268

08001c74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08e      	sub	sp, #56	; 0x38
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	f107 0320 	add.w	r3, r7, #32
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
 8001ca0:	615a      	str	r2, [r3, #20]
 8001ca2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001ca6:	4a2c      	ldr	r2, [pc, #176]	; (8001d58 <MX_TIM3_Init+0xe4>)
 8001ca8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 70-1;
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001cba:	2245      	movs	r2, #69	; 0x45
 8001cbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cca:	4822      	ldr	r0, [pc, #136]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001ccc:	f003 f9b0 	bl	8005030 <HAL_TIM_Base_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001cd6:	f7ff fae6 	bl	80012a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481b      	ldr	r0, [pc, #108]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001ce8:	f003 ff7e 	bl	8005be8 <HAL_TIM_ConfigClockSource>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001cf2:	f7ff fad8 	bl	80012a6 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001cf6:	4817      	ldr	r0, [pc, #92]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001cf8:	f003 fa6a 	bl	80051d0 <HAL_TIM_OC_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d02:	f7ff fad0 	bl	80012a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d0e:	f107 0320 	add.w	r3, r7, #32
 8001d12:	4619      	mov	r1, r3
 8001d14:	480f      	ldr	r0, [pc, #60]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001d16:	f004 faf7 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d20:	f7ff fac1 	bl	80012a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4806      	ldr	r0, [pc, #24]	; (8001d54 <MX_TIM3_Init+0xe0>)
 8001d3c:	f003 fe36 	bl	80059ac <HAL_TIM_OC_ConfigChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d46:	f7ff faae 	bl	80012a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	3738      	adds	r7, #56	; 0x38
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200002b0 	.word	0x200002b0
 8001d58:	40000400 	.word	0x40000400

08001d5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_TIM_Base_MspInit+0x68>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d10c      	bne.n	8001d88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d78:	6193      	str	r3, [r2, #24]
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d86:	e018      	b.n	8001dba <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0f      	ldr	r2, [pc, #60]	; (8001dcc <HAL_TIM_Base_MspInit+0x70>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d113      	bne.n	8001dba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a0c      	ldr	r2, [pc, #48]	; (8001dc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	61d3      	str	r3, [r2, #28]
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_TIM_Base_MspInit+0x6c>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2102      	movs	r1, #2
 8001dae:	201d      	movs	r0, #29
 8001db0:	f001 fd0b 	bl	80037ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001db4:	201d      	movs	r0, #29
 8001db6:	f001 fd24 	bl	8003802 <HAL_NVIC_EnableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40012c00 	.word	0x40012c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d156      	bne.n	8001e9e <HAL_TIM_Encoder_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	4a2c      	ldr	r2, [pc, #176]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	61d3      	str	r3, [r2, #28]
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a20      	ldr	r2, [pc, #128]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4817      	ldr	r0, [pc, #92]	; (8001eac <HAL_TIM_Encoder_MspInit+0xdc>)
 8001e4e:	f001 fee1 	bl	8003c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e52:	2308      	movs	r3, #8
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4812      	ldr	r0, [pc, #72]	; (8001eb0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001e66:	f001 fed5 	bl	8003c14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2104      	movs	r1, #4
 8001e92:	201c      	movs	r0, #28
 8001e94:	f001 fc99 	bl	80037ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e98:	201c      	movs	r0, #28
 8001e9a:	f001 fcb2 	bl	8003802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40010c00 	.word	0x40010c00
 8001eb4:	40010000 	.word	0x40010000

08001eb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_TIM_MspPostInit+0x5c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d118      	bne.n	8001f0a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <HAL_TIM_MspPostInit+0x60>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <HAL_TIM_MspPostInit+0x60>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <HAL_TIM_MspPostInit+0x60>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EN_Pin;
 8001ef0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <HAL_TIM_MspPostInit+0x64>)
 8001f06:	f001 fe85 	bl	8003c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40012c00 	.word	0x40012c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010800 	.word	0x40010800

08001f20 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2){
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_PeriodElapsedCallback+0x16>
    	Encoder_OverflowCallback();
 8001f32:	f7fe ffa5 	bl	8000e80 <Encoder_OverflowCallback>
    }

    if(htim->Instance==TIM3){
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d101      	bne.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x24>
    	MotorControlUpdate();
 8001f40:	f7ff fa7a 	bl	8001438 <MotorControlUpdate>
    }
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40000400 	.word	0x40000400

08001f50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f50:	f7ff fd96 	bl	8001a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f56:	490c      	ldr	r1, [pc, #48]	; (8001f88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f58:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f6c:	4c09      	ldr	r4, [pc, #36]	; (8001f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f004 fabd 	bl	80064f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f7e:	f7ff f8eb 	bl	8001158 <main>
  bx lr
 8001f82:	4770      	bx	lr
  ldr r0, =_sdata
 8001f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f88:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001f8c:	0800767c 	.word	0x0800767c
  ldr r2, =_sbss
 8001f90:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001f94:	2000030c 	.word	0x2000030c

08001f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f98:	e7fe      	b.n	8001f98 <ADC1_2_IRQHandler>
	...

08001f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_Init+0x28>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_Init+0x28>)
 8001fa6:	f043 0310 	orr.w	r3, r3, #16
 8001faa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fac:	2003      	movs	r0, #3
 8001fae:	f001 fc01 	bl	80037b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb2:	200f      	movs	r0, #15
 8001fb4:	f000 f808 	bl	8001fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb8:	f7ff fc14 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40022000 	.word	0x40022000

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_InitTick+0x54>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_InitTick+0x58>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 fc19 	bl	800381e <HAL_SYSTICK_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00e      	b.n	8002014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b0f      	cmp	r3, #15
 8001ffa:	d80a      	bhi.n	8002012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f001 fbe1 	bl	80037ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_InitTick+0x5c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e000      	b.n	8002014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000007c 	.word	0x2000007c
 8002020:	20000084 	.word	0x20000084
 8002024:	20000080 	.word	0x20000080

08002028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_IncTick+0x1c>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_IncTick+0x20>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4413      	add	r3, r2
 8002038:	4a03      	ldr	r2, [pc, #12]	; (8002048 <HAL_IncTick+0x20>)
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000084 	.word	0x20000084
 8002048:	200002f8 	.word	0x200002f8

0800204c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <HAL_GetTick+0x10>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	200002f8 	.word	0x200002f8

08002060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff fff0 	bl	800204c <HAL_GetTick>
 800206c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002078:	d005      	beq.n	8002086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_Delay+0x44>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002086:	bf00      	nop
 8002088:	f7ff ffe0 	bl	800204c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	429a      	cmp	r2, r3
 8002096:	d8f7      	bhi.n	8002088 <HAL_Delay+0x28>
  {
  }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000084 	.word	0x20000084

080020a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0be      	b.n	8002248 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe fc10 	bl	800090c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 faff 	bl	80026f0 <ADC_ConversionStop_Disable>
 80020f2:	4603      	mov	r3, r0
 80020f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 8099 	bne.w	8002236 <HAL_ADC_Init+0x18e>
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 8095 	bne.w	8002236 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002114:	f023 0302 	bic.w	r3, r3, #2
 8002118:	f043 0202 	orr.w	r2, r3, #2
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002128:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7b1b      	ldrb	r3, [r3, #12]
 800212e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002130:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4313      	orrs	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002140:	d003      	beq.n	800214a <HAL_ADC_Init+0xa2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d102      	bne.n	8002150 <HAL_ADC_Init+0xa8>
 800214a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214e:	e000      	b.n	8002152 <HAL_ADC_Init+0xaa>
 8002150:	2300      	movs	r3, #0
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7d1b      	ldrb	r3, [r3, #20]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d119      	bne.n	8002194 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	7b1b      	ldrb	r3, [r3, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	3b01      	subs	r3, #1
 800216e:	035a      	lsls	r2, r3, #13
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e00b      	b.n	8002194 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_ADC_Init+0x1a8>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c4:	d003      	beq.n	80021ce <HAL_ADC_Init+0x126>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d104      	bne.n	80021d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	051b      	lsls	r3, r3, #20
 80021d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_ADC_Init+0x1ac>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d10b      	bne.n	8002214 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	f023 0303 	bic.w	r3, r3, #3
 800220a:	f043 0201 	orr.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002212:	e018      	b.n	8002246 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	f023 0312 	bic.w	r3, r3, #18
 800221c:	f043 0210 	orr.w	r2, r3, #16
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	f043 0201 	orr.w	r2, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002234:	e007      	b.n	8002246 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002246:	7dfb      	ldrb	r3, [r7, #23]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	ffe1f7fd 	.word	0xffe1f7fd
 8002254:	ff1f0efe 	.word	0xff1f0efe

08002258 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a64      	ldr	r2, [pc, #400]	; (8002400 <HAL_ADC_Start_DMA+0x1a8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d004      	beq.n	800227c <HAL_ADC_Start_DMA+0x24>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a63      	ldr	r2, [pc, #396]	; (8002404 <HAL_ADC_Start_DMA+0x1ac>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d106      	bne.n	800228a <HAL_ADC_Start_DMA+0x32>
 800227c:	4b60      	ldr	r3, [pc, #384]	; (8002400 <HAL_ADC_Start_DMA+0x1a8>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 80b3 	bne.w	80023f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_ADC_Start_DMA+0x40>
 8002294:	2302      	movs	r3, #2
 8002296:	e0ae      	b.n	80023f6 <HAL_ADC_Start_DMA+0x19e>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f9cb 	bl	800263c <ADC_Enable>
 80022a6:	4603      	mov	r3, r0
 80022a8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f040 809a 	bne.w	80023e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a4e      	ldr	r2, [pc, #312]	; (8002404 <HAL_ADC_Start_DMA+0x1ac>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d105      	bne.n	80022dc <HAL_ADC_Start_DMA+0x84>
 80022d0:	4b4b      	ldr	r3, [pc, #300]	; (8002400 <HAL_ADC_Start_DMA+0x1a8>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d115      	bne.n	8002308 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d026      	beq.n	8002344 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002306:	e01d      	b.n	8002344 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a39      	ldr	r2, [pc, #228]	; (8002400 <HAL_ADC_Start_DMA+0x1a8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d004      	beq.n	8002328 <HAL_ADC_Start_DMA+0xd0>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a38      	ldr	r2, [pc, #224]	; (8002404 <HAL_ADC_Start_DMA+0x1ac>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d10d      	bne.n	8002344 <HAL_ADC_Start_DMA+0xec>
 8002328:	4b35      	ldr	r3, [pc, #212]	; (8002400 <HAL_ADC_Start_DMA+0x1a8>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800233c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d006      	beq.n	800235e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	f023 0206 	bic.w	r2, r3, #6
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c
 800235c:	e002      	b.n	8002364 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a25      	ldr	r2, [pc, #148]	; (8002408 <HAL_ADC_Start_DMA+0x1b0>)
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4a24      	ldr	r2, [pc, #144]	; (800240c <HAL_ADC_Start_DMA+0x1b4>)
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4a23      	ldr	r2, [pc, #140]	; (8002410 <HAL_ADC_Start_DMA+0x1b8>)
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0202 	mvn.w	r2, #2
 800238c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800239c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a18      	ldr	r0, [r3, #32]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	334c      	adds	r3, #76	; 0x4c
 80023a8:	4619      	mov	r1, r3
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f001 fa9d 	bl	80038ec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023c0:	d108      	bne.n	80023d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023d2:	e00f      	b.n	80023f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80023e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023e4:	e006      	b.n	80023f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80023ee:	e001      	b.n	80023f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40012400 	.word	0x40012400
 8002404:	40012800 	.word	0x40012800
 8002408:	08002773 	.word	0x08002773
 800240c:	080027ef 	.word	0x080027ef
 8002410:	0800280b 	.word	0x0800280b

08002414 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
	...

0800244c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_ADC_ConfigChannel+0x20>
 8002468:	2302      	movs	r3, #2
 800246a:	e0dc      	b.n	8002626 <HAL_ADC_ConfigChannel+0x1da>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b06      	cmp	r3, #6
 800247a:	d81c      	bhi.n	80024b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	3b05      	subs	r3, #5
 800248e:	221f      	movs	r2, #31
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	4019      	ands	r1, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	3b05      	subs	r3, #5
 80024a8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	635a      	str	r2, [r3, #52]	; 0x34
 80024b4:	e03c      	b.n	8002530 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d81c      	bhi.n	80024f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	3b23      	subs	r3, #35	; 0x23
 80024d0:	221f      	movs	r2, #31
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	4019      	ands	r1, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	3b23      	subs	r3, #35	; 0x23
 80024ea:	fa00 f203 	lsl.w	r2, r0, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
 80024f6:	e01b      	b.n	8002530 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	3b41      	subs	r3, #65	; 0x41
 800250a:	221f      	movs	r2, #31
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	4019      	ands	r1, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	3b41      	subs	r3, #65	; 0x41
 8002524:	fa00 f203 	lsl.w	r2, r0, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b09      	cmp	r3, #9
 8002536:	d91c      	bls.n	8002572 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68d9      	ldr	r1, [r3, #12]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	3b1e      	subs	r3, #30
 800254a:	2207      	movs	r2, #7
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	4019      	ands	r1, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	6898      	ldr	r0, [r3, #8]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	3b1e      	subs	r3, #30
 8002564:	fa00 f203 	lsl.w	r2, r0, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	e019      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6919      	ldr	r1, [r3, #16]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	2207      	movs	r2, #7
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	4019      	ands	r1, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6898      	ldr	r0, [r3, #8]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	fa00 f203 	lsl.w	r2, r0, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b10      	cmp	r3, #16
 80025ac:	d003      	beq.n	80025b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025b2:	2b11      	cmp	r3, #17
 80025b4:	d132      	bne.n	800261c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <HAL_ADC_ConfigChannel+0x1e4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d125      	bne.n	800260c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d126      	bne.n	800261c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d11a      	bne.n	800261c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_ADC_ConfigChannel+0x1e8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a13      	ldr	r2, [pc, #76]	; (8002638 <HAL_ADC_ConfigChannel+0x1ec>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	0c9a      	lsrs	r2, r3, #18
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025fc:	e002      	b.n	8002604 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	3b01      	subs	r3, #1
 8002602:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f9      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x1b2>
 800260a:	e007      	b.n	800261c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	f043 0220 	orr.w	r2, r3, #32
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	40012400 	.word	0x40012400
 8002634:	2000007c 	.word	0x2000007c
 8002638:	431bde83 	.word	0x431bde83

0800263c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d040      	beq.n	80026dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800266a:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <ADC_Enable+0xac>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <ADC_Enable+0xb0>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	0c9b      	lsrs	r3, r3, #18
 8002676:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002678:	e002      	b.n	8002680 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	3b01      	subs	r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f9      	bne.n	800267a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002686:	f7ff fce1 	bl	800204c <HAL_GetTick>
 800268a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800268c:	e01f      	b.n	80026ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800268e:	f7ff fcdd 	bl	800204c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d918      	bls.n	80026ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d011      	beq.n	80026ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	f043 0210 	orr.w	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	f043 0201 	orr.w	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e007      	b.n	80026de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d1d8      	bne.n	800268e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000007c 	.word	0x2000007c
 80026ec:	431bde83 	.word	0x431bde83

080026f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d12e      	bne.n	8002768 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800271a:	f7ff fc97 	bl	800204c <HAL_GetTick>
 800271e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002720:	e01b      	b.n	800275a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002722:	f7ff fc93 	bl	800204c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d914      	bls.n	800275a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b01      	cmp	r3, #1
 800273c:	d10d      	bne.n	800275a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	f043 0210 	orr.w	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e007      	b.n	800276a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d0dc      	beq.n	8002722 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002788:	2b00      	cmp	r3, #0
 800278a:	d127      	bne.n	80027dc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027a6:	d115      	bne.n	80027d4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7ff fe1d 	bl	8002414 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80027da:	e004      	b.n	80027e6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff fe12 	bl	8002426 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	f043 0204 	orr.w	r2, r3, #4
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7ff fe01 	bl	8002438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_ADCEx_Calibration_Start+0x1e>
 800285a:	2302      	movs	r3, #2
 800285c:	e097      	b.n	800298e <HAL_ADCEx_Calibration_Start+0x14e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ff42 	bl	80026f0 <ADC_ConversionStop_Disable>
 800286c:	4603      	mov	r3, r0
 800286e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fee3 	bl	800263c <ADC_Enable>
 8002876:	4603      	mov	r3, r0
 8002878:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	2b00      	cmp	r3, #0
 800287e:	f040 8081 	bne.w	8002984 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800288a:	f023 0302 	bic.w	r3, r3, #2
 800288e:	f043 0202 	orr.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002896:	4b40      	ldr	r3, [pc, #256]	; (8002998 <HAL_ADCEx_Calibration_Start+0x158>)
 8002898:	681c      	ldr	r4, [r3, #0]
 800289a:	2002      	movs	r0, #2
 800289c:	f002 f838 	bl	8004910 <HAL_RCCEx_GetPeriphCLKFreq>
 80028a0:	4603      	mov	r3, r0
 80028a2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80028a6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80028a8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80028aa:	e002      	b.n	80028b2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f9      	bne.n	80028ac <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0208 	orr.w	r2, r2, #8
 80028c6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80028c8:	f7ff fbc0 	bl	800204c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028ce:	e01b      	b.n	8002908 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028d0:	f7ff fbbc 	bl	800204c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b0a      	cmp	r3, #10
 80028dc:	d914      	bls.n	8002908 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	f023 0312 	bic.w	r3, r3, #18
 80028f4:	f043 0210 	orr.w	r2, r3, #16
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e042      	b.n	800298e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1dc      	bne.n	80028d0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0204 	orr.w	r2, r2, #4
 8002924:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002926:	f7ff fb91 	bl	800204c <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800292c:	e01b      	b.n	8002966 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800292e:	f7ff fb8d 	bl	800204c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b0a      	cmp	r3, #10
 800293a:	d914      	bls.n	8002966 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	f023 0312 	bic.w	r3, r3, #18
 8002952:	f043 0210 	orr.w	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e013      	b.n	800298e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1dc      	bne.n	800292e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002978:	f023 0303 	bic.w	r3, r3, #3
 800297c:	f043 0201 	orr.w	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800298c:	7dfb      	ldrb	r3, [r7, #23]
}
 800298e:	4618      	mov	r0, r3
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}
 8002996:	bf00      	nop
 8002998:	2000007c 	.word	0x2000007c

0800299c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0ed      	b.n	8002b8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe f87a 	bl	8000ab4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029d0:	f7ff fb3c 	bl	800204c <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029d6:	e012      	b.n	80029fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029d8:	f7ff fb38 	bl	800204c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b0a      	cmp	r3, #10
 80029e4:	d90b      	bls.n	80029fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2205      	movs	r2, #5
 80029f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0c5      	b.n	8002b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0e5      	beq.n	80029d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0202 	bic.w	r2, r2, #2
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a1c:	f7ff fb16 	bl	800204c <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a22:	e012      	b.n	8002a4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a24:	f7ff fb12 	bl	800204c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b0a      	cmp	r3, #10
 8002a30:	d90b      	bls.n	8002a4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2205      	movs	r2, #5
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e09f      	b.n	8002b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e5      	bne.n	8002a24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7e1b      	ldrb	r3, [r3, #24]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d108      	bne.n	8002a72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e007      	b.n	8002a82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7e5b      	ldrb	r3, [r3, #25]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d108      	bne.n	8002a9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e007      	b.n	8002aac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7e9b      	ldrb	r3, [r3, #26]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d108      	bne.n	8002ac6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0220 	orr.w	r2, r2, #32
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	e007      	b.n	8002ad6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0220 	bic.w	r2, r2, #32
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7edb      	ldrb	r3, [r3, #27]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0210 	bic.w	r2, r2, #16
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e007      	b.n	8002b00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0210 	orr.w	r2, r2, #16
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7f1b      	ldrb	r3, [r3, #28]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d108      	bne.n	8002b1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e007      	b.n	8002b2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0208 	bic.w	r2, r2, #8
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7f5b      	ldrb	r3, [r3, #29]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d108      	bne.n	8002b44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0204 	orr.w	r2, r2, #4
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e007      	b.n	8002b54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0204 	bic.w	r2, r2, #4
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	ea42 0103 	orr.w	r1, r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	1e5a      	subs	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b087      	sub	sp, #28
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d003      	beq.n	8002bb8 <HAL_CAN_ConfigFilter+0x26>
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	f040 80aa 	bne.w	8002d0c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d123      	bne.n	8002c3a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3248      	adds	r2, #72	; 0x48
 8002c1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c30:	6979      	ldr	r1, [r7, #20]
 8002c32:	3348      	adds	r3, #72	; 0x48
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d122      	bne.n	8002c88 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3248      	adds	r2, #72	; 0x48
 8002c68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c7e:	6979      	ldr	r1, [r7, #20]
 8002c80:	3348      	adds	r3, #72	; 0x48
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	440b      	add	r3, r1
 8002c86:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ca2:	e007      	b.n	8002cb4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002cce:	e007      	b.n	8002ce0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cfe:	f023 0201 	bic.w	r2, r3, #1
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e006      	b.n	8002d1a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d12e      	bne.n	8002d96 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d50:	f7ff f97c 	bl	800204c <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d56:	e012      	b.n	8002d7e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d58:	f7ff f978 	bl	800204c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b0a      	cmp	r3, #10
 8002d64:	d90b      	bls.n	8002d7e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2205      	movs	r2, #5
 8002d76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e012      	b.n	8002da4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e5      	bne.n	8002d58 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e006      	b.n	8002da4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
  }
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d003      	beq.n	8002dd8 <HAL_CAN_AddTxMessage+0x2c>
 8002dd0:	7ffb      	ldrb	r3, [r7, #31]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	f040 80ad 	bne.w	8002f32 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8095 	beq.w	8002f22 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	0e1b      	lsrs	r3, r3, #24
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e02:	2201      	movs	r2, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10d      	bne.n	8002e30 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e1e:	68f9      	ldr	r1, [r7, #12]
 8002e20:	6809      	ldr	r1, [r1, #0]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3318      	adds	r3, #24
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	440b      	add	r3, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e00f      	b.n	8002e50 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e3a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e44:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3318      	adds	r3, #24
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	440b      	add	r3, r1
 8002e4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	3318      	adds	r3, #24
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	440b      	add	r3, r1
 8002e60:	3304      	adds	r3, #4
 8002e62:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	7d1b      	ldrb	r3, [r3, #20]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d111      	bne.n	8002e90 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3318      	adds	r3, #24
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	4413      	add	r3, r2
 8002e78:	3304      	adds	r3, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	6811      	ldr	r1, [r2, #0]
 8002e80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3318      	adds	r3, #24
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3307      	adds	r3, #7
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	061a      	lsls	r2, r3, #24
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3306      	adds	r3, #6
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	041b      	lsls	r3, r3, #16
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3305      	adds	r3, #5
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	3204      	adds	r2, #4
 8002eb0:	7812      	ldrb	r2, [r2, #0]
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	6811      	ldr	r1, [r2, #0]
 8002eb8:	ea43 0200 	orr.w	r2, r3, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	440b      	add	r3, r1
 8002ec2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002ec6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3303      	adds	r3, #3
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	061a      	lsls	r2, r3, #24
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	041b      	lsls	r3, r3, #16
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3301      	adds	r3, #1
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	7812      	ldrb	r2, [r2, #0]
 8002ee8:	4610      	mov	r0, r2
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	6811      	ldr	r1, [r2, #0]
 8002eee:	ea43 0200 	orr.w	r2, r3, r0
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002efc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3318      	adds	r3, #24
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	4413      	add	r3, r2
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	6811      	ldr	r1, [r2, #0]
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3318      	adds	r3, #24
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	440b      	add	r3, r1
 8002f1c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e00e      	b.n	8002f40 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e006      	b.n	8002f40 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3724      	adds	r7, #36	; 0x24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b087      	sub	sp, #28
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f5e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d003      	beq.n	8002f6e <HAL_CAN_GetRxMessage+0x24>
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	f040 8103 	bne.w	8003174 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10e      	bne.n	8002f92 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d116      	bne.n	8002fb0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0f7      	b.n	8003182 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0e8      	b.n	8003182 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	331b      	adds	r3, #27
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	4413      	add	r3, r2
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0204 	and.w	r2, r3, #4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	331b      	adds	r3, #27
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4413      	add	r3, r2
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0d5b      	lsrs	r3, r3, #21
 8002fde:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	331b      	adds	r3, #27
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	4413      	add	r3, r2
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	08db      	lsrs	r3, r3, #3
 8002ff8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	331b      	adds	r3, #27
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	4413      	add	r3, r2
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0202 	and.w	r2, r3, #2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	331b      	adds	r3, #27
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	4413      	add	r3, r2
 8003022:	3304      	adds	r3, #4
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2208      	movs	r2, #8
 8003032:	611a      	str	r2, [r3, #16]
 8003034:	e00b      	b.n	800304e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	331b      	adds	r3, #27
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	4413      	add	r3, r2
 8003042:	3304      	adds	r3, #4
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 020f 	and.w	r2, r3, #15
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	331b      	adds	r3, #27
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	4413      	add	r3, r2
 800305a:	3304      	adds	r3, #4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	b2da      	uxtb	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	331b      	adds	r3, #27
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	4413      	add	r3, r2
 8003072:	3304      	adds	r3, #4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0c1b      	lsrs	r3, r3, #16
 8003078:	b29a      	uxth	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	4413      	add	r3, r2
 8003088:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	4413      	add	r3, r2
 800309e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0a1a      	lsrs	r2, r3, #8
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0c1a      	lsrs	r2, r3, #16
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	3302      	adds	r3, #2
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e1a      	lsrs	r2, r3, #24
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	3303      	adds	r3, #3
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	3304      	adds	r3, #4
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	4413      	add	r3, r2
 8003104:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	0a1a      	lsrs	r2, r3, #8
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	3305      	adds	r3, #5
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	4413      	add	r3, r2
 800311e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	0c1a      	lsrs	r2, r3, #16
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	3306      	adds	r3, #6
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	4413      	add	r3, r2
 8003138:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	0e1a      	lsrs	r2, r3, #24
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	3307      	adds	r3, #7
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d108      	bne.n	8003160 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0220 	orr.w	r2, r2, #32
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	e007      	b.n	8003170 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e006      	b.n	8003182 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
  }
}
 8003182:	4618      	mov	r0, r3
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800319c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d002      	beq.n	80031aa <HAL_CAN_ActivateNotification+0x1e>
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d109      	bne.n	80031be <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6959      	ldr	r1, [r3, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e006      	b.n	80031cc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b08a      	sub	sp, #40	; 0x28
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d07c      	beq.n	8003316 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d023      	beq.n	800326e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2201      	movs	r2, #1
 800322c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f983 	bl	8003544 <HAL_CAN_TxMailbox0CompleteCallback>
 800323e:	e016      	b.n	800326e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
 8003252:	e00c      	b.n	800326e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
 8003266:	e002      	b.n	800326e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f986 	bl	800357a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003274:	2b00      	cmp	r3, #0
 8003276:	d024      	beq.n	80032c2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003280:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f962 	bl	8003556 <HAL_CAN_TxMailbox1CompleteCallback>
 8003292:	e016      	b.n	80032c2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	e00c      	b.n	80032c2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ba:	e002      	b.n	80032c2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f965 	bl	800358c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d024      	beq.n	8003316 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f941 	bl	8003568 <HAL_CAN_TxMailbox2CompleteCallback>
 80032e6:	e016      	b.n	8003316 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d004      	beq.n	80032fc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	e00c      	b.n	8003316 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
 800330e:	e002      	b.n	8003316 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f944 	bl	800359e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00c      	beq.n	800333a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003330:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2210      	movs	r2, #16
 8003338:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00b      	beq.n	800335c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2208      	movs	r2, #8
 8003354:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f92a 	bl	80035b0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fd fc33 	bl	8000be0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00c      	beq.n	800339e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003394:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2210      	movs	r2, #16
 800339c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00b      	beq.n	80033c0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2208      	movs	r2, #8
 80033b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f90a 	bl	80035d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f8f2 	bl	80035c2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2210      	movs	r2, #16
 80033f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8f3 	bl	80035e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2208      	movs	r2, #8
 800341a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f8eb 	bl	80035f8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d07b      	beq.n	8003524 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	d072      	beq.n	800351c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003490:	2b00      	cmp	r3, #0
 8003492:	d043      	beq.n	800351c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800349a:	2b00      	cmp	r3, #0
 800349c:	d03e      	beq.n	800351c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034a4:	2b60      	cmp	r3, #96	; 0x60
 80034a6:	d02b      	beq.n	8003500 <HAL_CAN_IRQHandler+0x32a>
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d82e      	bhi.n	800350a <HAL_CAN_IRQHandler+0x334>
 80034ac:	2b50      	cmp	r3, #80	; 0x50
 80034ae:	d022      	beq.n	80034f6 <HAL_CAN_IRQHandler+0x320>
 80034b0:	2b50      	cmp	r3, #80	; 0x50
 80034b2:	d82a      	bhi.n	800350a <HAL_CAN_IRQHandler+0x334>
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d019      	beq.n	80034ec <HAL_CAN_IRQHandler+0x316>
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d826      	bhi.n	800350a <HAL_CAN_IRQHandler+0x334>
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d010      	beq.n	80034e2 <HAL_CAN_IRQHandler+0x30c>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d822      	bhi.n	800350a <HAL_CAN_IRQHandler+0x334>
 80034c4:	2b10      	cmp	r3, #16
 80034c6:	d002      	beq.n	80034ce <HAL_CAN_IRQHandler+0x2f8>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d005      	beq.n	80034d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80034cc:	e01d      	b.n	800350a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	f043 0308 	orr.w	r3, r3, #8
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034d6:	e019      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	f043 0310 	orr.w	r3, r3, #16
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034e0:	e014      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	f043 0320 	orr.w	r3, r3, #32
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034ea:	e00f      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034f4:	e00a      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80034fe:	e005      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003508:	e000      	b.n	800350c <HAL_CAN_IRQHandler+0x336>
            break;
 800350a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800351a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2204      	movs	r2, #4
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f867 	bl	800360a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800353c:	bf00      	nop
 800353e:	3728      	adds	r7, #40	; 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr

08003556 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <__NVIC_SetPriorityGrouping+0x44>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003638:	4013      	ands	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800364e:	4a04      	ldr	r2, [pc, #16]	; (8003660 <__NVIC_SetPriorityGrouping+0x44>)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	60d3      	str	r3, [r2, #12]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003668:	4b04      	ldr	r3, [pc, #16]	; (800367c <__NVIC_GetPriorityGrouping+0x18>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	0a1b      	lsrs	r3, r3, #8
 800366e:	f003 0307 	and.w	r3, r3, #7
}
 8003672:	4618      	mov	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	4603      	mov	r3, r0
 8003688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	2b00      	cmp	r3, #0
 8003690:	db0b      	blt.n	80036aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	f003 021f 	and.w	r2, r3, #31
 8003698:	4906      	ldr	r1, [pc, #24]	; (80036b4 <__NVIC_EnableIRQ+0x34>)
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2001      	movs	r0, #1
 80036a2:	fa00 f202 	lsl.w	r2, r0, r2
 80036a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	e000e100 	.word	0xe000e100

080036b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db0a      	blt.n	80036e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	490c      	ldr	r1, [pc, #48]	; (8003704 <__NVIC_SetPriority+0x4c>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	440b      	add	r3, r1
 80036dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e0:	e00a      	b.n	80036f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <__NVIC_SetPriority+0x50>)
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3b04      	subs	r3, #4
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	440b      	add	r3, r1
 80036f6:	761a      	strb	r2, [r3, #24]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	e000e100 	.word	0xe000e100
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f1c3 0307 	rsb	r3, r3, #7
 8003726:	2b04      	cmp	r3, #4
 8003728:	bf28      	it	cs
 800372a:	2304      	movcs	r3, #4
 800372c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3304      	adds	r3, #4
 8003732:	2b06      	cmp	r3, #6
 8003734:	d902      	bls.n	800373c <NVIC_EncodePriority+0x30>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3b03      	subs	r3, #3
 800373a:	e000      	b.n	800373e <NVIC_EncodePriority+0x32>
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	401a      	ands	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003754:	f04f 31ff 	mov.w	r1, #4294967295
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	43d9      	mvns	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003764:	4313      	orrs	r3, r2
         );
}
 8003766:	4618      	mov	r0, r3
 8003768:	3724      	adds	r7, #36	; 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3b01      	subs	r3, #1
 800377c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003780:	d301      	bcc.n	8003786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003782:	2301      	movs	r3, #1
 8003784:	e00f      	b.n	80037a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <SysTick_Config+0x40>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800378e:	210f      	movs	r1, #15
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	f7ff ff90 	bl	80036b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <SysTick_Config+0x40>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <SysTick_Config+0x40>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	e000e010 	.word	0xe000e010

080037b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff2d 	bl	800361c <__NVIC_SetPriorityGrouping>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4603      	mov	r3, r0
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037dc:	f7ff ff42 	bl	8003664 <__NVIC_GetPriorityGrouping>
 80037e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	6978      	ldr	r0, [r7, #20]
 80037e8:	f7ff ff90 	bl	800370c <NVIC_EncodePriority>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff5f 	bl	80036b8 <__NVIC_SetPriority>
}
 80037fa:	bf00      	nop
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800380c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff35 	bl	8003680 <__NVIC_EnableIRQ>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ffa2 	bl	8003770 <SysTick_Config>
 800382c:	4603      	mov	r3, r0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e043      	b.n	80038d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <HAL_DMA_Init+0xa8>)
 8003856:	4413      	add	r3, r2
 8003858:	4a22      	ldr	r2, [pc, #136]	; (80038e4 <HAL_DMA_Init+0xac>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	009a      	lsls	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1f      	ldr	r2, [pc, #124]	; (80038e8 <HAL_DMA_Init+0xb0>)
 800386a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003882:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003886:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800389c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	bffdfff8 	.word	0xbffdfff8
 80038e4:	cccccccd 	.word	0xcccccccd
 80038e8:	40020000 	.word	0x40020000

080038ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_DMA_Start_IT+0x20>
 8003908:	2302      	movs	r3, #2
 800390a:	e04b      	b.n	80039a4 <HAL_DMA_Start_IT+0xb8>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d13a      	bne.n	8003996 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f937 	bl	8003bb8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 020e 	orr.w	r2, r2, #14
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e00f      	b.n	8003984 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 020a 	orr.w	r2, r2, #10
 8003982:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	e005      	b.n	80039a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800399e:	2302      	movs	r3, #2
 80039a0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2204      	movs	r2, #4
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d04f      	beq.n	8003a74 <HAL_DMA_IRQHandler+0xc8>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d04a      	beq.n	8003a74 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d107      	bne.n	80039fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a66      	ldr	r2, [pc, #408]	; (8003b9c <HAL_DMA_IRQHandler+0x1f0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d029      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xae>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a65      	ldr	r2, [pc, #404]	; (8003ba0 <HAL_DMA_IRQHandler+0x1f4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d022      	beq.n	8003a56 <HAL_DMA_IRQHandler+0xaa>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a63      	ldr	r2, [pc, #396]	; (8003ba4 <HAL_DMA_IRQHandler+0x1f8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01a      	beq.n	8003a50 <HAL_DMA_IRQHandler+0xa4>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a62      	ldr	r2, [pc, #392]	; (8003ba8 <HAL_DMA_IRQHandler+0x1fc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d012      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x9e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a60      	ldr	r2, [pc, #384]	; (8003bac <HAL_DMA_IRQHandler+0x200>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00a      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x98>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a5f      	ldr	r2, [pc, #380]	; (8003bb0 <HAL_DMA_IRQHandler+0x204>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d102      	bne.n	8003a3e <HAL_DMA_IRQHandler+0x92>
 8003a38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a3c:	e00e      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003a42:	e00b      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a48:	e008      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a4e:	e005      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a54:	e002      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a56:	2340      	movs	r3, #64	; 0x40
 8003a58:	e000      	b.n	8003a5c <HAL_DMA_IRQHandler+0xb0>
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	4a55      	ldr	r2, [pc, #340]	; (8003bb4 <HAL_DMA_IRQHandler+0x208>)
 8003a5e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8094 	beq.w	8003b92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a72:	e08e      	b.n	8003b92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	2202      	movs	r2, #2
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d056      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x186>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d051      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 020a 	bic.w	r2, r2, #10
 8003aaa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a38      	ldr	r2, [pc, #224]	; (8003b9c <HAL_DMA_IRQHandler+0x1f0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d029      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x166>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a37      	ldr	r2, [pc, #220]	; (8003ba0 <HAL_DMA_IRQHandler+0x1f4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <HAL_DMA_IRQHandler+0x162>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a35      	ldr	r2, [pc, #212]	; (8003ba4 <HAL_DMA_IRQHandler+0x1f8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01a      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x15c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a34      	ldr	r2, [pc, #208]	; (8003ba8 <HAL_DMA_IRQHandler+0x1fc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d012      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x156>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a32      	ldr	r2, [pc, #200]	; (8003bac <HAL_DMA_IRQHandler+0x200>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00a      	beq.n	8003afc <HAL_DMA_IRQHandler+0x150>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a31      	ldr	r2, [pc, #196]	; (8003bb0 <HAL_DMA_IRQHandler+0x204>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d102      	bne.n	8003af6 <HAL_DMA_IRQHandler+0x14a>
 8003af0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003af4:	e00e      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003afa:	e00b      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b00:	e008      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b06:	e005      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b0c:	e002      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003b0e:	2320      	movs	r3, #32
 8003b10:	e000      	b.n	8003b14 <HAL_DMA_IRQHandler+0x168>
 8003b12:	2302      	movs	r3, #2
 8003b14:	4a27      	ldr	r2, [pc, #156]	; (8003bb4 <HAL_DMA_IRQHandler+0x208>)
 8003b16:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d034      	beq.n	8003b92 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b30:	e02f      	b.n	8003b92 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2208      	movs	r2, #8
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d028      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x1e8>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d023      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 020e 	bic.w	r2, r2, #14
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d004      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	4798      	blx	r3
    }
  }
  return;
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
}
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40020008 	.word	0x40020008
 8003ba0:	4002001c 	.word	0x4002001c
 8003ba4:	40020030 	.word	0x40020030
 8003ba8:	40020044 	.word	0x40020044
 8003bac:	40020058 	.word	0x40020058
 8003bb0:	4002006c 	.word	0x4002006c
 8003bb4:	40020000 	.word	0x40020000

08003bb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	2101      	movs	r1, #1
 8003bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d108      	bne.n	8003bf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bf6:	e007      	b.n	8003c08 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b08b      	sub	sp, #44	; 0x2c
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c26:	e169      	b.n	8003efc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c28:	2201      	movs	r2, #1
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	f040 8158 	bne.w	8003ef6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4a9a      	ldr	r2, [pc, #616]	; (8003eb4 <HAL_GPIO_Init+0x2a0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d05e      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
 8003c50:	4a98      	ldr	r2, [pc, #608]	; (8003eb4 <HAL_GPIO_Init+0x2a0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d875      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c56:	4a98      	ldr	r2, [pc, #608]	; (8003eb8 <HAL_GPIO_Init+0x2a4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d058      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
 8003c5c:	4a96      	ldr	r2, [pc, #600]	; (8003eb8 <HAL_GPIO_Init+0x2a4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d86f      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c62:	4a96      	ldr	r2, [pc, #600]	; (8003ebc <HAL_GPIO_Init+0x2a8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d052      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
 8003c68:	4a94      	ldr	r2, [pc, #592]	; (8003ebc <HAL_GPIO_Init+0x2a8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d869      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c6e:	4a94      	ldr	r2, [pc, #592]	; (8003ec0 <HAL_GPIO_Init+0x2ac>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d04c      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
 8003c74:	4a92      	ldr	r2, [pc, #584]	; (8003ec0 <HAL_GPIO_Init+0x2ac>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d863      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c7a:	4a92      	ldr	r2, [pc, #584]	; (8003ec4 <HAL_GPIO_Init+0x2b0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d046      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
 8003c80:	4a90      	ldr	r2, [pc, #576]	; (8003ec4 <HAL_GPIO_Init+0x2b0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d85d      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c86:	2b12      	cmp	r3, #18
 8003c88:	d82a      	bhi.n	8003ce0 <HAL_GPIO_Init+0xcc>
 8003c8a:	2b12      	cmp	r3, #18
 8003c8c:	d859      	bhi.n	8003d42 <HAL_GPIO_Init+0x12e>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <HAL_GPIO_Init+0x80>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003d0f 	.word	0x08003d0f
 8003c98:	08003ce9 	.word	0x08003ce9
 8003c9c:	08003cfb 	.word	0x08003cfb
 8003ca0:	08003d3d 	.word	0x08003d3d
 8003ca4:	08003d43 	.word	0x08003d43
 8003ca8:	08003d43 	.word	0x08003d43
 8003cac:	08003d43 	.word	0x08003d43
 8003cb0:	08003d43 	.word	0x08003d43
 8003cb4:	08003d43 	.word	0x08003d43
 8003cb8:	08003d43 	.word	0x08003d43
 8003cbc:	08003d43 	.word	0x08003d43
 8003cc0:	08003d43 	.word	0x08003d43
 8003cc4:	08003d43 	.word	0x08003d43
 8003cc8:	08003d43 	.word	0x08003d43
 8003ccc:	08003d43 	.word	0x08003d43
 8003cd0:	08003d43 	.word	0x08003d43
 8003cd4:	08003d43 	.word	0x08003d43
 8003cd8:	08003cf1 	.word	0x08003cf1
 8003cdc:	08003d05 	.word	0x08003d05
 8003ce0:	4a79      	ldr	r2, [pc, #484]	; (8003ec8 <HAL_GPIO_Init+0x2b4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d013      	beq.n	8003d0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ce6:	e02c      	b.n	8003d42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	623b      	str	r3, [r7, #32]
          break;
 8003cee:	e029      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	623b      	str	r3, [r7, #32]
          break;
 8003cf8:	e024      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	623b      	str	r3, [r7, #32]
          break;
 8003d02:	e01f      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	623b      	str	r3, [r7, #32]
          break;
 8003d0c:	e01a      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d16:	2304      	movs	r3, #4
 8003d18:	623b      	str	r3, [r7, #32]
          break;
 8003d1a:	e013      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d24:	2308      	movs	r3, #8
 8003d26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69fa      	ldr	r2, [r7, #28]
 8003d2c:	611a      	str	r2, [r3, #16]
          break;
 8003d2e:	e009      	b.n	8003d44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d30:	2308      	movs	r3, #8
 8003d32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	615a      	str	r2, [r3, #20]
          break;
 8003d3a:	e003      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	623b      	str	r3, [r7, #32]
          break;
 8003d40:	e000      	b.n	8003d44 <HAL_GPIO_Init+0x130>
          break;
 8003d42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2bff      	cmp	r3, #255	; 0xff
 8003d48:	d801      	bhi.n	8003d4e <HAL_GPIO_Init+0x13a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	e001      	b.n	8003d52 <HAL_GPIO_Init+0x13e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2bff      	cmp	r3, #255	; 0xff
 8003d58:	d802      	bhi.n	8003d60 <HAL_GPIO_Init+0x14c>
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	e002      	b.n	8003d66 <HAL_GPIO_Init+0x152>
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	3b08      	subs	r3, #8
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	210f      	movs	r1, #15
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	fa01 f303 	lsl.w	r3, r1, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	401a      	ands	r2, r3
 8003d78:	6a39      	ldr	r1, [r7, #32]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	431a      	orrs	r2, r3
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80b1 	beq.w	8003ef6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d94:	4b4d      	ldr	r3, [pc, #308]	; (8003ecc <HAL_GPIO_Init+0x2b8>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4a4c      	ldr	r2, [pc, #304]	; (8003ecc <HAL_GPIO_Init+0x2b8>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6193      	str	r3, [r2, #24]
 8003da0:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <HAL_GPIO_Init+0x2b8>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003dac:	4a48      	ldr	r2, [pc, #288]	; (8003ed0 <HAL_GPIO_Init+0x2bc>)
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	3302      	adds	r3, #2
 8003db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a40      	ldr	r2, [pc, #256]	; (8003ed4 <HAL_GPIO_Init+0x2c0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_GPIO_Init+0x1ec>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a3f      	ldr	r2, [pc, #252]	; (8003ed8 <HAL_GPIO_Init+0x2c4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00d      	beq.n	8003dfc <HAL_GPIO_Init+0x1e8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a3e      	ldr	r2, [pc, #248]	; (8003edc <HAL_GPIO_Init+0x2c8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <HAL_GPIO_Init+0x1e4>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3d      	ldr	r2, [pc, #244]	; (8003ee0 <HAL_GPIO_Init+0x2cc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_GPIO_Init+0x1e0>
 8003df0:	2303      	movs	r3, #3
 8003df2:	e006      	b.n	8003e02 <HAL_GPIO_Init+0x1ee>
 8003df4:	2304      	movs	r3, #4
 8003df6:	e004      	b.n	8003e02 <HAL_GPIO_Init+0x1ee>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e002      	b.n	8003e02 <HAL_GPIO_Init+0x1ee>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <HAL_GPIO_Init+0x1ee>
 8003e00:	2300      	movs	r3, #0
 8003e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e04:	f002 0203 	and.w	r2, r2, #3
 8003e08:	0092      	lsls	r2, r2, #2
 8003e0a:	4093      	lsls	r3, r2
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e12:	492f      	ldr	r1, [pc, #188]	; (8003ed0 <HAL_GPIO_Init+0x2bc>)
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	089b      	lsrs	r3, r3, #2
 8003e18:	3302      	adds	r3, #2
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d006      	beq.n	8003e3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e2c:	4b2d      	ldr	r3, [pc, #180]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	492c      	ldr	r1, [pc, #176]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]
 8003e38:	e006      	b.n	8003e48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	4928      	ldr	r1, [pc, #160]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d006      	beq.n	8003e62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e54:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	4922      	ldr	r1, [pc, #136]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60cb      	str	r3, [r1, #12]
 8003e60:	e006      	b.n	8003e70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	491e      	ldr	r1, [pc, #120]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	4918      	ldr	r1, [pc, #96]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
 8003e88:	e006      	b.n	8003e98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	4914      	ldr	r1, [pc, #80]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d021      	beq.n	8003ee8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	490e      	ldr	r1, [pc, #56]	; (8003ee4 <HAL_GPIO_Init+0x2d0>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]
 8003eb0:	e021      	b.n	8003ef6 <HAL_GPIO_Init+0x2e2>
 8003eb2:	bf00      	nop
 8003eb4:	10320000 	.word	0x10320000
 8003eb8:	10310000 	.word	0x10310000
 8003ebc:	10220000 	.word	0x10220000
 8003ec0:	10210000 	.word	0x10210000
 8003ec4:	10120000 	.word	0x10120000
 8003ec8:	10110000 	.word	0x10110000
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40010800 	.word	0x40010800
 8003ed8:	40010c00 	.word	0x40010c00
 8003edc:	40011000 	.word	0x40011000
 8003ee0:	40011400 	.word	0x40011400
 8003ee4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <HAL_GPIO_Init+0x304>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	4909      	ldr	r1, [pc, #36]	; (8003f18 <HAL_GPIO_Init+0x304>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	3301      	adds	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	fa22 f303 	lsr.w	r3, r2, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f47f ae8e 	bne.w	8003c28 <HAL_GPIO_Init+0x14>
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	372c      	adds	r7, #44	; 0x2c
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	40010400 	.word	0x40010400

08003f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e001      	b.n	8003f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	460b      	mov	r3, r1
 8003f54:	807b      	strh	r3, [r7, #2]
 8003f56:	4613      	mov	r3, r2
 8003f58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f5a:	787b      	ldrb	r3, [r7, #1]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f60:	887a      	ldrh	r2, [r7, #2]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f66:	e003      	b.n	8003f70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f68:	887b      	ldrh	r3, [r7, #2]
 8003f6a:	041a      	lsls	r2, r3, #16
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	611a      	str	r2, [r3, #16]
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f86:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f88:	695a      	ldr	r2, [r3, #20]
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f92:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fd f854 	bl	8001048 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40010400 	.word	0x40010400

08003fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e272      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 8087 	beq.w	80040da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fcc:	4b92      	ldr	r3, [pc, #584]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d00c      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fd8:	4b8f      	ldr	r3, [pc, #572]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d112      	bne.n	800400a <HAL_RCC_OscConfig+0x5e>
 8003fe4:	4b8c      	ldr	r3, [pc, #560]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff0:	d10b      	bne.n	800400a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff2:	4b89      	ldr	r3, [pc, #548]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d06c      	beq.n	80040d8 <HAL_RCC_OscConfig+0x12c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d168      	bne.n	80040d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e24c      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004012:	d106      	bne.n	8004022 <HAL_RCC_OscConfig+0x76>
 8004014:	4b80      	ldr	r3, [pc, #512]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a7f      	ldr	r2, [pc, #508]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 800401a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	e02e      	b.n	8004080 <HAL_RCC_OscConfig+0xd4>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10c      	bne.n	8004044 <HAL_RCC_OscConfig+0x98>
 800402a:	4b7b      	ldr	r3, [pc, #492]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a7a      	ldr	r2, [pc, #488]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b78      	ldr	r3, [pc, #480]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a77      	ldr	r2, [pc, #476]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 800403c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e01d      	b.n	8004080 <HAL_RCC_OscConfig+0xd4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0xbc>
 800404e:	4b72      	ldr	r3, [pc, #456]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a71      	ldr	r2, [pc, #452]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4b6f      	ldr	r3, [pc, #444]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a6e      	ldr	r2, [pc, #440]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e00b      	b.n	8004080 <HAL_RCC_OscConfig+0xd4>
 8004068:	4b6b      	ldr	r3, [pc, #428]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a6a      	ldr	r2, [pc, #424]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 800406e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4b68      	ldr	r3, [pc, #416]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a67      	ldr	r2, [pc, #412]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 800407a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fd ffe0 	bl	800204c <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004090:	f7fd ffdc 	bl	800204c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e200      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	4b5d      	ldr	r3, [pc, #372]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0xe4>
 80040ae:	e014      	b.n	80040da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fd ffcc 	bl	800204c <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fd ffc8 	bl	800204c <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e1ec      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	4b53      	ldr	r3, [pc, #332]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x10c>
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d063      	beq.n	80041ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e6:	4b4c      	ldr	r3, [pc, #304]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040f2:	4b49      	ldr	r3, [pc, #292]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d11c      	bne.n	8004138 <HAL_RCC_OscConfig+0x18c>
 80040fe:	4b46      	ldr	r3, [pc, #280]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d116      	bne.n	8004138 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410a:	4b43      	ldr	r3, [pc, #268]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_RCC_OscConfig+0x176>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d001      	beq.n	8004122 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e1c0      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4939      	ldr	r1, [pc, #228]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004136:	e03a      	b.n	80041ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d020      	beq.n	8004182 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004140:	4b36      	ldr	r3, [pc, #216]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7fd ff81 	bl	800204c <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414e:	f7fd ff7d 	bl	800204c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1a1      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004160:	4b2d      	ldr	r3, [pc, #180]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416c:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4927      	ldr	r1, [pc, #156]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	600b      	str	r3, [r1, #0]
 8004180:	e015      	b.n	80041ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004182:	4b26      	ldr	r3, [pc, #152]	; (800421c <HAL_RCC_OscConfig+0x270>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fd ff60 	bl	800204c <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004190:	f7fd ff5c 	bl	800204c <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e180      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d03a      	beq.n	8004230 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d019      	beq.n	80041f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c2:	4b17      	ldr	r3, [pc, #92]	; (8004220 <HAL_RCC_OscConfig+0x274>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c8:	f7fd ff40 	bl	800204c <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fd ff3c 	bl	800204c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e160      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e2:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041ee:	2001      	movs	r0, #1
 80041f0:	f000 faba 	bl	8004768 <RCC_Delay>
 80041f4:	e01c      	b.n	8004230 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <HAL_RCC_OscConfig+0x274>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fc:	f7fd ff26 	bl	800204c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004202:	e00f      	b.n	8004224 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004204:	f7fd ff22 	bl	800204c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d908      	bls.n	8004224 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e146      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	42420000 	.word	0x42420000
 8004220:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004224:	4b92      	ldr	r3, [pc, #584]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e9      	bne.n	8004204 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80a6 	beq.w	800438a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423e:	2300      	movs	r3, #0
 8004240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004242:	4b8b      	ldr	r3, [pc, #556]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10d      	bne.n	800426a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424e:	4b88      	ldr	r3, [pc, #544]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4a87      	ldr	r2, [pc, #540]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004258:	61d3      	str	r3, [r2, #28]
 800425a:	4b85      	ldr	r3, [pc, #532]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004266:	2301      	movs	r3, #1
 8004268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426a:	4b82      	ldr	r3, [pc, #520]	; (8004474 <HAL_RCC_OscConfig+0x4c8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d118      	bne.n	80042a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004276:	4b7f      	ldr	r3, [pc, #508]	; (8004474 <HAL_RCC_OscConfig+0x4c8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a7e      	ldr	r2, [pc, #504]	; (8004474 <HAL_RCC_OscConfig+0x4c8>)
 800427c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004282:	f7fd fee3 	bl	800204c <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428a:	f7fd fedf 	bl	800204c <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b64      	cmp	r3, #100	; 0x64
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e103      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429c:	4b75      	ldr	r3, [pc, #468]	; (8004474 <HAL_RCC_OscConfig+0x4c8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0f0      	beq.n	800428a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d106      	bne.n	80042be <HAL_RCC_OscConfig+0x312>
 80042b0:	4b6f      	ldr	r3, [pc, #444]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	4a6e      	ldr	r2, [pc, #440]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	6213      	str	r3, [r2, #32]
 80042bc:	e02d      	b.n	800431a <HAL_RCC_OscConfig+0x36e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x334>
 80042c6:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	4a69      	ldr	r2, [pc, #420]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	6213      	str	r3, [r2, #32]
 80042d2:	4b67      	ldr	r3, [pc, #412]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	4a66      	ldr	r2, [pc, #408]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	6213      	str	r3, [r2, #32]
 80042de:	e01c      	b.n	800431a <HAL_RCC_OscConfig+0x36e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d10c      	bne.n	8004302 <HAL_RCC_OscConfig+0x356>
 80042e8:	4b61      	ldr	r3, [pc, #388]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	4a60      	ldr	r2, [pc, #384]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80042ee:	f043 0304 	orr.w	r3, r3, #4
 80042f2:	6213      	str	r3, [r2, #32]
 80042f4:	4b5e      	ldr	r3, [pc, #376]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4a5d      	ldr	r2, [pc, #372]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6213      	str	r3, [r2, #32]
 8004300:	e00b      	b.n	800431a <HAL_RCC_OscConfig+0x36e>
 8004302:	4b5b      	ldr	r3, [pc, #364]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	4a5a      	ldr	r2, [pc, #360]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004308:	f023 0301 	bic.w	r3, r3, #1
 800430c:	6213      	str	r3, [r2, #32]
 800430e:	4b58      	ldr	r3, [pc, #352]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	4a57      	ldr	r2, [pc, #348]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	f023 0304 	bic.w	r3, r3, #4
 8004318:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d015      	beq.n	800434e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004322:	f7fd fe93 	bl	800204c <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004328:	e00a      	b.n	8004340 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fd fe8f 	bl	800204c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	; 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e0b1      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004340:	4b4b      	ldr	r3, [pc, #300]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ee      	beq.n	800432a <HAL_RCC_OscConfig+0x37e>
 800434c:	e014      	b.n	8004378 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434e:	f7fd fe7d 	bl	800204c <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fd fe79 	bl	800204c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e09b      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800436c:	4b40      	ldr	r3, [pc, #256]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ee      	bne.n	8004356 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d105      	bne.n	800438a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437e:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	4a3b      	ldr	r2, [pc, #236]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004388:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8087 	beq.w	80044a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004394:	4b36      	ldr	r3, [pc, #216]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b08      	cmp	r3, #8
 800439e:	d061      	beq.n	8004464 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d146      	bne.n	8004436 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a8:	4b33      	ldr	r3, [pc, #204]	; (8004478 <HAL_RCC_OscConfig+0x4cc>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fd fe4d 	bl	800204c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b6:	f7fd fe49 	bl	800204c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e06d      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c8:	4b29      	ldr	r3, [pc, #164]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f0      	bne.n	80043b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d108      	bne.n	80043f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043de:	4b24      	ldr	r3, [pc, #144]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	4921      	ldr	r1, [pc, #132]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043f0:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a19      	ldr	r1, [r3, #32]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	430b      	orrs	r3, r1
 8004402:	491b      	ldr	r1, [pc, #108]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <HAL_RCC_OscConfig+0x4cc>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440e:	f7fd fe1d 	bl	800204c <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004416:	f7fd fe19 	bl	800204c <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e03d      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x46a>
 8004434:	e035      	b.n	80044a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <HAL_RCC_OscConfig+0x4cc>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fd fe06 	bl	800204c <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fd fe02 	bl	800204c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e026      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCC_OscConfig+0x4c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x498>
 8004462:	e01e      	b.n	80044a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d107      	bne.n	800447c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e019      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
 8004470:	40021000 	.word	0x40021000
 8004474:	40007000 	.word	0x40007000
 8004478:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCC_OscConfig+0x500>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	429a      	cmp	r2, r3
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000

080044b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0d0      	b.n	8004666 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b6a      	ldr	r3, [pc, #424]	; (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d910      	bls.n	80044f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b67      	ldr	r3, [pc, #412]	; (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 0207 	bic.w	r2, r3, #7
 80044da:	4965      	ldr	r1, [pc, #404]	; (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b63      	ldr	r3, [pc, #396]	; (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0b8      	b.n	8004666 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d020      	beq.n	8004542 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800450c:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4a58      	ldr	r2, [pc, #352]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004516:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004524:	4b53      	ldr	r3, [pc, #332]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4a52      	ldr	r2, [pc, #328]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 800452a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800452e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004530:	4b50      	ldr	r3, [pc, #320]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	494d      	ldr	r1, [pc, #308]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d040      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d107      	bne.n	8004566 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004556:	4b47      	ldr	r3, [pc, #284]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d115      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e07f      	b.n	8004666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b02      	cmp	r3, #2
 800456c:	d107      	bne.n	800457e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456e:	4b41      	ldr	r3, [pc, #260]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e073      	b.n	8004666 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457e:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e06b      	b.n	8004666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458e:	4b39      	ldr	r3, [pc, #228]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f023 0203 	bic.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4936      	ldr	r1, [pc, #216]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 800459c:	4313      	orrs	r3, r2
 800459e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a0:	f7fd fd54 	bl	800204c <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	e00a      	b.n	80045be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a8:	f7fd fd50 	bl	800204c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e053      	b.n	8004666 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 020c 	and.w	r2, r3, #12
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d1eb      	bne.n	80045a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d210      	bcs.n	8004600 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b24      	ldr	r3, [pc, #144]	; (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f023 0207 	bic.w	r2, r3, #7
 80045e6:	4922      	ldr	r1, [pc, #136]	; (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ee:	4b20      	ldr	r3, [pc, #128]	; (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e032      	b.n	8004666 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800460c:	4b19      	ldr	r3, [pc, #100]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4916      	ldr	r1, [pc, #88]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	490e      	ldr	r1, [pc, #56]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	4313      	orrs	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800463e:	f000 f821 	bl	8004684 <HAL_RCC_GetSysClockFreq>
 8004642:	4602      	mov	r2, r0
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	490a      	ldr	r1, [pc, #40]	; (8004678 <HAL_RCC_ClockConfig+0x1c8>)
 8004650:	5ccb      	ldrb	r3, [r1, r3]
 8004652:	fa22 f303 	lsr.w	r3, r2, r3
 8004656:	4a09      	ldr	r2, [pc, #36]	; (800467c <HAL_RCC_ClockConfig+0x1cc>)
 8004658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCC_ClockConfig+0x1d0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fd fcb2 	bl	8001fc8 <HAL_InitTick>

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40022000 	.word	0x40022000
 8004674:	40021000 	.word	0x40021000
 8004678:	08007560 	.word	0x08007560
 800467c:	2000007c 	.word	0x2000007c
 8004680:	20000080 	.word	0x20000080

08004684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800469e:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <HAL_RCC_GetSysClockFreq+0x94>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d002      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x30>
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d003      	beq.n	80046ba <HAL_RCC_GetSysClockFreq+0x36>
 80046b2:	e027      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046b4:	4b19      	ldr	r3, [pc, #100]	; (800471c <HAL_RCC_GetSysClockFreq+0x98>)
 80046b6:	613b      	str	r3, [r7, #16]
      break;
 80046b8:	e027      	b.n	800470a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	0c9b      	lsrs	r3, r3, #18
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	4a17      	ldr	r2, [pc, #92]	; (8004720 <HAL_RCC_GetSysClockFreq+0x9c>)
 80046c4:	5cd3      	ldrb	r3, [r2, r3]
 80046c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d010      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_RCC_GetSysClockFreq+0x94>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	0c5b      	lsrs	r3, r3, #17
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	4a11      	ldr	r2, [pc, #68]	; (8004724 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046de:	5cd3      	ldrb	r3, [r2, r3]
 80046e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <HAL_RCC_GetSysClockFreq+0x98>)
 80046e6:	fb03 f202 	mul.w	r2, r3, r2
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	e004      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <HAL_RCC_GetSysClockFreq+0xa4>)
 80046f8:	fb02 f303 	mul.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	613b      	str	r3, [r7, #16]
      break;
 8004702:	e002      	b.n	800470a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_RCC_GetSysClockFreq+0x98>)
 8004706:	613b      	str	r3, [r7, #16]
      break;
 8004708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470a:	693b      	ldr	r3, [r7, #16]
}
 800470c:	4618      	mov	r0, r3
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	007a1200 	.word	0x007a1200
 8004720:	08007578 	.word	0x08007578
 8004724:	08007588 	.word	0x08007588
 8004728:	003d0900 	.word	0x003d0900

0800472c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004730:	4b02      	ldr	r3, [pc, #8]	; (800473c <HAL_RCC_GetHCLKFreq+0x10>)
 8004732:	681b      	ldr	r3, [r3, #0]
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	2000007c 	.word	0x2000007c

08004740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004744:	f7ff fff2 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	0adb      	lsrs	r3, r3, #11
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	; (8004764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000
 8004764:	08007570 	.word	0x08007570

08004768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004770:	4b0a      	ldr	r3, [pc, #40]	; (800479c <RCC_Delay+0x34>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <RCC_Delay+0x38>)
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	0a5b      	lsrs	r3, r3, #9
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004784:	bf00      	nop
  }
  while (Delay --);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1e5a      	subs	r2, r3, #1
 800478a:	60fa      	str	r2, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1f9      	bne.n	8004784 <RCC_Delay+0x1c>
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr
 800479c:	2000007c 	.word	0x2000007c
 80047a0:	10624dd3 	.word	0x10624dd3

080047a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d07d      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047c0:	2300      	movs	r3, #0
 80047c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c4:	4b4f      	ldr	r3, [pc, #316]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10d      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d0:	4b4c      	ldr	r3, [pc, #304]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	4a4b      	ldr	r2, [pc, #300]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047da:	61d3      	str	r3, [r2, #28]
 80047dc:	4b49      	ldr	r3, [pc, #292]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	4b46      	ldr	r3, [pc, #280]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d118      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f8:	4b43      	ldr	r3, [pc, #268]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a42      	ldr	r2, [pc, #264]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004804:	f7fd fc22 	bl	800204c <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480a:	e008      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480c:	f7fd fc1e 	bl	800204c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e06d      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481e:	4b3a      	ldr	r3, [pc, #232]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800482a:	4b36      	ldr	r3, [pc, #216]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004832:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d02e      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	429a      	cmp	r2, r3
 8004846:	d027      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004848:	4b2e      	ldr	r3, [pc, #184]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004850:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004852:	4b2e      	ldr	r3, [pc, #184]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004854:	2201      	movs	r2, #1
 8004856:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004858:	4b2c      	ldr	r3, [pc, #176]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800485e:	4a29      	ldr	r2, [pc, #164]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d014      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fd fbed 	bl	800204c <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004874:	e00a      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fd fbe9 	bl	800204c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f241 3288 	movw	r2, #5000	; 0x1388
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e036      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ee      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004898:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4917      	ldr	r1, [pc, #92]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b0:	4b14      	ldr	r3, [pc, #80]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4a13      	ldr	r2, [pc, #76]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048c8:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	490b      	ldr	r1, [pc, #44]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	4904      	ldr	r1, [pc, #16]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000
 8004908:	40007000 	.word	0x40007000
 800490c:	42420440 	.word	0x42420440

08004910 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	2300      	movs	r3, #0
 8004922:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	2300      	movs	r3, #0
 800492a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b10      	cmp	r3, #16
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b10      	cmp	r3, #16
 8004936:	f200 808a 	bhi.w	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d045      	beq.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d075      	beq.n	8004a32 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004946:	e082      	b.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004948:	4b46      	ldr	r3, [pc, #280]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800494e:	4b45      	ldr	r3, [pc, #276]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d07b      	beq.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	0c9b      	lsrs	r3, r3, #18
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	4a41      	ldr	r2, [pc, #260]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004964:	5cd3      	ldrb	r3, [r2, r3]
 8004966:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d015      	beq.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004972:	4b3c      	ldr	r3, [pc, #240]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	0c5b      	lsrs	r3, r3, #17
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	4a3b      	ldr	r2, [pc, #236]	; (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800497e:	5cd3      	ldrb	r3, [r2, r3]
 8004980:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800498c:	4a38      	ldr	r2, [pc, #224]	; (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	fbb2 f2f3 	udiv	r2, r2, r3
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	e004      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80049a8:	4b2e      	ldr	r3, [pc, #184]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b4:	d102      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	61bb      	str	r3, [r7, #24]
      break;
 80049ba:	e04a      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4a2d      	ldr	r2, [pc, #180]	; (8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	61bb      	str	r3, [r7, #24]
      break;
 80049ca:	e042      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049dc:	d108      	bne.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80049e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	e01f      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049fa:	d109      	bne.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80049fc:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004a08:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	e00f      	b.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1a:	d11c      	bne.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d016      	beq.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004a28:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004a2c:	61bb      	str	r3, [r7, #24]
      break;
 8004a2e:	e012      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004a30:	e011      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a32:	f7ff fe85 	bl	8004740 <HAL_RCC_GetPCLK2Freq>
 8004a36:	4602      	mov	r2, r0
 8004a38:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	0b9b      	lsrs	r3, r3, #14
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	3301      	adds	r3, #1
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	61bb      	str	r3, [r7, #24]
      break;
 8004a4c:	e004      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e002      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a52:	bf00      	nop
 8004a54:	e000      	b.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a56:	bf00      	nop
    }
  }
  return (frequency);
 8004a58:	69bb      	ldr	r3, [r7, #24]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000
 8004a68:	0800758c 	.word	0x0800758c
 8004a6c:	0800759c 	.word	0x0800759c
 8004a70:	007a1200 	.word	0x007a1200
 8004a74:	003d0900 	.word	0x003d0900
 8004a78:	aaaaaaab 	.word	0xaaaaaaab

08004a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e076      	b.n	8004b7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d108      	bne.n	8004aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9e:	d009      	beq.n	8004ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	61da      	str	r2, [r3, #28]
 8004aa6:	e005      	b.n	8004ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fc fdec 	bl	80016ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b38:	ea42 0103 	orr.w	r1, r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	0c1a      	lsrs	r2, r3, #16
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f002 0204 	and.w	r2, r2, #4
 8004b5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69da      	ldr	r2, [r3, #28]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08c      	sub	sp, #48	; 0x30
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b92:	2301      	movs	r3, #1
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x26>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e198      	b.n	8004edc <HAL_SPI_TransmitReceive+0x358>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bb2:	f7fd fa4b 	bl	800204c <HAL_GetTick>
 8004bb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004bc8:	887b      	ldrh	r3, [r7, #2]
 8004bca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d00f      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x70>
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bda:	d107      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x68>
 8004be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d003      	beq.n	8004bf4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
 8004bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bf2:	e16d      	b.n	8004ed0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_SPI_TransmitReceive+0x82>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_SPI_TransmitReceive+0x82>
 8004c00:	887b      	ldrh	r3, [r7, #2]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d103      	bne.n	8004c0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c0c:	e160      	b.n	8004ed0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d003      	beq.n	8004c22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2205      	movs	r2, #5
 8004c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	887a      	ldrh	r2, [r7, #2]
 8004c32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	887a      	ldrh	r2, [r7, #2]
 8004c38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	887a      	ldrh	r2, [r7, #2]
 8004c44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	887a      	ldrh	r2, [r7, #2]
 8004c4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c62:	2b40      	cmp	r3, #64	; 0x40
 8004c64:	d007      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7e:	d17c      	bne.n	8004d7a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_SPI_TransmitReceive+0x10a>
 8004c88:	8b7b      	ldrh	r3, [r7, #26]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d16a      	bne.n	8004d64 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	881a      	ldrh	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	1c9a      	adds	r2, r3, #2
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cb2:	e057      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d11b      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x176>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d016      	beq.n	8004cfa <HAL_SPI_TransmitReceive+0x176>
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d113      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	881a      	ldrh	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	1c9a      	adds	r2, r3, #2
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d119      	bne.n	8004d3c <HAL_SPI_TransmitReceive+0x1b8>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d014      	beq.n	8004d3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	b292      	uxth	r2, r2
 8004d1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	1c9a      	adds	r2, r3, #2
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d3c:	f7fd f986 	bl	800204c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d80b      	bhi.n	8004d64 <HAL_SPI_TransmitReceive+0x1e0>
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d52:	d007      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d62:	e0b5      	b.n	8004ed0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1a2      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x130>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d19d      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x130>
 8004d78:	e080      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_TransmitReceive+0x204>
 8004d82:	8b7b      	ldrh	r3, [r7, #26]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d16f      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	330c      	adds	r3, #12
 8004d92:	7812      	ldrb	r2, [r2, #0]
 8004d94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dae:	e05b      	b.n	8004e68 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d11c      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x274>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d017      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x274>
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d114      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d119      	bne.n	8004e3a <HAL_SPI_TransmitReceive+0x2b6>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d014      	beq.n	8004e3a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e36:	2301      	movs	r3, #1
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e3a:	f7fd f907 	bl	800204c <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d803      	bhi.n	8004e52 <HAL_SPI_TransmitReceive+0x2ce>
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d102      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x2d4>
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d107      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e66:	e033      	b.n	8004ed0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d19e      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x22c>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d199      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f8b7 	bl	8004ff4 <SPI_EndRxTxTransaction>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d006      	beq.n	8004e9a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e98:	e01a      	b.n	8004ed0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ec6:	e003      	b.n	8004ed0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ed8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3730      	adds	r7, #48	; 0x30
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ef4:	f7fd f8aa 	bl	800204c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f04:	f7fd f8a2 	bl	800204c <HAL_GetTick>
 8004f08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f0a:	4b39      	ldr	r3, [pc, #228]	; (8004ff0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	015b      	lsls	r3, r3, #5
 8004f10:	0d1b      	lsrs	r3, r3, #20
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f1a:	e054      	b.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d050      	beq.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f24:	f7fd f892 	bl	800204c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d902      	bls.n	8004f3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d13d      	bne.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f52:	d111      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5c:	d004      	beq.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f66:	d107      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f80:	d10f      	bne.n	8004fa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e017      	b.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d19b      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	2000007c 	.word	0x2000007c

08004ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	2180      	movs	r1, #128	; 0x80
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff ff6a 	bl	8004ee4 <SPI_WaitFlagStateUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d007      	beq.n	8005026 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	f043 0220 	orr.w	r2, r3, #32
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e000      	b.n	8005028 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e041      	b.n	80050c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fc fe80 	bl	8001d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f000 fea6 	bl	8005dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d001      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e03a      	b.n	800515e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_TIM_Base_Start_IT+0x98>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x58>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d009      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x58>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a14      	ldr	r2, [pc, #80]	; (800516c <HAL_TIM_Base_Start_IT+0x9c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0x58>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a13      	ldr	r2, [pc, #76]	; (8005170 <HAL_TIM_Base_Start_IT+0xa0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d111      	bne.n	800514c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b06      	cmp	r3, #6
 8005138:	d010      	beq.n	800515c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0201 	orr.w	r2, r2, #1
 8005148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514a:	e007      	b.n	800515c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800

08005174 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a1a      	ldr	r2, [r3, #32]
 8005192:	f241 1311 	movw	r3, #4369	; 0x1111
 8005196:	4013      	ands	r3, r2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10f      	bne.n	80051bc <HAL_TIM_Base_Stop_IT+0x48>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6a1a      	ldr	r2, [r3, #32]
 80051a2:	f240 4344 	movw	r3, #1092	; 0x444
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d107      	bne.n	80051bc <HAL_TIM_Base_Stop_IT+0x48>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e041      	b.n	8005266 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f839 	bl	800526e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3304      	adds	r3, #4
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f000 fdd6 	bl	8005dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e041      	b.n	8005316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f839 	bl	800531e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4619      	mov	r1, r3
 80052be:	4610      	mov	r0, r2
 80052c0:	f000 fd7e 	bl	8005dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d109      	bne.n	8005354 <HAL_TIM_PWM_Start+0x24>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	e022      	b.n	800539a <HAL_TIM_PWM_Start+0x6a>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b04      	cmp	r3, #4
 8005358:	d109      	bne.n	800536e <HAL_TIM_PWM_Start+0x3e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b01      	cmp	r3, #1
 8005364:	bf14      	ite	ne
 8005366:	2301      	movne	r3, #1
 8005368:	2300      	moveq	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	e015      	b.n	800539a <HAL_TIM_PWM_Start+0x6a>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b08      	cmp	r3, #8
 8005372:	d109      	bne.n	8005388 <HAL_TIM_PWM_Start+0x58>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e008      	b.n	800539a <HAL_TIM_PWM_Start+0x6a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e05e      	b.n	8005460 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_PWM_Start+0x82>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b0:	e013      	b.n	80053da <HAL_TIM_PWM_Start+0xaa>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_PWM_Start+0x92>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c0:	e00b      	b.n	80053da <HAL_TIM_PWM_Start+0xaa>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_PWM_Start+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d0:	e003      	b.n	80053da <HAL_TIM_PWM_Start+0xaa>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2202      	movs	r2, #2
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2201      	movs	r2, #1
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 ff6c 	bl	80062c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1e      	ldr	r2, [pc, #120]	; (8005468 <HAL_TIM_PWM_Start+0x138>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005400:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a18      	ldr	r2, [pc, #96]	; (8005468 <HAL_TIM_PWM_Start+0x138>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00e      	beq.n	800542a <HAL_TIM_PWM_Start+0xfa>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005414:	d009      	beq.n	800542a <HAL_TIM_PWM_Start+0xfa>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a14      	ldr	r2, [pc, #80]	; (800546c <HAL_TIM_PWM_Start+0x13c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d004      	beq.n	800542a <HAL_TIM_PWM_Start+0xfa>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a12      	ldr	r2, [pc, #72]	; (8005470 <HAL_TIM_PWM_Start+0x140>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d111      	bne.n	800544e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b06      	cmp	r3, #6
 800543a:	d010      	beq.n	800545e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544c:	e007      	b.n	800545e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800

08005474 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 ff1a 	bl	80062c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a29      	ldr	r2, [pc, #164]	; (8005538 <HAL_TIM_PWM_Stop+0xc4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d117      	bne.n	80054c6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6a1a      	ldr	r2, [r3, #32]
 800549c:	f241 1311 	movw	r3, #4369	; 0x1111
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10f      	bne.n	80054c6 <HAL_TIM_PWM_Stop+0x52>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a1a      	ldr	r2, [r3, #32]
 80054ac:	f240 4344 	movw	r3, #1092	; 0x444
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d107      	bne.n	80054c6 <HAL_TIM_PWM_Stop+0x52>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10f      	bne.n	80054f6 <HAL_TIM_PWM_Stop+0x82>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	f240 4344 	movw	r3, #1092	; 0x444
 80054e0:	4013      	ands	r3, r2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d107      	bne.n	80054f6 <HAL_TIM_PWM_Stop+0x82>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0201 	bic.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <HAL_TIM_PWM_Stop+0x92>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005504:	e013      	b.n	800552e <HAL_TIM_PWM_Stop+0xba>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d104      	bne.n	8005516 <HAL_TIM_PWM_Stop+0xa2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005514:	e00b      	b.n	800552e <HAL_TIM_PWM_Stop+0xba>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d104      	bne.n	8005526 <HAL_TIM_PWM_Stop+0xb2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005524:	e003      	b.n	800552e <HAL_TIM_PWM_Stop+0xba>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40012c00 	.word	0x40012c00

0800553c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e093      	b.n	8005678 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fc fc33 	bl	8001dd0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005580:	f023 0307 	bic.w	r3, r3, #7
 8005584:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	4619      	mov	r1, r3
 8005590:	4610      	mov	r0, r2
 8005592:	f000 fc15 	bl	8005dc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	4313      	orrs	r3, r2
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80055dc:	f023 030c 	bic.w	r3, r3, #12
 80055e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	4313      	orrs	r3, r2
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	011a      	lsls	r2, r3, #4
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	031b      	lsls	r3, r3, #12
 800560c:	4313      	orrs	r3, r2
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	4313      	orrs	r3, r2
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005690:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005698:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d110      	bne.n	80056d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d102      	bne.n	80056bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056b6:	7b7b      	ldrb	r3, [r7, #13]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d001      	beq.n	80056c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e069      	b.n	8005794 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056d0:	e031      	b.n	8005736 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d110      	bne.n	80056fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056d8:	7bbb      	ldrb	r3, [r7, #14]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d102      	bne.n	80056e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056de:	7b3b      	ldrb	r3, [r7, #12]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d001      	beq.n	80056e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e055      	b.n	8005794 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056f8:	e01d      	b.n	8005736 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d108      	bne.n	8005712 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005700:	7bbb      	ldrb	r3, [r7, #14]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d105      	bne.n	8005712 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005706:	7b7b      	ldrb	r3, [r7, #13]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d102      	bne.n	8005712 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800570c:	7b3b      	ldrb	r3, [r7, #12]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d001      	beq.n	8005716 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e03e      	b.n	8005794 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2202      	movs	r2, #2
 800572a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_TIM_Encoder_Start+0xc4>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b04      	cmp	r3, #4
 8005740:	d008      	beq.n	8005754 <HAL_TIM_Encoder_Start+0xd4>
 8005742:	e00f      	b.n	8005764 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2201      	movs	r2, #1
 800574a:	2100      	movs	r1, #0
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fdb7 	bl	80062c0 <TIM_CCxChannelCmd>
      break;
 8005752:	e016      	b.n	8005782 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2201      	movs	r2, #1
 800575a:	2104      	movs	r1, #4
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fdaf 	bl	80062c0 <TIM_CCxChannelCmd>
      break;
 8005762:	e00e      	b.n	8005782 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fda7 	bl	80062c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2201      	movs	r2, #1
 8005778:	2104      	movs	r1, #4
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fda0 	bl	80062c0 <TIM_CCxChannelCmd>
      break;
 8005780:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0201 	orr.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d122      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d11b      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f06f 0202 	mvn.w	r2, #2
 80057c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fad2 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 80057e4:	e005      	b.n	80057f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fac5 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fad4 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b04      	cmp	r3, #4
 8005804:	d122      	bne.n	800584c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b04      	cmp	r3, #4
 8005812:	d11b      	bne.n	800584c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f06f 0204 	mvn.w	r2, #4
 800581c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 faa8 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005838:	e005      	b.n	8005846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa9b 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 faaa 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b08      	cmp	r3, #8
 8005858:	d122      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b08      	cmp	r3, #8
 8005866:	d11b      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0208 	mvn.w	r2, #8
 8005870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2204      	movs	r2, #4
 8005876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa7e 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 800588c:	e005      	b.n	800589a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fa71 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa80 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d122      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d11b      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0210 	mvn.w	r2, #16
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2208      	movs	r2, #8
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa54 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fa47 	bl	8005d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fa56 	bl	8005d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d10e      	bne.n	8005920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b01      	cmp	r3, #1
 800590e:	d107      	bne.n	8005920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0201 	mvn.w	r2, #1
 8005918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fc fb00 	bl	8001f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b80      	cmp	r3, #128	; 0x80
 800592c:	d10e      	bne.n	800594c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005938:	2b80      	cmp	r3, #128	; 0x80
 800593a:	d107      	bne.n	800594c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fd96 	bl	8006478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	d10e      	bne.n	8005978 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d107      	bne.n	8005978 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fa1a 	bl	8005dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b20      	cmp	r3, #32
 8005984:	d10e      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b20      	cmp	r3, #32
 8005992:	d107      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0220 	mvn.w	r2, #32
 800599c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fd61 	bl	8006466 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059a4:	bf00      	nop
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b8:	2300      	movs	r3, #0
 80059ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e048      	b.n	8005a5c <HAL_TIM_OC_ConfigChannel+0xb0>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b0c      	cmp	r3, #12
 80059d6:	d839      	bhi.n	8005a4c <HAL_TIM_OC_ConfigChannel+0xa0>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a15 	.word	0x08005a15
 80059e4:	08005a4d 	.word	0x08005a4d
 80059e8:	08005a4d 	.word	0x08005a4d
 80059ec:	08005a4d 	.word	0x08005a4d
 80059f0:	08005a23 	.word	0x08005a23
 80059f4:	08005a4d 	.word	0x08005a4d
 80059f8:	08005a4d 	.word	0x08005a4d
 80059fc:	08005a4d 	.word	0x08005a4d
 8005a00:	08005a31 	.word	0x08005a31
 8005a04:	08005a4d 	.word	0x08005a4d
 8005a08:	08005a4d 	.word	0x08005a4d
 8005a0c:	08005a4d 	.word	0x08005a4d
 8005a10:	08005a3f 	.word	0x08005a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fa32 	bl	8005e84 <TIM_OC1_SetConfig>
      break;
 8005a20:	e017      	b.n	8005a52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fa91 	bl	8005f50 <TIM_OC2_SetConfig>
      break;
 8005a2e:	e010      	b.n	8005a52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 faf4 	bl	8006024 <TIM_OC3_SetConfig>
      break;
 8005a3c:	e009      	b.n	8005a52 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fb57 	bl	80060f8 <TIM_OC4_SetConfig>
      break;
 8005a4a:	e002      	b.n	8005a52 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d101      	bne.n	8005a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e0ae      	b.n	8005be0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b0c      	cmp	r3, #12
 8005a8e:	f200 809f 	bhi.w	8005bd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a92:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005acd 	.word	0x08005acd
 8005a9c:	08005bd1 	.word	0x08005bd1
 8005aa0:	08005bd1 	.word	0x08005bd1
 8005aa4:	08005bd1 	.word	0x08005bd1
 8005aa8:	08005b0d 	.word	0x08005b0d
 8005aac:	08005bd1 	.word	0x08005bd1
 8005ab0:	08005bd1 	.word	0x08005bd1
 8005ab4:	08005bd1 	.word	0x08005bd1
 8005ab8:	08005b4f 	.word	0x08005b4f
 8005abc:	08005bd1 	.word	0x08005bd1
 8005ac0:	08005bd1 	.word	0x08005bd1
 8005ac4:	08005bd1 	.word	0x08005bd1
 8005ac8:	08005b8f 	.word	0x08005b8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f9d6 	bl	8005e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0208 	orr.w	r2, r2, #8
 8005ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0204 	bic.w	r2, r2, #4
 8005af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6999      	ldr	r1, [r3, #24]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	619a      	str	r2, [r3, #24]
      break;
 8005b0a:	e064      	b.n	8005bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fa1c 	bl	8005f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699a      	ldr	r2, [r3, #24]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6999      	ldr	r1, [r3, #24]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	021a      	lsls	r2, r3, #8
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	619a      	str	r2, [r3, #24]
      break;
 8005b4c:	e043      	b.n	8005bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68b9      	ldr	r1, [r7, #8]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fa65 	bl	8006024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0208 	orr.w	r2, r2, #8
 8005b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0204 	bic.w	r2, r2, #4
 8005b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69d9      	ldr	r1, [r3, #28]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	61da      	str	r2, [r3, #28]
      break;
 8005b8c:	e023      	b.n	8005bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 faaf 	bl	80060f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69d9      	ldr	r1, [r3, #28]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	021a      	lsls	r2, r3, #8
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	61da      	str	r2, [r3, #28]
      break;
 8005bce:	e002      	b.n	8005bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIM_ConfigClockSource+0x1c>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e0b4      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x186>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c3c:	d03e      	beq.n	8005cbc <HAL_TIM_ConfigClockSource+0xd4>
 8005c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c42:	f200 8087 	bhi.w	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c4a:	f000 8086 	beq.w	8005d5a <HAL_TIM_ConfigClockSource+0x172>
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	d87f      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c54:	2b70      	cmp	r3, #112	; 0x70
 8005c56:	d01a      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0xa6>
 8005c58:	2b70      	cmp	r3, #112	; 0x70
 8005c5a:	d87b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c5c:	2b60      	cmp	r3, #96	; 0x60
 8005c5e:	d050      	beq.n	8005d02 <HAL_TIM_ConfigClockSource+0x11a>
 8005c60:	2b60      	cmp	r3, #96	; 0x60
 8005c62:	d877      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c64:	2b50      	cmp	r3, #80	; 0x50
 8005c66:	d03c      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8005c68:	2b50      	cmp	r3, #80	; 0x50
 8005c6a:	d873      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d058      	beq.n	8005d22 <HAL_TIM_ConfigClockSource+0x13a>
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d86f      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c74:	2b30      	cmp	r3, #48	; 0x30
 8005c76:	d064      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15a>
 8005c78:	2b30      	cmp	r3, #48	; 0x30
 8005c7a:	d86b      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	d060      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15a>
 8005c80:	2b20      	cmp	r3, #32
 8005c82:	d867      	bhi.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d05c      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15a>
 8005c88:	2b10      	cmp	r3, #16
 8005c8a:	d05a      	beq.n	8005d42 <HAL_TIM_ConfigClockSource+0x15a>
 8005c8c:	e062      	b.n	8005d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6899      	ldr	r1, [r3, #8]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f000 faf0 	bl	8006282 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	609a      	str	r2, [r3, #8]
      break;
 8005cba:	e04f      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	6899      	ldr	r1, [r3, #8]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f000 fad9 	bl	8006282 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cde:	609a      	str	r2, [r3, #8]
      break;
 8005ce0:	e03c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f000 fa50 	bl	8006194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2150      	movs	r1, #80	; 0x50
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 faa7 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005d00:	e02c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f000 fa6e 	bl	80061f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2160      	movs	r1, #96	; 0x60
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fa97 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005d20:	e01c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6859      	ldr	r1, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f000 fa30 	bl	8006194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2140      	movs	r1, #64	; 0x40
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fa87 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005d40:	e00c      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	f000 fa7e 	bl	800624e <TIM_ITRx_SetConfig>
      break;
 8005d52:	e003      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	73fb      	strb	r3, [r7, #15]
      break;
 8005d58:	e000      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr

08005dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr
	...

08005dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a29      	ldr	r2, [pc, #164]	; (8005e78 <TIM_Base_SetConfig+0xb8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00b      	beq.n	8005df0 <TIM_Base_SetConfig+0x30>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dde:	d007      	beq.n	8005df0 <TIM_Base_SetConfig+0x30>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <TIM_Base_SetConfig+0xbc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_Base_SetConfig+0x30>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <TIM_Base_SetConfig+0xc0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d108      	bne.n	8005e02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1c      	ldr	r2, [pc, #112]	; (8005e78 <TIM_Base_SetConfig+0xb8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00b      	beq.n	8005e22 <TIM_Base_SetConfig+0x62>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e10:	d007      	beq.n	8005e22 <TIM_Base_SetConfig+0x62>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <TIM_Base_SetConfig+0xbc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_Base_SetConfig+0x62>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a18      	ldr	r2, [pc, #96]	; (8005e80 <TIM_Base_SetConfig+0xc0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d108      	bne.n	8005e34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a07      	ldr	r2, [pc, #28]	; (8005e78 <TIM_Base_SetConfig+0xb8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d103      	bne.n	8005e68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	615a      	str	r2, [r3, #20]
}
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800

08005e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f023 0201 	bic.w	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0303 	bic.w	r3, r3, #3
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f023 0302 	bic.w	r3, r3, #2
 8005ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <TIM_OC1_SetConfig+0xc8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10c      	bne.n	8005efa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f023 0308 	bic.w	r3, r3, #8
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f023 0304 	bic.w	r3, r3, #4
 8005ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <TIM_OC1_SetConfig+0xc8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d111      	bne.n	8005f26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bc80      	pop	{r7}
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40012c00 	.word	0x40012c00

08005f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f023 0210 	bic.w	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f023 0320 	bic.w	r3, r3, #32
 8005f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <TIM_OC2_SetConfig+0xd0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10d      	bne.n	8005fcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a14      	ldr	r2, [pc, #80]	; (8006020 <TIM_OC2_SetConfig+0xd0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d113      	bne.n	8005ffc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	40012c00 	.word	0x40012c00

08006024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800606c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <TIM_OC3_SetConfig+0xd0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d10d      	bne.n	800609e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800609c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a14      	ldr	r2, [pc, #80]	; (80060f4 <TIM_OC3_SetConfig+0xd0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d113      	bne.n	80060ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	621a      	str	r2, [r3, #32]
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40012c00 	.word	0x40012c00

080060f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a0f      	ldr	r2, [pc, #60]	; (8006190 <TIM_OC4_SetConfig+0x98>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d109      	bne.n	800616c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	019b      	lsls	r3, r3, #6
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	40012c00 	.word	0x40012c00

08006194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 030a 	bic.w	r3, r3, #10
 80061d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f023 0210 	bic.w	r2, r3, #16
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800621a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	031b      	lsls	r3, r3, #12
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800622c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr

0800624e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	f043 0307 	orr.w	r3, r3, #7
 8006270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]
}
 8006278:	bf00      	nop
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr

08006282 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006282:	b480      	push	{r7}
 8006284:	b087      	sub	sp, #28
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	607a      	str	r2, [r7, #4]
 800628e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800629c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	021a      	lsls	r2, r3, #8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	431a      	orrs	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	609a      	str	r2, [r3, #8]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	2201      	movs	r2, #1
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a1a      	ldr	r2, [r3, #32]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	43db      	mvns	r3, r3
 80062e2:	401a      	ands	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a1a      	ldr	r2, [r3, #32]
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	fa01 f303 	lsl.w	r3, r1, r3
 80062f8:	431a      	orrs	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e046      	b.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636c:	d009      	beq.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a12      	ldr	r2, [pc, #72]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a10      	ldr	r2, [pc, #64]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d10c      	bne.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	4313      	orrs	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40000800 	.word	0x40000800

080063c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063dc:	2302      	movs	r3, #2
 80063de:	e03d      	b.n	800645c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr

08006466 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr

08006478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
	...

0800648c <__assert_func>:
 800648c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800648e:	4614      	mov	r4, r2
 8006490:	461a      	mov	r2, r3
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <__assert_func+0x2c>)
 8006494:	4605      	mov	r5, r0
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68d8      	ldr	r0, [r3, #12]
 800649a:	b14c      	cbz	r4, 80064b0 <__assert_func+0x24>
 800649c:	4b07      	ldr	r3, [pc, #28]	; (80064bc <__assert_func+0x30>)
 800649e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064a2:	9100      	str	r1, [sp, #0]
 80064a4:	462b      	mov	r3, r5
 80064a6:	4906      	ldr	r1, [pc, #24]	; (80064c0 <__assert_func+0x34>)
 80064a8:	f000 f814 	bl	80064d4 <fiprintf>
 80064ac:	f000 fbfe 	bl	8006cac <abort>
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <__assert_func+0x38>)
 80064b2:	461c      	mov	r4, r3
 80064b4:	e7f3      	b.n	800649e <__assert_func+0x12>
 80064b6:	bf00      	nop
 80064b8:	20000088 	.word	0x20000088
 80064bc:	0800759e 	.word	0x0800759e
 80064c0:	080075ab 	.word	0x080075ab
 80064c4:	080075d9 	.word	0x080075d9

080064c8 <__errno>:
 80064c8:	4b01      	ldr	r3, [pc, #4]	; (80064d0 <__errno+0x8>)
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	20000088 	.word	0x20000088

080064d4 <fiprintf>:
 80064d4:	b40e      	push	{r1, r2, r3}
 80064d6:	b503      	push	{r0, r1, lr}
 80064d8:	4601      	mov	r1, r0
 80064da:	ab03      	add	r3, sp, #12
 80064dc:	4805      	ldr	r0, [pc, #20]	; (80064f4 <fiprintf+0x20>)
 80064de:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e2:	6800      	ldr	r0, [r0, #0]
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	f000 f85b 	bl	80065a0 <_vfiprintf_r>
 80064ea:	b002      	add	sp, #8
 80064ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80064f0:	b003      	add	sp, #12
 80064f2:	4770      	bx	lr
 80064f4:	20000088 	.word	0x20000088

080064f8 <__libc_init_array>:
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	2600      	movs	r6, #0
 80064fc:	4d0c      	ldr	r5, [pc, #48]	; (8006530 <__libc_init_array+0x38>)
 80064fe:	4c0d      	ldr	r4, [pc, #52]	; (8006534 <__libc_init_array+0x3c>)
 8006500:	1b64      	subs	r4, r4, r5
 8006502:	10a4      	asrs	r4, r4, #2
 8006504:	42a6      	cmp	r6, r4
 8006506:	d109      	bne.n	800651c <__libc_init_array+0x24>
 8006508:	f000 ffea 	bl	80074e0 <_init>
 800650c:	2600      	movs	r6, #0
 800650e:	4d0a      	ldr	r5, [pc, #40]	; (8006538 <__libc_init_array+0x40>)
 8006510:	4c0a      	ldr	r4, [pc, #40]	; (800653c <__libc_init_array+0x44>)
 8006512:	1b64      	subs	r4, r4, r5
 8006514:	10a4      	asrs	r4, r4, #2
 8006516:	42a6      	cmp	r6, r4
 8006518:	d105      	bne.n	8006526 <__libc_init_array+0x2e>
 800651a:	bd70      	pop	{r4, r5, r6, pc}
 800651c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006520:	4798      	blx	r3
 8006522:	3601      	adds	r6, #1
 8006524:	e7ee      	b.n	8006504 <__libc_init_array+0xc>
 8006526:	f855 3b04 	ldr.w	r3, [r5], #4
 800652a:	4798      	blx	r3
 800652c:	3601      	adds	r6, #1
 800652e:	e7f2      	b.n	8006516 <__libc_init_array+0x1e>
 8006530:	08007674 	.word	0x08007674
 8006534:	08007674 	.word	0x08007674
 8006538:	08007674 	.word	0x08007674
 800653c:	08007678 	.word	0x08007678

08006540 <memset>:
 8006540:	4603      	mov	r3, r0
 8006542:	4402      	add	r2, r0
 8006544:	4293      	cmp	r3, r2
 8006546:	d100      	bne.n	800654a <memset+0xa>
 8006548:	4770      	bx	lr
 800654a:	f803 1b01 	strb.w	r1, [r3], #1
 800654e:	e7f9      	b.n	8006544 <memset+0x4>

08006550 <__sfputc_r>:
 8006550:	6893      	ldr	r3, [r2, #8]
 8006552:	b410      	push	{r4}
 8006554:	3b01      	subs	r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	6093      	str	r3, [r2, #8]
 800655a:	da07      	bge.n	800656c <__sfputc_r+0x1c>
 800655c:	6994      	ldr	r4, [r2, #24]
 800655e:	42a3      	cmp	r3, r4
 8006560:	db01      	blt.n	8006566 <__sfputc_r+0x16>
 8006562:	290a      	cmp	r1, #10
 8006564:	d102      	bne.n	800656c <__sfputc_r+0x1c>
 8006566:	bc10      	pop	{r4}
 8006568:	f000 bae0 	b.w	8006b2c <__swbuf_r>
 800656c:	6813      	ldr	r3, [r2, #0]
 800656e:	1c58      	adds	r0, r3, #1
 8006570:	6010      	str	r0, [r2, #0]
 8006572:	7019      	strb	r1, [r3, #0]
 8006574:	4608      	mov	r0, r1
 8006576:	bc10      	pop	{r4}
 8006578:	4770      	bx	lr

0800657a <__sfputs_r>:
 800657a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	4614      	mov	r4, r2
 8006582:	18d5      	adds	r5, r2, r3
 8006584:	42ac      	cmp	r4, r5
 8006586:	d101      	bne.n	800658c <__sfputs_r+0x12>
 8006588:	2000      	movs	r0, #0
 800658a:	e007      	b.n	800659c <__sfputs_r+0x22>
 800658c:	463a      	mov	r2, r7
 800658e:	4630      	mov	r0, r6
 8006590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006594:	f7ff ffdc 	bl	8006550 <__sfputc_r>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d1f3      	bne.n	8006584 <__sfputs_r+0xa>
 800659c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065a0 <_vfiprintf_r>:
 80065a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a4:	460d      	mov	r5, r1
 80065a6:	4614      	mov	r4, r2
 80065a8:	4698      	mov	r8, r3
 80065aa:	4606      	mov	r6, r0
 80065ac:	b09d      	sub	sp, #116	; 0x74
 80065ae:	b118      	cbz	r0, 80065b8 <_vfiprintf_r+0x18>
 80065b0:	6983      	ldr	r3, [r0, #24]
 80065b2:	b90b      	cbnz	r3, 80065b8 <_vfiprintf_r+0x18>
 80065b4:	f000 fc98 	bl	8006ee8 <__sinit>
 80065b8:	4b89      	ldr	r3, [pc, #548]	; (80067e0 <_vfiprintf_r+0x240>)
 80065ba:	429d      	cmp	r5, r3
 80065bc:	d11b      	bne.n	80065f6 <_vfiprintf_r+0x56>
 80065be:	6875      	ldr	r5, [r6, #4]
 80065c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065c2:	07d9      	lsls	r1, r3, #31
 80065c4:	d405      	bmi.n	80065d2 <_vfiprintf_r+0x32>
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	059a      	lsls	r2, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_vfiprintf_r+0x32>
 80065cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065ce:	f000 fd29 	bl	8007024 <__retarget_lock_acquire_recursive>
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	071b      	lsls	r3, r3, #28
 80065d6:	d501      	bpl.n	80065dc <_vfiprintf_r+0x3c>
 80065d8:	692b      	ldr	r3, [r5, #16]
 80065da:	b9eb      	cbnz	r3, 8006618 <_vfiprintf_r+0x78>
 80065dc:	4629      	mov	r1, r5
 80065de:	4630      	mov	r0, r6
 80065e0:	f000 faf6 	bl	8006bd0 <__swsetup_r>
 80065e4:	b1c0      	cbz	r0, 8006618 <_vfiprintf_r+0x78>
 80065e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065e8:	07dc      	lsls	r4, r3, #31
 80065ea:	d50e      	bpl.n	800660a <_vfiprintf_r+0x6a>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	b01d      	add	sp, #116	; 0x74
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	4b7b      	ldr	r3, [pc, #492]	; (80067e4 <_vfiprintf_r+0x244>)
 80065f8:	429d      	cmp	r5, r3
 80065fa:	d101      	bne.n	8006600 <_vfiprintf_r+0x60>
 80065fc:	68b5      	ldr	r5, [r6, #8]
 80065fe:	e7df      	b.n	80065c0 <_vfiprintf_r+0x20>
 8006600:	4b79      	ldr	r3, [pc, #484]	; (80067e8 <_vfiprintf_r+0x248>)
 8006602:	429d      	cmp	r5, r3
 8006604:	bf08      	it	eq
 8006606:	68f5      	ldreq	r5, [r6, #12]
 8006608:	e7da      	b.n	80065c0 <_vfiprintf_r+0x20>
 800660a:	89ab      	ldrh	r3, [r5, #12]
 800660c:	0598      	lsls	r0, r3, #22
 800660e:	d4ed      	bmi.n	80065ec <_vfiprintf_r+0x4c>
 8006610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006612:	f000 fd08 	bl	8007026 <__retarget_lock_release_recursive>
 8006616:	e7e9      	b.n	80065ec <_vfiprintf_r+0x4c>
 8006618:	2300      	movs	r3, #0
 800661a:	9309      	str	r3, [sp, #36]	; 0x24
 800661c:	2320      	movs	r3, #32
 800661e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006622:	2330      	movs	r3, #48	; 0x30
 8006624:	f04f 0901 	mov.w	r9, #1
 8006628:	f8cd 800c 	str.w	r8, [sp, #12]
 800662c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80067ec <_vfiprintf_r+0x24c>
 8006630:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006634:	4623      	mov	r3, r4
 8006636:	469a      	mov	sl, r3
 8006638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800663c:	b10a      	cbz	r2, 8006642 <_vfiprintf_r+0xa2>
 800663e:	2a25      	cmp	r2, #37	; 0x25
 8006640:	d1f9      	bne.n	8006636 <_vfiprintf_r+0x96>
 8006642:	ebba 0b04 	subs.w	fp, sl, r4
 8006646:	d00b      	beq.n	8006660 <_vfiprintf_r+0xc0>
 8006648:	465b      	mov	r3, fp
 800664a:	4622      	mov	r2, r4
 800664c:	4629      	mov	r1, r5
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ff93 	bl	800657a <__sfputs_r>
 8006654:	3001      	adds	r0, #1
 8006656:	f000 80aa 	beq.w	80067ae <_vfiprintf_r+0x20e>
 800665a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800665c:	445a      	add	r2, fp
 800665e:	9209      	str	r2, [sp, #36]	; 0x24
 8006660:	f89a 3000 	ldrb.w	r3, [sl]
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 80a2 	beq.w	80067ae <_vfiprintf_r+0x20e>
 800666a:	2300      	movs	r3, #0
 800666c:	f04f 32ff 	mov.w	r2, #4294967295
 8006670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006674:	f10a 0a01 	add.w	sl, sl, #1
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006680:	931a      	str	r3, [sp, #104]	; 0x68
 8006682:	4654      	mov	r4, sl
 8006684:	2205      	movs	r2, #5
 8006686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668a:	4858      	ldr	r0, [pc, #352]	; (80067ec <_vfiprintf_r+0x24c>)
 800668c:	f000 fd32 	bl	80070f4 <memchr>
 8006690:	9a04      	ldr	r2, [sp, #16]
 8006692:	b9d8      	cbnz	r0, 80066cc <_vfiprintf_r+0x12c>
 8006694:	06d1      	lsls	r1, r2, #27
 8006696:	bf44      	itt	mi
 8006698:	2320      	movmi	r3, #32
 800669a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669e:	0713      	lsls	r3, r2, #28
 80066a0:	bf44      	itt	mi
 80066a2:	232b      	movmi	r3, #43	; 0x2b
 80066a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a8:	f89a 3000 	ldrb.w	r3, [sl]
 80066ac:	2b2a      	cmp	r3, #42	; 0x2a
 80066ae:	d015      	beq.n	80066dc <_vfiprintf_r+0x13c>
 80066b0:	4654      	mov	r4, sl
 80066b2:	2000      	movs	r0, #0
 80066b4:	f04f 0c0a 	mov.w	ip, #10
 80066b8:	9a07      	ldr	r2, [sp, #28]
 80066ba:	4621      	mov	r1, r4
 80066bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c0:	3b30      	subs	r3, #48	; 0x30
 80066c2:	2b09      	cmp	r3, #9
 80066c4:	d94e      	bls.n	8006764 <_vfiprintf_r+0x1c4>
 80066c6:	b1b0      	cbz	r0, 80066f6 <_vfiprintf_r+0x156>
 80066c8:	9207      	str	r2, [sp, #28]
 80066ca:	e014      	b.n	80066f6 <_vfiprintf_r+0x156>
 80066cc:	eba0 0308 	sub.w	r3, r0, r8
 80066d0:	fa09 f303 	lsl.w	r3, r9, r3
 80066d4:	4313      	orrs	r3, r2
 80066d6:	46a2      	mov	sl, r4
 80066d8:	9304      	str	r3, [sp, #16]
 80066da:	e7d2      	b.n	8006682 <_vfiprintf_r+0xe2>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	1d19      	adds	r1, r3, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	9103      	str	r1, [sp, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bfbb      	ittet	lt
 80066e8:	425b      	neglt	r3, r3
 80066ea:	f042 0202 	orrlt.w	r2, r2, #2
 80066ee:	9307      	strge	r3, [sp, #28]
 80066f0:	9307      	strlt	r3, [sp, #28]
 80066f2:	bfb8      	it	lt
 80066f4:	9204      	strlt	r2, [sp, #16]
 80066f6:	7823      	ldrb	r3, [r4, #0]
 80066f8:	2b2e      	cmp	r3, #46	; 0x2e
 80066fa:	d10c      	bne.n	8006716 <_vfiprintf_r+0x176>
 80066fc:	7863      	ldrb	r3, [r4, #1]
 80066fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006700:	d135      	bne.n	800676e <_vfiprintf_r+0x1ce>
 8006702:	9b03      	ldr	r3, [sp, #12]
 8006704:	3402      	adds	r4, #2
 8006706:	1d1a      	adds	r2, r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	9203      	str	r2, [sp, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	bfb8      	it	lt
 8006710:	f04f 33ff 	movlt.w	r3, #4294967295
 8006714:	9305      	str	r3, [sp, #20]
 8006716:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80067f0 <_vfiprintf_r+0x250>
 800671a:	2203      	movs	r2, #3
 800671c:	4650      	mov	r0, sl
 800671e:	7821      	ldrb	r1, [r4, #0]
 8006720:	f000 fce8 	bl	80070f4 <memchr>
 8006724:	b140      	cbz	r0, 8006738 <_vfiprintf_r+0x198>
 8006726:	2340      	movs	r3, #64	; 0x40
 8006728:	eba0 000a 	sub.w	r0, r0, sl
 800672c:	fa03 f000 	lsl.w	r0, r3, r0
 8006730:	9b04      	ldr	r3, [sp, #16]
 8006732:	3401      	adds	r4, #1
 8006734:	4303      	orrs	r3, r0
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673c:	2206      	movs	r2, #6
 800673e:	482d      	ldr	r0, [pc, #180]	; (80067f4 <_vfiprintf_r+0x254>)
 8006740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006744:	f000 fcd6 	bl	80070f4 <memchr>
 8006748:	2800      	cmp	r0, #0
 800674a:	d03f      	beq.n	80067cc <_vfiprintf_r+0x22c>
 800674c:	4b2a      	ldr	r3, [pc, #168]	; (80067f8 <_vfiprintf_r+0x258>)
 800674e:	bb1b      	cbnz	r3, 8006798 <_vfiprintf_r+0x1f8>
 8006750:	9b03      	ldr	r3, [sp, #12]
 8006752:	3307      	adds	r3, #7
 8006754:	f023 0307 	bic.w	r3, r3, #7
 8006758:	3308      	adds	r3, #8
 800675a:	9303      	str	r3, [sp, #12]
 800675c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675e:	443b      	add	r3, r7
 8006760:	9309      	str	r3, [sp, #36]	; 0x24
 8006762:	e767      	b.n	8006634 <_vfiprintf_r+0x94>
 8006764:	460c      	mov	r4, r1
 8006766:	2001      	movs	r0, #1
 8006768:	fb0c 3202 	mla	r2, ip, r2, r3
 800676c:	e7a5      	b.n	80066ba <_vfiprintf_r+0x11a>
 800676e:	2300      	movs	r3, #0
 8006770:	f04f 0c0a 	mov.w	ip, #10
 8006774:	4619      	mov	r1, r3
 8006776:	3401      	adds	r4, #1
 8006778:	9305      	str	r3, [sp, #20]
 800677a:	4620      	mov	r0, r4
 800677c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006780:	3a30      	subs	r2, #48	; 0x30
 8006782:	2a09      	cmp	r2, #9
 8006784:	d903      	bls.n	800678e <_vfiprintf_r+0x1ee>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0c5      	beq.n	8006716 <_vfiprintf_r+0x176>
 800678a:	9105      	str	r1, [sp, #20]
 800678c:	e7c3      	b.n	8006716 <_vfiprintf_r+0x176>
 800678e:	4604      	mov	r4, r0
 8006790:	2301      	movs	r3, #1
 8006792:	fb0c 2101 	mla	r1, ip, r1, r2
 8006796:	e7f0      	b.n	800677a <_vfiprintf_r+0x1da>
 8006798:	ab03      	add	r3, sp, #12
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	462a      	mov	r2, r5
 800679e:	4630      	mov	r0, r6
 80067a0:	4b16      	ldr	r3, [pc, #88]	; (80067fc <_vfiprintf_r+0x25c>)
 80067a2:	a904      	add	r1, sp, #16
 80067a4:	f3af 8000 	nop.w
 80067a8:	4607      	mov	r7, r0
 80067aa:	1c78      	adds	r0, r7, #1
 80067ac:	d1d6      	bne.n	800675c <_vfiprintf_r+0x1bc>
 80067ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067b0:	07d9      	lsls	r1, r3, #31
 80067b2:	d405      	bmi.n	80067c0 <_vfiprintf_r+0x220>
 80067b4:	89ab      	ldrh	r3, [r5, #12]
 80067b6:	059a      	lsls	r2, r3, #22
 80067b8:	d402      	bmi.n	80067c0 <_vfiprintf_r+0x220>
 80067ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067bc:	f000 fc33 	bl	8007026 <__retarget_lock_release_recursive>
 80067c0:	89ab      	ldrh	r3, [r5, #12]
 80067c2:	065b      	lsls	r3, r3, #25
 80067c4:	f53f af12 	bmi.w	80065ec <_vfiprintf_r+0x4c>
 80067c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ca:	e711      	b.n	80065f0 <_vfiprintf_r+0x50>
 80067cc:	ab03      	add	r3, sp, #12
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4630      	mov	r0, r6
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <_vfiprintf_r+0x25c>)
 80067d6:	a904      	add	r1, sp, #16
 80067d8:	f000 f882 	bl	80068e0 <_printf_i>
 80067dc:	e7e4      	b.n	80067a8 <_vfiprintf_r+0x208>
 80067de:	bf00      	nop
 80067e0:	08007634 	.word	0x08007634
 80067e4:	08007654 	.word	0x08007654
 80067e8:	08007614 	.word	0x08007614
 80067ec:	080075e0 	.word	0x080075e0
 80067f0:	080075e6 	.word	0x080075e6
 80067f4:	080075ea 	.word	0x080075ea
 80067f8:	00000000 	.word	0x00000000
 80067fc:	0800657b 	.word	0x0800657b

08006800 <_printf_common>:
 8006800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006804:	4616      	mov	r6, r2
 8006806:	4699      	mov	r9, r3
 8006808:	688a      	ldr	r2, [r1, #8]
 800680a:	690b      	ldr	r3, [r1, #16]
 800680c:	4607      	mov	r7, r0
 800680e:	4293      	cmp	r3, r2
 8006810:	bfb8      	it	lt
 8006812:	4613      	movlt	r3, r2
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800681a:	460c      	mov	r4, r1
 800681c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006820:	b10a      	cbz	r2, 8006826 <_printf_common+0x26>
 8006822:	3301      	adds	r3, #1
 8006824:	6033      	str	r3, [r6, #0]
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	0699      	lsls	r1, r3, #26
 800682a:	bf42      	ittt	mi
 800682c:	6833      	ldrmi	r3, [r6, #0]
 800682e:	3302      	addmi	r3, #2
 8006830:	6033      	strmi	r3, [r6, #0]
 8006832:	6825      	ldr	r5, [r4, #0]
 8006834:	f015 0506 	ands.w	r5, r5, #6
 8006838:	d106      	bne.n	8006848 <_printf_common+0x48>
 800683a:	f104 0a19 	add.w	sl, r4, #25
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	6832      	ldr	r2, [r6, #0]
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	42ab      	cmp	r3, r5
 8006846:	dc28      	bgt.n	800689a <_printf_common+0x9a>
 8006848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800684c:	1e13      	subs	r3, r2, #0
 800684e:	6822      	ldr	r2, [r4, #0]
 8006850:	bf18      	it	ne
 8006852:	2301      	movne	r3, #1
 8006854:	0692      	lsls	r2, r2, #26
 8006856:	d42d      	bmi.n	80068b4 <_printf_common+0xb4>
 8006858:	4649      	mov	r1, r9
 800685a:	4638      	mov	r0, r7
 800685c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006860:	47c0      	blx	r8
 8006862:	3001      	adds	r0, #1
 8006864:	d020      	beq.n	80068a8 <_printf_common+0xa8>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	68e5      	ldr	r5, [r4, #12]
 800686a:	f003 0306 	and.w	r3, r3, #6
 800686e:	2b04      	cmp	r3, #4
 8006870:	bf18      	it	ne
 8006872:	2500      	movne	r5, #0
 8006874:	6832      	ldr	r2, [r6, #0]
 8006876:	f04f 0600 	mov.w	r6, #0
 800687a:	68a3      	ldr	r3, [r4, #8]
 800687c:	bf08      	it	eq
 800687e:	1aad      	subeq	r5, r5, r2
 8006880:	6922      	ldr	r2, [r4, #16]
 8006882:	bf08      	it	eq
 8006884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006888:	4293      	cmp	r3, r2
 800688a:	bfc4      	itt	gt
 800688c:	1a9b      	subgt	r3, r3, r2
 800688e:	18ed      	addgt	r5, r5, r3
 8006890:	341a      	adds	r4, #26
 8006892:	42b5      	cmp	r5, r6
 8006894:	d11a      	bne.n	80068cc <_printf_common+0xcc>
 8006896:	2000      	movs	r0, #0
 8006898:	e008      	b.n	80068ac <_printf_common+0xac>
 800689a:	2301      	movs	r3, #1
 800689c:	4652      	mov	r2, sl
 800689e:	4649      	mov	r1, r9
 80068a0:	4638      	mov	r0, r7
 80068a2:	47c0      	blx	r8
 80068a4:	3001      	adds	r0, #1
 80068a6:	d103      	bne.n	80068b0 <_printf_common+0xb0>
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b0:	3501      	adds	r5, #1
 80068b2:	e7c4      	b.n	800683e <_printf_common+0x3e>
 80068b4:	2030      	movs	r0, #48	; 0x30
 80068b6:	18e1      	adds	r1, r4, r3
 80068b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068c2:	4422      	add	r2, r4
 80068c4:	3302      	adds	r3, #2
 80068c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068ca:	e7c5      	b.n	8006858 <_printf_common+0x58>
 80068cc:	2301      	movs	r3, #1
 80068ce:	4622      	mov	r2, r4
 80068d0:	4649      	mov	r1, r9
 80068d2:	4638      	mov	r0, r7
 80068d4:	47c0      	blx	r8
 80068d6:	3001      	adds	r0, #1
 80068d8:	d0e6      	beq.n	80068a8 <_printf_common+0xa8>
 80068da:	3601      	adds	r6, #1
 80068dc:	e7d9      	b.n	8006892 <_printf_common+0x92>
	...

080068e0 <_printf_i>:
 80068e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e4:	7e0f      	ldrb	r7, [r1, #24]
 80068e6:	4691      	mov	r9, r2
 80068e8:	2f78      	cmp	r7, #120	; 0x78
 80068ea:	4680      	mov	r8, r0
 80068ec:	460c      	mov	r4, r1
 80068ee:	469a      	mov	sl, r3
 80068f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068f6:	d807      	bhi.n	8006908 <_printf_i+0x28>
 80068f8:	2f62      	cmp	r7, #98	; 0x62
 80068fa:	d80a      	bhi.n	8006912 <_printf_i+0x32>
 80068fc:	2f00      	cmp	r7, #0
 80068fe:	f000 80d9 	beq.w	8006ab4 <_printf_i+0x1d4>
 8006902:	2f58      	cmp	r7, #88	; 0x58
 8006904:	f000 80a4 	beq.w	8006a50 <_printf_i+0x170>
 8006908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800690c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006910:	e03a      	b.n	8006988 <_printf_i+0xa8>
 8006912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006916:	2b15      	cmp	r3, #21
 8006918:	d8f6      	bhi.n	8006908 <_printf_i+0x28>
 800691a:	a101      	add	r1, pc, #4	; (adr r1, 8006920 <_printf_i+0x40>)
 800691c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006920:	08006979 	.word	0x08006979
 8006924:	0800698d 	.word	0x0800698d
 8006928:	08006909 	.word	0x08006909
 800692c:	08006909 	.word	0x08006909
 8006930:	08006909 	.word	0x08006909
 8006934:	08006909 	.word	0x08006909
 8006938:	0800698d 	.word	0x0800698d
 800693c:	08006909 	.word	0x08006909
 8006940:	08006909 	.word	0x08006909
 8006944:	08006909 	.word	0x08006909
 8006948:	08006909 	.word	0x08006909
 800694c:	08006a9b 	.word	0x08006a9b
 8006950:	080069bd 	.word	0x080069bd
 8006954:	08006a7d 	.word	0x08006a7d
 8006958:	08006909 	.word	0x08006909
 800695c:	08006909 	.word	0x08006909
 8006960:	08006abd 	.word	0x08006abd
 8006964:	08006909 	.word	0x08006909
 8006968:	080069bd 	.word	0x080069bd
 800696c:	08006909 	.word	0x08006909
 8006970:	08006909 	.word	0x08006909
 8006974:	08006a85 	.word	0x08006a85
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	1d1a      	adds	r2, r3, #4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	602a      	str	r2, [r5, #0]
 8006980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006988:	2301      	movs	r3, #1
 800698a:	e0a4      	b.n	8006ad6 <_printf_i+0x1f6>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	6829      	ldr	r1, [r5, #0]
 8006990:	0606      	lsls	r6, r0, #24
 8006992:	f101 0304 	add.w	r3, r1, #4
 8006996:	d50a      	bpl.n	80069ae <_printf_i+0xce>
 8006998:	680e      	ldr	r6, [r1, #0]
 800699a:	602b      	str	r3, [r5, #0]
 800699c:	2e00      	cmp	r6, #0
 800699e:	da03      	bge.n	80069a8 <_printf_i+0xc8>
 80069a0:	232d      	movs	r3, #45	; 0x2d
 80069a2:	4276      	negs	r6, r6
 80069a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069a8:	230a      	movs	r3, #10
 80069aa:	485e      	ldr	r0, [pc, #376]	; (8006b24 <_printf_i+0x244>)
 80069ac:	e019      	b.n	80069e2 <_printf_i+0x102>
 80069ae:	680e      	ldr	r6, [r1, #0]
 80069b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069b4:	602b      	str	r3, [r5, #0]
 80069b6:	bf18      	it	ne
 80069b8:	b236      	sxthne	r6, r6
 80069ba:	e7ef      	b.n	800699c <_printf_i+0xbc>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	6820      	ldr	r0, [r4, #0]
 80069c0:	1d19      	adds	r1, r3, #4
 80069c2:	6029      	str	r1, [r5, #0]
 80069c4:	0601      	lsls	r1, r0, #24
 80069c6:	d501      	bpl.n	80069cc <_printf_i+0xec>
 80069c8:	681e      	ldr	r6, [r3, #0]
 80069ca:	e002      	b.n	80069d2 <_printf_i+0xf2>
 80069cc:	0646      	lsls	r6, r0, #25
 80069ce:	d5fb      	bpl.n	80069c8 <_printf_i+0xe8>
 80069d0:	881e      	ldrh	r6, [r3, #0]
 80069d2:	2f6f      	cmp	r7, #111	; 0x6f
 80069d4:	bf0c      	ite	eq
 80069d6:	2308      	moveq	r3, #8
 80069d8:	230a      	movne	r3, #10
 80069da:	4852      	ldr	r0, [pc, #328]	; (8006b24 <_printf_i+0x244>)
 80069dc:	2100      	movs	r1, #0
 80069de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069e2:	6865      	ldr	r5, [r4, #4]
 80069e4:	2d00      	cmp	r5, #0
 80069e6:	bfa8      	it	ge
 80069e8:	6821      	ldrge	r1, [r4, #0]
 80069ea:	60a5      	str	r5, [r4, #8]
 80069ec:	bfa4      	itt	ge
 80069ee:	f021 0104 	bicge.w	r1, r1, #4
 80069f2:	6021      	strge	r1, [r4, #0]
 80069f4:	b90e      	cbnz	r6, 80069fa <_printf_i+0x11a>
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	d04d      	beq.n	8006a96 <_printf_i+0x1b6>
 80069fa:	4615      	mov	r5, r2
 80069fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a00:	fb03 6711 	mls	r7, r3, r1, r6
 8006a04:	5dc7      	ldrb	r7, [r0, r7]
 8006a06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a0a:	4637      	mov	r7, r6
 8006a0c:	42bb      	cmp	r3, r7
 8006a0e:	460e      	mov	r6, r1
 8006a10:	d9f4      	bls.n	80069fc <_printf_i+0x11c>
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d10b      	bne.n	8006a2e <_printf_i+0x14e>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	07de      	lsls	r6, r3, #31
 8006a1a:	d508      	bpl.n	8006a2e <_printf_i+0x14e>
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	6861      	ldr	r1, [r4, #4]
 8006a20:	4299      	cmp	r1, r3
 8006a22:	bfde      	ittt	le
 8006a24:	2330      	movle	r3, #48	; 0x30
 8006a26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a2e:	1b52      	subs	r2, r2, r5
 8006a30:	6122      	str	r2, [r4, #16]
 8006a32:	464b      	mov	r3, r9
 8006a34:	4621      	mov	r1, r4
 8006a36:	4640      	mov	r0, r8
 8006a38:	f8cd a000 	str.w	sl, [sp]
 8006a3c:	aa03      	add	r2, sp, #12
 8006a3e:	f7ff fedf 	bl	8006800 <_printf_common>
 8006a42:	3001      	adds	r0, #1
 8006a44:	d14c      	bne.n	8006ae0 <_printf_i+0x200>
 8006a46:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4a:	b004      	add	sp, #16
 8006a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a50:	4834      	ldr	r0, [pc, #208]	; (8006b24 <_printf_i+0x244>)
 8006a52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a56:	6829      	ldr	r1, [r5, #0]
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a5e:	6029      	str	r1, [r5, #0]
 8006a60:	061d      	lsls	r5, r3, #24
 8006a62:	d514      	bpl.n	8006a8e <_printf_i+0x1ae>
 8006a64:	07df      	lsls	r7, r3, #31
 8006a66:	bf44      	itt	mi
 8006a68:	f043 0320 	orrmi.w	r3, r3, #32
 8006a6c:	6023      	strmi	r3, [r4, #0]
 8006a6e:	b91e      	cbnz	r6, 8006a78 <_printf_i+0x198>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	f023 0320 	bic.w	r3, r3, #32
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	2310      	movs	r3, #16
 8006a7a:	e7af      	b.n	80069dc <_printf_i+0xfc>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	f043 0320 	orr.w	r3, r3, #32
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	2378      	movs	r3, #120	; 0x78
 8006a86:	4828      	ldr	r0, [pc, #160]	; (8006b28 <_printf_i+0x248>)
 8006a88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a8c:	e7e3      	b.n	8006a56 <_printf_i+0x176>
 8006a8e:	0659      	lsls	r1, r3, #25
 8006a90:	bf48      	it	mi
 8006a92:	b2b6      	uxthmi	r6, r6
 8006a94:	e7e6      	b.n	8006a64 <_printf_i+0x184>
 8006a96:	4615      	mov	r5, r2
 8006a98:	e7bb      	b.n	8006a12 <_printf_i+0x132>
 8006a9a:	682b      	ldr	r3, [r5, #0]
 8006a9c:	6826      	ldr	r6, [r4, #0]
 8006a9e:	1d18      	adds	r0, r3, #4
 8006aa0:	6961      	ldr	r1, [r4, #20]
 8006aa2:	6028      	str	r0, [r5, #0]
 8006aa4:	0635      	lsls	r5, r6, #24
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	d501      	bpl.n	8006aae <_printf_i+0x1ce>
 8006aaa:	6019      	str	r1, [r3, #0]
 8006aac:	e002      	b.n	8006ab4 <_printf_i+0x1d4>
 8006aae:	0670      	lsls	r0, r6, #25
 8006ab0:	d5fb      	bpl.n	8006aaa <_printf_i+0x1ca>
 8006ab2:	8019      	strh	r1, [r3, #0]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4615      	mov	r5, r2
 8006ab8:	6123      	str	r3, [r4, #16]
 8006aba:	e7ba      	b.n	8006a32 <_printf_i+0x152>
 8006abc:	682b      	ldr	r3, [r5, #0]
 8006abe:	2100      	movs	r1, #0
 8006ac0:	1d1a      	adds	r2, r3, #4
 8006ac2:	602a      	str	r2, [r5, #0]
 8006ac4:	681d      	ldr	r5, [r3, #0]
 8006ac6:	6862      	ldr	r2, [r4, #4]
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 fb13 	bl	80070f4 <memchr>
 8006ace:	b108      	cbz	r0, 8006ad4 <_printf_i+0x1f4>
 8006ad0:	1b40      	subs	r0, r0, r5
 8006ad2:	6060      	str	r0, [r4, #4]
 8006ad4:	6863      	ldr	r3, [r4, #4]
 8006ad6:	6123      	str	r3, [r4, #16]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ade:	e7a8      	b.n	8006a32 <_printf_i+0x152>
 8006ae0:	462a      	mov	r2, r5
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	47d0      	blx	sl
 8006aea:	3001      	adds	r0, #1
 8006aec:	d0ab      	beq.n	8006a46 <_printf_i+0x166>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	079b      	lsls	r3, r3, #30
 8006af2:	d413      	bmi.n	8006b1c <_printf_i+0x23c>
 8006af4:	68e0      	ldr	r0, [r4, #12]
 8006af6:	9b03      	ldr	r3, [sp, #12]
 8006af8:	4298      	cmp	r0, r3
 8006afa:	bfb8      	it	lt
 8006afc:	4618      	movlt	r0, r3
 8006afe:	e7a4      	b.n	8006a4a <_printf_i+0x16a>
 8006b00:	2301      	movs	r3, #1
 8006b02:	4632      	mov	r2, r6
 8006b04:	4649      	mov	r1, r9
 8006b06:	4640      	mov	r0, r8
 8006b08:	47d0      	blx	sl
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d09b      	beq.n	8006a46 <_printf_i+0x166>
 8006b0e:	3501      	adds	r5, #1
 8006b10:	68e3      	ldr	r3, [r4, #12]
 8006b12:	9903      	ldr	r1, [sp, #12]
 8006b14:	1a5b      	subs	r3, r3, r1
 8006b16:	42ab      	cmp	r3, r5
 8006b18:	dcf2      	bgt.n	8006b00 <_printf_i+0x220>
 8006b1a:	e7eb      	b.n	8006af4 <_printf_i+0x214>
 8006b1c:	2500      	movs	r5, #0
 8006b1e:	f104 0619 	add.w	r6, r4, #25
 8006b22:	e7f5      	b.n	8006b10 <_printf_i+0x230>
 8006b24:	080075f1 	.word	0x080075f1
 8006b28:	08007602 	.word	0x08007602

08006b2c <__swbuf_r>:
 8006b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2e:	460e      	mov	r6, r1
 8006b30:	4614      	mov	r4, r2
 8006b32:	4605      	mov	r5, r0
 8006b34:	b118      	cbz	r0, 8006b3e <__swbuf_r+0x12>
 8006b36:	6983      	ldr	r3, [r0, #24]
 8006b38:	b90b      	cbnz	r3, 8006b3e <__swbuf_r+0x12>
 8006b3a:	f000 f9d5 	bl	8006ee8 <__sinit>
 8006b3e:	4b21      	ldr	r3, [pc, #132]	; (8006bc4 <__swbuf_r+0x98>)
 8006b40:	429c      	cmp	r4, r3
 8006b42:	d12b      	bne.n	8006b9c <__swbuf_r+0x70>
 8006b44:	686c      	ldr	r4, [r5, #4]
 8006b46:	69a3      	ldr	r3, [r4, #24]
 8006b48:	60a3      	str	r3, [r4, #8]
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	071a      	lsls	r2, r3, #28
 8006b4e:	d52f      	bpl.n	8006bb0 <__swbuf_r+0x84>
 8006b50:	6923      	ldr	r3, [r4, #16]
 8006b52:	b36b      	cbz	r3, 8006bb0 <__swbuf_r+0x84>
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	6820      	ldr	r0, [r4, #0]
 8006b58:	b2f6      	uxtb	r6, r6
 8006b5a:	1ac0      	subs	r0, r0, r3
 8006b5c:	6963      	ldr	r3, [r4, #20]
 8006b5e:	4637      	mov	r7, r6
 8006b60:	4283      	cmp	r3, r0
 8006b62:	dc04      	bgt.n	8006b6e <__swbuf_r+0x42>
 8006b64:	4621      	mov	r1, r4
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 f92a 	bl	8006dc0 <_fflush_r>
 8006b6c:	bb30      	cbnz	r0, 8006bbc <__swbuf_r+0x90>
 8006b6e:	68a3      	ldr	r3, [r4, #8]
 8006b70:	3001      	adds	r0, #1
 8006b72:	3b01      	subs	r3, #1
 8006b74:	60a3      	str	r3, [r4, #8]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	6022      	str	r2, [r4, #0]
 8006b7c:	701e      	strb	r6, [r3, #0]
 8006b7e:	6963      	ldr	r3, [r4, #20]
 8006b80:	4283      	cmp	r3, r0
 8006b82:	d004      	beq.n	8006b8e <__swbuf_r+0x62>
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	07db      	lsls	r3, r3, #31
 8006b88:	d506      	bpl.n	8006b98 <__swbuf_r+0x6c>
 8006b8a:	2e0a      	cmp	r6, #10
 8006b8c:	d104      	bne.n	8006b98 <__swbuf_r+0x6c>
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 f915 	bl	8006dc0 <_fflush_r>
 8006b96:	b988      	cbnz	r0, 8006bbc <__swbuf_r+0x90>
 8006b98:	4638      	mov	r0, r7
 8006b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	; (8006bc8 <__swbuf_r+0x9c>)
 8006b9e:	429c      	cmp	r4, r3
 8006ba0:	d101      	bne.n	8006ba6 <__swbuf_r+0x7a>
 8006ba2:	68ac      	ldr	r4, [r5, #8]
 8006ba4:	e7cf      	b.n	8006b46 <__swbuf_r+0x1a>
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <__swbuf_r+0xa0>)
 8006ba8:	429c      	cmp	r4, r3
 8006baa:	bf08      	it	eq
 8006bac:	68ec      	ldreq	r4, [r5, #12]
 8006bae:	e7ca      	b.n	8006b46 <__swbuf_r+0x1a>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 f80c 	bl	8006bd0 <__swsetup_r>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d0cb      	beq.n	8006b54 <__swbuf_r+0x28>
 8006bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8006bc0:	e7ea      	b.n	8006b98 <__swbuf_r+0x6c>
 8006bc2:	bf00      	nop
 8006bc4:	08007634 	.word	0x08007634
 8006bc8:	08007654 	.word	0x08007654
 8006bcc:	08007614 	.word	0x08007614

08006bd0 <__swsetup_r>:
 8006bd0:	4b32      	ldr	r3, [pc, #200]	; (8006c9c <__swsetup_r+0xcc>)
 8006bd2:	b570      	push	{r4, r5, r6, lr}
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	b125      	cbz	r5, 8006be6 <__swsetup_r+0x16>
 8006bdc:	69ab      	ldr	r3, [r5, #24]
 8006bde:	b913      	cbnz	r3, 8006be6 <__swsetup_r+0x16>
 8006be0:	4628      	mov	r0, r5
 8006be2:	f000 f981 	bl	8006ee8 <__sinit>
 8006be6:	4b2e      	ldr	r3, [pc, #184]	; (8006ca0 <__swsetup_r+0xd0>)
 8006be8:	429c      	cmp	r4, r3
 8006bea:	d10f      	bne.n	8006c0c <__swsetup_r+0x3c>
 8006bec:	686c      	ldr	r4, [r5, #4]
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bf4:	0719      	lsls	r1, r3, #28
 8006bf6:	d42c      	bmi.n	8006c52 <__swsetup_r+0x82>
 8006bf8:	06dd      	lsls	r5, r3, #27
 8006bfa:	d411      	bmi.n	8006c20 <__swsetup_r+0x50>
 8006bfc:	2309      	movs	r3, #9
 8006bfe:	6033      	str	r3, [r6, #0]
 8006c00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	e03e      	b.n	8006c8a <__swsetup_r+0xba>
 8006c0c:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <__swsetup_r+0xd4>)
 8006c0e:	429c      	cmp	r4, r3
 8006c10:	d101      	bne.n	8006c16 <__swsetup_r+0x46>
 8006c12:	68ac      	ldr	r4, [r5, #8]
 8006c14:	e7eb      	b.n	8006bee <__swsetup_r+0x1e>
 8006c16:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <__swsetup_r+0xd8>)
 8006c18:	429c      	cmp	r4, r3
 8006c1a:	bf08      	it	eq
 8006c1c:	68ec      	ldreq	r4, [r5, #12]
 8006c1e:	e7e6      	b.n	8006bee <__swsetup_r+0x1e>
 8006c20:	0758      	lsls	r0, r3, #29
 8006c22:	d512      	bpl.n	8006c4a <__swsetup_r+0x7a>
 8006c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c26:	b141      	cbz	r1, 8006c3a <__swsetup_r+0x6a>
 8006c28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c2c:	4299      	cmp	r1, r3
 8006c2e:	d002      	beq.n	8006c36 <__swsetup_r+0x66>
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 fa6d 	bl	8007110 <_free_r>
 8006c36:	2300      	movs	r3, #0
 8006c38:	6363      	str	r3, [r4, #52]	; 0x34
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	2300      	movs	r3, #0
 8006c44:	6063      	str	r3, [r4, #4]
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f043 0308 	orr.w	r3, r3, #8
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	6923      	ldr	r3, [r4, #16]
 8006c54:	b94b      	cbnz	r3, 8006c6a <__swsetup_r+0x9a>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c60:	d003      	beq.n	8006c6a <__swsetup_r+0x9a>
 8006c62:	4621      	mov	r1, r4
 8006c64:	4630      	mov	r0, r6
 8006c66:	f000 fa05 	bl	8007074 <__smakebuf_r>
 8006c6a:	89a0      	ldrh	r0, [r4, #12]
 8006c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c70:	f010 0301 	ands.w	r3, r0, #1
 8006c74:	d00a      	beq.n	8006c8c <__swsetup_r+0xbc>
 8006c76:	2300      	movs	r3, #0
 8006c78:	60a3      	str	r3, [r4, #8]
 8006c7a:	6963      	ldr	r3, [r4, #20]
 8006c7c:	425b      	negs	r3, r3
 8006c7e:	61a3      	str	r3, [r4, #24]
 8006c80:	6923      	ldr	r3, [r4, #16]
 8006c82:	b943      	cbnz	r3, 8006c96 <__swsetup_r+0xc6>
 8006c84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c88:	d1ba      	bne.n	8006c00 <__swsetup_r+0x30>
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	0781      	lsls	r1, r0, #30
 8006c8e:	bf58      	it	pl
 8006c90:	6963      	ldrpl	r3, [r4, #20]
 8006c92:	60a3      	str	r3, [r4, #8]
 8006c94:	e7f4      	b.n	8006c80 <__swsetup_r+0xb0>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e7f7      	b.n	8006c8a <__swsetup_r+0xba>
 8006c9a:	bf00      	nop
 8006c9c:	20000088 	.word	0x20000088
 8006ca0:	08007634 	.word	0x08007634
 8006ca4:	08007654 	.word	0x08007654
 8006ca8:	08007614 	.word	0x08007614

08006cac <abort>:
 8006cac:	2006      	movs	r0, #6
 8006cae:	b508      	push	{r3, lr}
 8006cb0:	f000 fb42 	bl	8007338 <raise>
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	f7fa fe3a 	bl	800192e <_exit>
	...

08006cbc <__sflush_r>:
 8006cbc:	898a      	ldrh	r2, [r1, #12]
 8006cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	0710      	lsls	r0, r2, #28
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	d457      	bmi.n	8006d78 <__sflush_r+0xbc>
 8006cc8:	684b      	ldr	r3, [r1, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dc04      	bgt.n	8006cd8 <__sflush_r+0x1c>
 8006cce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dc01      	bgt.n	8006cd8 <__sflush_r+0x1c>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	d0fa      	beq.n	8006cd4 <__sflush_r+0x18>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ce4:	682f      	ldr	r7, [r5, #0]
 8006ce6:	602b      	str	r3, [r5, #0]
 8006ce8:	d032      	beq.n	8006d50 <__sflush_r+0x94>
 8006cea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	075a      	lsls	r2, r3, #29
 8006cf0:	d505      	bpl.n	8006cfe <__sflush_r+0x42>
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	1ac0      	subs	r0, r0, r3
 8006cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf8:	b10b      	cbz	r3, 8006cfe <__sflush_r+0x42>
 8006cfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cfc:	1ac0      	subs	r0, r0, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4602      	mov	r2, r0
 8006d02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d04:	4628      	mov	r0, r5
 8006d06:	6a21      	ldr	r1, [r4, #32]
 8006d08:	47b0      	blx	r6
 8006d0a:	1c43      	adds	r3, r0, #1
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	d106      	bne.n	8006d1e <__sflush_r+0x62>
 8006d10:	6829      	ldr	r1, [r5, #0]
 8006d12:	291d      	cmp	r1, #29
 8006d14:	d82c      	bhi.n	8006d70 <__sflush_r+0xb4>
 8006d16:	4a29      	ldr	r2, [pc, #164]	; (8006dbc <__sflush_r+0x100>)
 8006d18:	40ca      	lsrs	r2, r1
 8006d1a:	07d6      	lsls	r6, r2, #31
 8006d1c:	d528      	bpl.n	8006d70 <__sflush_r+0xb4>
 8006d1e:	2200      	movs	r2, #0
 8006d20:	6062      	str	r2, [r4, #4]
 8006d22:	6922      	ldr	r2, [r4, #16]
 8006d24:	04d9      	lsls	r1, r3, #19
 8006d26:	6022      	str	r2, [r4, #0]
 8006d28:	d504      	bpl.n	8006d34 <__sflush_r+0x78>
 8006d2a:	1c42      	adds	r2, r0, #1
 8006d2c:	d101      	bne.n	8006d32 <__sflush_r+0x76>
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	b903      	cbnz	r3, 8006d34 <__sflush_r+0x78>
 8006d32:	6560      	str	r0, [r4, #84]	; 0x54
 8006d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d36:	602f      	str	r7, [r5, #0]
 8006d38:	2900      	cmp	r1, #0
 8006d3a:	d0cb      	beq.n	8006cd4 <__sflush_r+0x18>
 8006d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d40:	4299      	cmp	r1, r3
 8006d42:	d002      	beq.n	8006d4a <__sflush_r+0x8e>
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 f9e3 	bl	8007110 <_free_r>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006d4e:	e7c2      	b.n	8006cd6 <__sflush_r+0x1a>
 8006d50:	6a21      	ldr	r1, [r4, #32]
 8006d52:	2301      	movs	r3, #1
 8006d54:	4628      	mov	r0, r5
 8006d56:	47b0      	blx	r6
 8006d58:	1c41      	adds	r1, r0, #1
 8006d5a:	d1c7      	bne.n	8006cec <__sflush_r+0x30>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0c4      	beq.n	8006cec <__sflush_r+0x30>
 8006d62:	2b1d      	cmp	r3, #29
 8006d64:	d001      	beq.n	8006d6a <__sflush_r+0xae>
 8006d66:	2b16      	cmp	r3, #22
 8006d68:	d101      	bne.n	8006d6e <__sflush_r+0xb2>
 8006d6a:	602f      	str	r7, [r5, #0]
 8006d6c:	e7b2      	b.n	8006cd4 <__sflush_r+0x18>
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	e7ae      	b.n	8006cd6 <__sflush_r+0x1a>
 8006d78:	690f      	ldr	r7, [r1, #16]
 8006d7a:	2f00      	cmp	r7, #0
 8006d7c:	d0aa      	beq.n	8006cd4 <__sflush_r+0x18>
 8006d7e:	0793      	lsls	r3, r2, #30
 8006d80:	bf18      	it	ne
 8006d82:	2300      	movne	r3, #0
 8006d84:	680e      	ldr	r6, [r1, #0]
 8006d86:	bf08      	it	eq
 8006d88:	694b      	ldreq	r3, [r1, #20]
 8006d8a:	1bf6      	subs	r6, r6, r7
 8006d8c:	600f      	str	r7, [r1, #0]
 8006d8e:	608b      	str	r3, [r1, #8]
 8006d90:	2e00      	cmp	r6, #0
 8006d92:	dd9f      	ble.n	8006cd4 <__sflush_r+0x18>
 8006d94:	4633      	mov	r3, r6
 8006d96:	463a      	mov	r2, r7
 8006d98:	4628      	mov	r0, r5
 8006d9a:	6a21      	ldr	r1, [r4, #32]
 8006d9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006da0:	47e0      	blx	ip
 8006da2:	2800      	cmp	r0, #0
 8006da4:	dc06      	bgt.n	8006db4 <__sflush_r+0xf8>
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	e790      	b.n	8006cd6 <__sflush_r+0x1a>
 8006db4:	4407      	add	r7, r0
 8006db6:	1a36      	subs	r6, r6, r0
 8006db8:	e7ea      	b.n	8006d90 <__sflush_r+0xd4>
 8006dba:	bf00      	nop
 8006dbc:	20400001 	.word	0x20400001

08006dc0 <_fflush_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	690b      	ldr	r3, [r1, #16]
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	b913      	cbnz	r3, 8006dd0 <_fflush_r+0x10>
 8006dca:	2500      	movs	r5, #0
 8006dcc:	4628      	mov	r0, r5
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	b118      	cbz	r0, 8006dda <_fflush_r+0x1a>
 8006dd2:	6983      	ldr	r3, [r0, #24]
 8006dd4:	b90b      	cbnz	r3, 8006dda <_fflush_r+0x1a>
 8006dd6:	f000 f887 	bl	8006ee8 <__sinit>
 8006dda:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <_fflush_r+0x6c>)
 8006ddc:	429c      	cmp	r4, r3
 8006dde:	d11b      	bne.n	8006e18 <_fflush_r+0x58>
 8006de0:	686c      	ldr	r4, [r5, #4]
 8006de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0ef      	beq.n	8006dca <_fflush_r+0xa>
 8006dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dec:	07d0      	lsls	r0, r2, #31
 8006dee:	d404      	bmi.n	8006dfa <_fflush_r+0x3a>
 8006df0:	0599      	lsls	r1, r3, #22
 8006df2:	d402      	bmi.n	8006dfa <_fflush_r+0x3a>
 8006df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006df6:	f000 f915 	bl	8007024 <__retarget_lock_acquire_recursive>
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	f7ff ff5d 	bl	8006cbc <__sflush_r>
 8006e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e04:	4605      	mov	r5, r0
 8006e06:	07da      	lsls	r2, r3, #31
 8006e08:	d4e0      	bmi.n	8006dcc <_fflush_r+0xc>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	059b      	lsls	r3, r3, #22
 8006e0e:	d4dd      	bmi.n	8006dcc <_fflush_r+0xc>
 8006e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e12:	f000 f908 	bl	8007026 <__retarget_lock_release_recursive>
 8006e16:	e7d9      	b.n	8006dcc <_fflush_r+0xc>
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <_fflush_r+0x70>)
 8006e1a:	429c      	cmp	r4, r3
 8006e1c:	d101      	bne.n	8006e22 <_fflush_r+0x62>
 8006e1e:	68ac      	ldr	r4, [r5, #8]
 8006e20:	e7df      	b.n	8006de2 <_fflush_r+0x22>
 8006e22:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <_fflush_r+0x74>)
 8006e24:	429c      	cmp	r4, r3
 8006e26:	bf08      	it	eq
 8006e28:	68ec      	ldreq	r4, [r5, #12]
 8006e2a:	e7da      	b.n	8006de2 <_fflush_r+0x22>
 8006e2c:	08007634 	.word	0x08007634
 8006e30:	08007654 	.word	0x08007654
 8006e34:	08007614 	.word	0x08007614

08006e38 <std>:
 8006e38:	2300      	movs	r3, #0
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e46:	6083      	str	r3, [r0, #8]
 8006e48:	8181      	strh	r1, [r0, #12]
 8006e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e4c:	81c2      	strh	r2, [r0, #14]
 8006e4e:	6183      	str	r3, [r0, #24]
 8006e50:	4619      	mov	r1, r3
 8006e52:	2208      	movs	r2, #8
 8006e54:	305c      	adds	r0, #92	; 0x5c
 8006e56:	f7ff fb73 	bl	8006540 <memset>
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <std+0x38>)
 8006e5c:	6224      	str	r4, [r4, #32]
 8006e5e:	6263      	str	r3, [r4, #36]	; 0x24
 8006e60:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <std+0x3c>)
 8006e62:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e64:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <std+0x40>)
 8006e66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e68:	4b04      	ldr	r3, [pc, #16]	; (8006e7c <std+0x44>)
 8006e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	08007371 	.word	0x08007371
 8006e74:	08007393 	.word	0x08007393
 8006e78:	080073cb 	.word	0x080073cb
 8006e7c:	080073ef 	.word	0x080073ef

08006e80 <_cleanup_r>:
 8006e80:	4901      	ldr	r1, [pc, #4]	; (8006e88 <_cleanup_r+0x8>)
 8006e82:	f000 b8af 	b.w	8006fe4 <_fwalk_reent>
 8006e86:	bf00      	nop
 8006e88:	08006dc1 	.word	0x08006dc1

08006e8c <__sfmoreglue>:
 8006e8c:	2268      	movs	r2, #104	; 0x68
 8006e8e:	b570      	push	{r4, r5, r6, lr}
 8006e90:	1e4d      	subs	r5, r1, #1
 8006e92:	4355      	muls	r5, r2
 8006e94:	460e      	mov	r6, r1
 8006e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e9a:	f000 f9a1 	bl	80071e0 <_malloc_r>
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	b140      	cbz	r0, 8006eb4 <__sfmoreglue+0x28>
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ea8:	300c      	adds	r0, #12
 8006eaa:	60a0      	str	r0, [r4, #8]
 8006eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006eb0:	f7ff fb46 	bl	8006540 <memset>
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}

08006eb8 <__sfp_lock_acquire>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	; (8006ec0 <__sfp_lock_acquire+0x8>)
 8006eba:	f000 b8b3 	b.w	8007024 <__retarget_lock_acquire_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	200002fd 	.word	0x200002fd

08006ec4 <__sfp_lock_release>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	; (8006ecc <__sfp_lock_release+0x8>)
 8006ec6:	f000 b8ae 	b.w	8007026 <__retarget_lock_release_recursive>
 8006eca:	bf00      	nop
 8006ecc:	200002fd 	.word	0x200002fd

08006ed0 <__sinit_lock_acquire>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__sinit_lock_acquire+0x8>)
 8006ed2:	f000 b8a7 	b.w	8007024 <__retarget_lock_acquire_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	200002fe 	.word	0x200002fe

08006edc <__sinit_lock_release>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__sinit_lock_release+0x8>)
 8006ede:	f000 b8a2 	b.w	8007026 <__retarget_lock_release_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	200002fe 	.word	0x200002fe

08006ee8 <__sinit>:
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	4604      	mov	r4, r0
 8006eec:	f7ff fff0 	bl	8006ed0 <__sinit_lock_acquire>
 8006ef0:	69a3      	ldr	r3, [r4, #24]
 8006ef2:	b11b      	cbz	r3, 8006efc <__sinit+0x14>
 8006ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef8:	f7ff bff0 	b.w	8006edc <__sinit_lock_release>
 8006efc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f00:	6523      	str	r3, [r4, #80]	; 0x50
 8006f02:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <__sinit+0x68>)
 8006f04:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <__sinit+0x6c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	bf08      	it	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	4620      	mov	r0, r4
 8006f12:	bf08      	it	eq
 8006f14:	61a3      	streq	r3, [r4, #24]
 8006f16:	f000 f81f 	bl	8006f58 <__sfp>
 8006f1a:	6060      	str	r0, [r4, #4]
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 f81b 	bl	8006f58 <__sfp>
 8006f22:	60a0      	str	r0, [r4, #8]
 8006f24:	4620      	mov	r0, r4
 8006f26:	f000 f817 	bl	8006f58 <__sfp>
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2104      	movs	r1, #4
 8006f2e:	60e0      	str	r0, [r4, #12]
 8006f30:	6860      	ldr	r0, [r4, #4]
 8006f32:	f7ff ff81 	bl	8006e38 <std>
 8006f36:	2201      	movs	r2, #1
 8006f38:	2109      	movs	r1, #9
 8006f3a:	68a0      	ldr	r0, [r4, #8]
 8006f3c:	f7ff ff7c 	bl	8006e38 <std>
 8006f40:	2202      	movs	r2, #2
 8006f42:	2112      	movs	r1, #18
 8006f44:	68e0      	ldr	r0, [r4, #12]
 8006f46:	f7ff ff77 	bl	8006e38 <std>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	61a3      	str	r3, [r4, #24]
 8006f4e:	e7d1      	b.n	8006ef4 <__sinit+0xc>
 8006f50:	080075dc 	.word	0x080075dc
 8006f54:	08006e81 	.word	0x08006e81

08006f58 <__sfp>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	4607      	mov	r7, r0
 8006f5c:	f7ff ffac 	bl	8006eb8 <__sfp_lock_acquire>
 8006f60:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <__sfp+0x84>)
 8006f62:	681e      	ldr	r6, [r3, #0]
 8006f64:	69b3      	ldr	r3, [r6, #24]
 8006f66:	b913      	cbnz	r3, 8006f6e <__sfp+0x16>
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff ffbd 	bl	8006ee8 <__sinit>
 8006f6e:	3648      	adds	r6, #72	; 0x48
 8006f70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	d503      	bpl.n	8006f80 <__sfp+0x28>
 8006f78:	6833      	ldr	r3, [r6, #0]
 8006f7a:	b30b      	cbz	r3, 8006fc0 <__sfp+0x68>
 8006f7c:	6836      	ldr	r6, [r6, #0]
 8006f7e:	e7f7      	b.n	8006f70 <__sfp+0x18>
 8006f80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f84:	b9d5      	cbnz	r5, 8006fbc <__sfp+0x64>
 8006f86:	4b16      	ldr	r3, [pc, #88]	; (8006fe0 <__sfp+0x88>)
 8006f88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f8c:	60e3      	str	r3, [r4, #12]
 8006f8e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f90:	f000 f847 	bl	8007022 <__retarget_lock_init_recursive>
 8006f94:	f7ff ff96 	bl	8006ec4 <__sfp_lock_release>
 8006f98:	2208      	movs	r2, #8
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fa4:	6025      	str	r5, [r4, #0]
 8006fa6:	61a5      	str	r5, [r4, #24]
 8006fa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fac:	f7ff fac8 	bl	8006540 <memset>
 8006fb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fb8:	4620      	mov	r0, r4
 8006fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fbc:	3468      	adds	r4, #104	; 0x68
 8006fbe:	e7d9      	b.n	8006f74 <__sfp+0x1c>
 8006fc0:	2104      	movs	r1, #4
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f7ff ff62 	bl	8006e8c <__sfmoreglue>
 8006fc8:	4604      	mov	r4, r0
 8006fca:	6030      	str	r0, [r6, #0]
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d1d5      	bne.n	8006f7c <__sfp+0x24>
 8006fd0:	f7ff ff78 	bl	8006ec4 <__sfp_lock_release>
 8006fd4:	230c      	movs	r3, #12
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	e7ee      	b.n	8006fb8 <__sfp+0x60>
 8006fda:	bf00      	nop
 8006fdc:	080075dc 	.word	0x080075dc
 8006fe0:	ffff0001 	.word	0xffff0001

08006fe4 <_fwalk_reent>:
 8006fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe8:	4606      	mov	r6, r0
 8006fea:	4688      	mov	r8, r1
 8006fec:	2700      	movs	r7, #0
 8006fee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8006ffa:	d505      	bpl.n	8007008 <_fwalk_reent+0x24>
 8006ffc:	6824      	ldr	r4, [r4, #0]
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	d1f7      	bne.n	8006ff2 <_fwalk_reent+0xe>
 8007002:	4638      	mov	r0, r7
 8007004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007008:	89ab      	ldrh	r3, [r5, #12]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d907      	bls.n	800701e <_fwalk_reent+0x3a>
 800700e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007012:	3301      	adds	r3, #1
 8007014:	d003      	beq.n	800701e <_fwalk_reent+0x3a>
 8007016:	4629      	mov	r1, r5
 8007018:	4630      	mov	r0, r6
 800701a:	47c0      	blx	r8
 800701c:	4307      	orrs	r7, r0
 800701e:	3568      	adds	r5, #104	; 0x68
 8007020:	e7e9      	b.n	8006ff6 <_fwalk_reent+0x12>

08007022 <__retarget_lock_init_recursive>:
 8007022:	4770      	bx	lr

08007024 <__retarget_lock_acquire_recursive>:
 8007024:	4770      	bx	lr

08007026 <__retarget_lock_release_recursive>:
 8007026:	4770      	bx	lr

08007028 <__swhatbuf_r>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	460e      	mov	r6, r1
 800702c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007030:	4614      	mov	r4, r2
 8007032:	2900      	cmp	r1, #0
 8007034:	461d      	mov	r5, r3
 8007036:	b096      	sub	sp, #88	; 0x58
 8007038:	da08      	bge.n	800704c <__swhatbuf_r+0x24>
 800703a:	2200      	movs	r2, #0
 800703c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007040:	602a      	str	r2, [r5, #0]
 8007042:	061a      	lsls	r2, r3, #24
 8007044:	d410      	bmi.n	8007068 <__swhatbuf_r+0x40>
 8007046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800704a:	e00e      	b.n	800706a <__swhatbuf_r+0x42>
 800704c:	466a      	mov	r2, sp
 800704e:	f000 f9f5 	bl	800743c <_fstat_r>
 8007052:	2800      	cmp	r0, #0
 8007054:	dbf1      	blt.n	800703a <__swhatbuf_r+0x12>
 8007056:	9a01      	ldr	r2, [sp, #4]
 8007058:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800705c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007060:	425a      	negs	r2, r3
 8007062:	415a      	adcs	r2, r3
 8007064:	602a      	str	r2, [r5, #0]
 8007066:	e7ee      	b.n	8007046 <__swhatbuf_r+0x1e>
 8007068:	2340      	movs	r3, #64	; 0x40
 800706a:	2000      	movs	r0, #0
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	b016      	add	sp, #88	; 0x58
 8007070:	bd70      	pop	{r4, r5, r6, pc}
	...

08007074 <__smakebuf_r>:
 8007074:	898b      	ldrh	r3, [r1, #12]
 8007076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007078:	079d      	lsls	r5, r3, #30
 800707a:	4606      	mov	r6, r0
 800707c:	460c      	mov	r4, r1
 800707e:	d507      	bpl.n	8007090 <__smakebuf_r+0x1c>
 8007080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	6123      	str	r3, [r4, #16]
 8007088:	2301      	movs	r3, #1
 800708a:	6163      	str	r3, [r4, #20]
 800708c:	b002      	add	sp, #8
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	466a      	mov	r2, sp
 8007092:	ab01      	add	r3, sp, #4
 8007094:	f7ff ffc8 	bl	8007028 <__swhatbuf_r>
 8007098:	9900      	ldr	r1, [sp, #0]
 800709a:	4605      	mov	r5, r0
 800709c:	4630      	mov	r0, r6
 800709e:	f000 f89f 	bl	80071e0 <_malloc_r>
 80070a2:	b948      	cbnz	r0, 80070b8 <__smakebuf_r+0x44>
 80070a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a8:	059a      	lsls	r2, r3, #22
 80070aa:	d4ef      	bmi.n	800708c <__smakebuf_r+0x18>
 80070ac:	f023 0303 	bic.w	r3, r3, #3
 80070b0:	f043 0302 	orr.w	r3, r3, #2
 80070b4:	81a3      	strh	r3, [r4, #12]
 80070b6:	e7e3      	b.n	8007080 <__smakebuf_r+0xc>
 80070b8:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <__smakebuf_r+0x7c>)
 80070ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	6020      	str	r0, [r4, #0]
 80070c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c4:	81a3      	strh	r3, [r4, #12]
 80070c6:	9b00      	ldr	r3, [sp, #0]
 80070c8:	6120      	str	r0, [r4, #16]
 80070ca:	6163      	str	r3, [r4, #20]
 80070cc:	9b01      	ldr	r3, [sp, #4]
 80070ce:	b15b      	cbz	r3, 80070e8 <__smakebuf_r+0x74>
 80070d0:	4630      	mov	r0, r6
 80070d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070d6:	f000 f9c3 	bl	8007460 <_isatty_r>
 80070da:	b128      	cbz	r0, 80070e8 <__smakebuf_r+0x74>
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	f023 0303 	bic.w	r3, r3, #3
 80070e2:	f043 0301 	orr.w	r3, r3, #1
 80070e6:	81a3      	strh	r3, [r4, #12]
 80070e8:	89a0      	ldrh	r0, [r4, #12]
 80070ea:	4305      	orrs	r5, r0
 80070ec:	81a5      	strh	r5, [r4, #12]
 80070ee:	e7cd      	b.n	800708c <__smakebuf_r+0x18>
 80070f0:	08006e81 	.word	0x08006e81

080070f4 <memchr>:
 80070f4:	4603      	mov	r3, r0
 80070f6:	b510      	push	{r4, lr}
 80070f8:	b2c9      	uxtb	r1, r1
 80070fa:	4402      	add	r2, r0
 80070fc:	4293      	cmp	r3, r2
 80070fe:	4618      	mov	r0, r3
 8007100:	d101      	bne.n	8007106 <memchr+0x12>
 8007102:	2000      	movs	r0, #0
 8007104:	e003      	b.n	800710e <memchr+0x1a>
 8007106:	7804      	ldrb	r4, [r0, #0]
 8007108:	3301      	adds	r3, #1
 800710a:	428c      	cmp	r4, r1
 800710c:	d1f6      	bne.n	80070fc <memchr+0x8>
 800710e:	bd10      	pop	{r4, pc}

08007110 <_free_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4605      	mov	r5, r0
 8007114:	2900      	cmp	r1, #0
 8007116:	d040      	beq.n	800719a <_free_r+0x8a>
 8007118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800711c:	1f0c      	subs	r4, r1, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfb8      	it	lt
 8007122:	18e4      	addlt	r4, r4, r3
 8007124:	f000 f9be 	bl	80074a4 <__malloc_lock>
 8007128:	4a1c      	ldr	r2, [pc, #112]	; (800719c <_free_r+0x8c>)
 800712a:	6813      	ldr	r3, [r2, #0]
 800712c:	b933      	cbnz	r3, 800713c <_free_r+0x2c>
 800712e:	6063      	str	r3, [r4, #4]
 8007130:	6014      	str	r4, [r2, #0]
 8007132:	4628      	mov	r0, r5
 8007134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007138:	f000 b9ba 	b.w	80074b0 <__malloc_unlock>
 800713c:	42a3      	cmp	r3, r4
 800713e:	d908      	bls.n	8007152 <_free_r+0x42>
 8007140:	6820      	ldr	r0, [r4, #0]
 8007142:	1821      	adds	r1, r4, r0
 8007144:	428b      	cmp	r3, r1
 8007146:	bf01      	itttt	eq
 8007148:	6819      	ldreq	r1, [r3, #0]
 800714a:	685b      	ldreq	r3, [r3, #4]
 800714c:	1809      	addeq	r1, r1, r0
 800714e:	6021      	streq	r1, [r4, #0]
 8007150:	e7ed      	b.n	800712e <_free_r+0x1e>
 8007152:	461a      	mov	r2, r3
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	b10b      	cbz	r3, 800715c <_free_r+0x4c>
 8007158:	42a3      	cmp	r3, r4
 800715a:	d9fa      	bls.n	8007152 <_free_r+0x42>
 800715c:	6811      	ldr	r1, [r2, #0]
 800715e:	1850      	adds	r0, r2, r1
 8007160:	42a0      	cmp	r0, r4
 8007162:	d10b      	bne.n	800717c <_free_r+0x6c>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	4401      	add	r1, r0
 8007168:	1850      	adds	r0, r2, r1
 800716a:	4283      	cmp	r3, r0
 800716c:	6011      	str	r1, [r2, #0]
 800716e:	d1e0      	bne.n	8007132 <_free_r+0x22>
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	4401      	add	r1, r0
 8007176:	6011      	str	r1, [r2, #0]
 8007178:	6053      	str	r3, [r2, #4]
 800717a:	e7da      	b.n	8007132 <_free_r+0x22>
 800717c:	d902      	bls.n	8007184 <_free_r+0x74>
 800717e:	230c      	movs	r3, #12
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	e7d6      	b.n	8007132 <_free_r+0x22>
 8007184:	6820      	ldr	r0, [r4, #0]
 8007186:	1821      	adds	r1, r4, r0
 8007188:	428b      	cmp	r3, r1
 800718a:	bf01      	itttt	eq
 800718c:	6819      	ldreq	r1, [r3, #0]
 800718e:	685b      	ldreq	r3, [r3, #4]
 8007190:	1809      	addeq	r1, r1, r0
 8007192:	6021      	streq	r1, [r4, #0]
 8007194:	6063      	str	r3, [r4, #4]
 8007196:	6054      	str	r4, [r2, #4]
 8007198:	e7cb      	b.n	8007132 <_free_r+0x22>
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20000300 	.word	0x20000300

080071a0 <sbrk_aligned>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	4e0e      	ldr	r6, [pc, #56]	; (80071dc <sbrk_aligned+0x3c>)
 80071a4:	460c      	mov	r4, r1
 80071a6:	6831      	ldr	r1, [r6, #0]
 80071a8:	4605      	mov	r5, r0
 80071aa:	b911      	cbnz	r1, 80071b2 <sbrk_aligned+0x12>
 80071ac:	f000 f88c 	bl	80072c8 <_sbrk_r>
 80071b0:	6030      	str	r0, [r6, #0]
 80071b2:	4621      	mov	r1, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 f887 	bl	80072c8 <_sbrk_r>
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d00a      	beq.n	80071d4 <sbrk_aligned+0x34>
 80071be:	1cc4      	adds	r4, r0, #3
 80071c0:	f024 0403 	bic.w	r4, r4, #3
 80071c4:	42a0      	cmp	r0, r4
 80071c6:	d007      	beq.n	80071d8 <sbrk_aligned+0x38>
 80071c8:	1a21      	subs	r1, r4, r0
 80071ca:	4628      	mov	r0, r5
 80071cc:	f000 f87c 	bl	80072c8 <_sbrk_r>
 80071d0:	3001      	adds	r0, #1
 80071d2:	d101      	bne.n	80071d8 <sbrk_aligned+0x38>
 80071d4:	f04f 34ff 	mov.w	r4, #4294967295
 80071d8:	4620      	mov	r0, r4
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	20000304 	.word	0x20000304

080071e0 <_malloc_r>:
 80071e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e4:	1ccd      	adds	r5, r1, #3
 80071e6:	f025 0503 	bic.w	r5, r5, #3
 80071ea:	3508      	adds	r5, #8
 80071ec:	2d0c      	cmp	r5, #12
 80071ee:	bf38      	it	cc
 80071f0:	250c      	movcc	r5, #12
 80071f2:	2d00      	cmp	r5, #0
 80071f4:	4607      	mov	r7, r0
 80071f6:	db01      	blt.n	80071fc <_malloc_r+0x1c>
 80071f8:	42a9      	cmp	r1, r5
 80071fa:	d905      	bls.n	8007208 <_malloc_r+0x28>
 80071fc:	230c      	movs	r3, #12
 80071fe:	2600      	movs	r6, #0
 8007200:	603b      	str	r3, [r7, #0]
 8007202:	4630      	mov	r0, r6
 8007204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007208:	4e2e      	ldr	r6, [pc, #184]	; (80072c4 <_malloc_r+0xe4>)
 800720a:	f000 f94b 	bl	80074a4 <__malloc_lock>
 800720e:	6833      	ldr	r3, [r6, #0]
 8007210:	461c      	mov	r4, r3
 8007212:	bb34      	cbnz	r4, 8007262 <_malloc_r+0x82>
 8007214:	4629      	mov	r1, r5
 8007216:	4638      	mov	r0, r7
 8007218:	f7ff ffc2 	bl	80071a0 <sbrk_aligned>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	4604      	mov	r4, r0
 8007220:	d14d      	bne.n	80072be <_malloc_r+0xde>
 8007222:	6834      	ldr	r4, [r6, #0]
 8007224:	4626      	mov	r6, r4
 8007226:	2e00      	cmp	r6, #0
 8007228:	d140      	bne.n	80072ac <_malloc_r+0xcc>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	4631      	mov	r1, r6
 800722e:	4638      	mov	r0, r7
 8007230:	eb04 0803 	add.w	r8, r4, r3
 8007234:	f000 f848 	bl	80072c8 <_sbrk_r>
 8007238:	4580      	cmp	r8, r0
 800723a:	d13a      	bne.n	80072b2 <_malloc_r+0xd2>
 800723c:	6821      	ldr	r1, [r4, #0]
 800723e:	3503      	adds	r5, #3
 8007240:	1a6d      	subs	r5, r5, r1
 8007242:	f025 0503 	bic.w	r5, r5, #3
 8007246:	3508      	adds	r5, #8
 8007248:	2d0c      	cmp	r5, #12
 800724a:	bf38      	it	cc
 800724c:	250c      	movcc	r5, #12
 800724e:	4638      	mov	r0, r7
 8007250:	4629      	mov	r1, r5
 8007252:	f7ff ffa5 	bl	80071a0 <sbrk_aligned>
 8007256:	3001      	adds	r0, #1
 8007258:	d02b      	beq.n	80072b2 <_malloc_r+0xd2>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	442b      	add	r3, r5
 800725e:	6023      	str	r3, [r4, #0]
 8007260:	e00e      	b.n	8007280 <_malloc_r+0xa0>
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	1b52      	subs	r2, r2, r5
 8007266:	d41e      	bmi.n	80072a6 <_malloc_r+0xc6>
 8007268:	2a0b      	cmp	r2, #11
 800726a:	d916      	bls.n	800729a <_malloc_r+0xba>
 800726c:	1961      	adds	r1, r4, r5
 800726e:	42a3      	cmp	r3, r4
 8007270:	6025      	str	r5, [r4, #0]
 8007272:	bf18      	it	ne
 8007274:	6059      	strne	r1, [r3, #4]
 8007276:	6863      	ldr	r3, [r4, #4]
 8007278:	bf08      	it	eq
 800727a:	6031      	streq	r1, [r6, #0]
 800727c:	5162      	str	r2, [r4, r5]
 800727e:	604b      	str	r3, [r1, #4]
 8007280:	4638      	mov	r0, r7
 8007282:	f104 060b 	add.w	r6, r4, #11
 8007286:	f000 f913 	bl	80074b0 <__malloc_unlock>
 800728a:	f026 0607 	bic.w	r6, r6, #7
 800728e:	1d23      	adds	r3, r4, #4
 8007290:	1af2      	subs	r2, r6, r3
 8007292:	d0b6      	beq.n	8007202 <_malloc_r+0x22>
 8007294:	1b9b      	subs	r3, r3, r6
 8007296:	50a3      	str	r3, [r4, r2]
 8007298:	e7b3      	b.n	8007202 <_malloc_r+0x22>
 800729a:	6862      	ldr	r2, [r4, #4]
 800729c:	42a3      	cmp	r3, r4
 800729e:	bf0c      	ite	eq
 80072a0:	6032      	streq	r2, [r6, #0]
 80072a2:	605a      	strne	r2, [r3, #4]
 80072a4:	e7ec      	b.n	8007280 <_malloc_r+0xa0>
 80072a6:	4623      	mov	r3, r4
 80072a8:	6864      	ldr	r4, [r4, #4]
 80072aa:	e7b2      	b.n	8007212 <_malloc_r+0x32>
 80072ac:	4634      	mov	r4, r6
 80072ae:	6876      	ldr	r6, [r6, #4]
 80072b0:	e7b9      	b.n	8007226 <_malloc_r+0x46>
 80072b2:	230c      	movs	r3, #12
 80072b4:	4638      	mov	r0, r7
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	f000 f8fa 	bl	80074b0 <__malloc_unlock>
 80072bc:	e7a1      	b.n	8007202 <_malloc_r+0x22>
 80072be:	6025      	str	r5, [r4, #0]
 80072c0:	e7de      	b.n	8007280 <_malloc_r+0xa0>
 80072c2:	bf00      	nop
 80072c4:	20000300 	.word	0x20000300

080072c8 <_sbrk_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	2300      	movs	r3, #0
 80072cc:	4d05      	ldr	r5, [pc, #20]	; (80072e4 <_sbrk_r+0x1c>)
 80072ce:	4604      	mov	r4, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	602b      	str	r3, [r5, #0]
 80072d4:	f7fa fb9e 	bl	8001a14 <_sbrk>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d102      	bne.n	80072e2 <_sbrk_r+0x1a>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	b103      	cbz	r3, 80072e2 <_sbrk_r+0x1a>
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	20000308 	.word	0x20000308

080072e8 <_raise_r>:
 80072e8:	291f      	cmp	r1, #31
 80072ea:	b538      	push	{r3, r4, r5, lr}
 80072ec:	4604      	mov	r4, r0
 80072ee:	460d      	mov	r5, r1
 80072f0:	d904      	bls.n	80072fc <_raise_r+0x14>
 80072f2:	2316      	movs	r3, #22
 80072f4:	6003      	str	r3, [r0, #0]
 80072f6:	f04f 30ff 	mov.w	r0, #4294967295
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072fe:	b112      	cbz	r2, 8007306 <_raise_r+0x1e>
 8007300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007304:	b94b      	cbnz	r3, 800731a <_raise_r+0x32>
 8007306:	4620      	mov	r0, r4
 8007308:	f000 f830 	bl	800736c <_getpid_r>
 800730c:	462a      	mov	r2, r5
 800730e:	4601      	mov	r1, r0
 8007310:	4620      	mov	r0, r4
 8007312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007316:	f000 b817 	b.w	8007348 <_kill_r>
 800731a:	2b01      	cmp	r3, #1
 800731c:	d00a      	beq.n	8007334 <_raise_r+0x4c>
 800731e:	1c59      	adds	r1, r3, #1
 8007320:	d103      	bne.n	800732a <_raise_r+0x42>
 8007322:	2316      	movs	r3, #22
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	2001      	movs	r0, #1
 8007328:	e7e7      	b.n	80072fa <_raise_r+0x12>
 800732a:	2400      	movs	r4, #0
 800732c:	4628      	mov	r0, r5
 800732e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007332:	4798      	blx	r3
 8007334:	2000      	movs	r0, #0
 8007336:	e7e0      	b.n	80072fa <_raise_r+0x12>

08007338 <raise>:
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <raise+0xc>)
 800733a:	4601      	mov	r1, r0
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	f7ff bfd3 	b.w	80072e8 <_raise_r>
 8007342:	bf00      	nop
 8007344:	20000088 	.word	0x20000088

08007348 <_kill_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	2300      	movs	r3, #0
 800734c:	4d06      	ldr	r5, [pc, #24]	; (8007368 <_kill_r+0x20>)
 800734e:	4604      	mov	r4, r0
 8007350:	4608      	mov	r0, r1
 8007352:	4611      	mov	r1, r2
 8007354:	602b      	str	r3, [r5, #0]
 8007356:	f7fa fada 	bl	800190e <_kill>
 800735a:	1c43      	adds	r3, r0, #1
 800735c:	d102      	bne.n	8007364 <_kill_r+0x1c>
 800735e:	682b      	ldr	r3, [r5, #0]
 8007360:	b103      	cbz	r3, 8007364 <_kill_r+0x1c>
 8007362:	6023      	str	r3, [r4, #0]
 8007364:	bd38      	pop	{r3, r4, r5, pc}
 8007366:	bf00      	nop
 8007368:	20000308 	.word	0x20000308

0800736c <_getpid_r>:
 800736c:	f7fa bac8 	b.w	8001900 <_getpid>

08007370 <__sread>:
 8007370:	b510      	push	{r4, lr}
 8007372:	460c      	mov	r4, r1
 8007374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007378:	f000 f8a0 	bl	80074bc <_read_r>
 800737c:	2800      	cmp	r0, #0
 800737e:	bfab      	itete	ge
 8007380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007382:	89a3      	ldrhlt	r3, [r4, #12]
 8007384:	181b      	addge	r3, r3, r0
 8007386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800738a:	bfac      	ite	ge
 800738c:	6563      	strge	r3, [r4, #84]	; 0x54
 800738e:	81a3      	strhlt	r3, [r4, #12]
 8007390:	bd10      	pop	{r4, pc}

08007392 <__swrite>:
 8007392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	461f      	mov	r7, r3
 8007398:	898b      	ldrh	r3, [r1, #12]
 800739a:	4605      	mov	r5, r0
 800739c:	05db      	lsls	r3, r3, #23
 800739e:	460c      	mov	r4, r1
 80073a0:	4616      	mov	r6, r2
 80073a2:	d505      	bpl.n	80073b0 <__swrite+0x1e>
 80073a4:	2302      	movs	r3, #2
 80073a6:	2200      	movs	r2, #0
 80073a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ac:	f000 f868 	bl	8007480 <_lseek_r>
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	4632      	mov	r2, r6
 80073b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073b8:	81a3      	strh	r3, [r4, #12]
 80073ba:	4628      	mov	r0, r5
 80073bc:	463b      	mov	r3, r7
 80073be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073c6:	f000 b817 	b.w	80073f8 <_write_r>

080073ca <__sseek>:
 80073ca:	b510      	push	{r4, lr}
 80073cc:	460c      	mov	r4, r1
 80073ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d2:	f000 f855 	bl	8007480 <_lseek_r>
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	bf15      	itete	ne
 80073dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80073de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073e6:	81a3      	strheq	r3, [r4, #12]
 80073e8:	bf18      	it	ne
 80073ea:	81a3      	strhne	r3, [r4, #12]
 80073ec:	bd10      	pop	{r4, pc}

080073ee <__sclose>:
 80073ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f2:	f000 b813 	b.w	800741c <_close_r>
	...

080073f8 <_write_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4604      	mov	r4, r0
 80073fc:	4608      	mov	r0, r1
 80073fe:	4611      	mov	r1, r2
 8007400:	2200      	movs	r2, #0
 8007402:	4d05      	ldr	r5, [pc, #20]	; (8007418 <_write_r+0x20>)
 8007404:	602a      	str	r2, [r5, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	f7fa fab8 	bl	800197c <_write>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d102      	bne.n	8007416 <_write_r+0x1e>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b103      	cbz	r3, 8007416 <_write_r+0x1e>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	20000308 	.word	0x20000308

0800741c <_close_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	2300      	movs	r3, #0
 8007420:	4d05      	ldr	r5, [pc, #20]	; (8007438 <_close_r+0x1c>)
 8007422:	4604      	mov	r4, r0
 8007424:	4608      	mov	r0, r1
 8007426:	602b      	str	r3, [r5, #0]
 8007428:	f7fa fac4 	bl	80019b4 <_close>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_close_r+0x1a>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_close_r+0x1a>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	20000308 	.word	0x20000308

0800743c <_fstat_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	2300      	movs	r3, #0
 8007440:	4d06      	ldr	r5, [pc, #24]	; (800745c <_fstat_r+0x20>)
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	4611      	mov	r1, r2
 8007448:	602b      	str	r3, [r5, #0]
 800744a:	f7fa fabe 	bl	80019ca <_fstat>
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	d102      	bne.n	8007458 <_fstat_r+0x1c>
 8007452:	682b      	ldr	r3, [r5, #0]
 8007454:	b103      	cbz	r3, 8007458 <_fstat_r+0x1c>
 8007456:	6023      	str	r3, [r4, #0]
 8007458:	bd38      	pop	{r3, r4, r5, pc}
 800745a:	bf00      	nop
 800745c:	20000308 	.word	0x20000308

08007460 <_isatty_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	2300      	movs	r3, #0
 8007464:	4d05      	ldr	r5, [pc, #20]	; (800747c <_isatty_r+0x1c>)
 8007466:	4604      	mov	r4, r0
 8007468:	4608      	mov	r0, r1
 800746a:	602b      	str	r3, [r5, #0]
 800746c:	f7fa fabc 	bl	80019e8 <_isatty>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d102      	bne.n	800747a <_isatty_r+0x1a>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	b103      	cbz	r3, 800747a <_isatty_r+0x1a>
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	20000308 	.word	0x20000308

08007480 <_lseek_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	4611      	mov	r1, r2
 8007488:	2200      	movs	r2, #0
 800748a:	4d05      	ldr	r5, [pc, #20]	; (80074a0 <_lseek_r+0x20>)
 800748c:	602a      	str	r2, [r5, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	f7fa fab4 	bl	80019fc <_lseek>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_lseek_r+0x1e>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_lseek_r+0x1e>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	20000308 	.word	0x20000308

080074a4 <__malloc_lock>:
 80074a4:	4801      	ldr	r0, [pc, #4]	; (80074ac <__malloc_lock+0x8>)
 80074a6:	f7ff bdbd 	b.w	8007024 <__retarget_lock_acquire_recursive>
 80074aa:	bf00      	nop
 80074ac:	200002fc 	.word	0x200002fc

080074b0 <__malloc_unlock>:
 80074b0:	4801      	ldr	r0, [pc, #4]	; (80074b8 <__malloc_unlock+0x8>)
 80074b2:	f7ff bdb8 	b.w	8007026 <__retarget_lock_release_recursive>
 80074b6:	bf00      	nop
 80074b8:	200002fc 	.word	0x200002fc

080074bc <_read_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4604      	mov	r4, r0
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	2200      	movs	r2, #0
 80074c6:	4d05      	ldr	r5, [pc, #20]	; (80074dc <_read_r+0x20>)
 80074c8:	602a      	str	r2, [r5, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f7fa fa39 	bl	8001942 <_read>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_read_r+0x1e>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_read_r+0x1e>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	20000308 	.word	0x20000308

080074e0 <_init>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	bf00      	nop
 80074e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e6:	bc08      	pop	{r3}
 80074e8:	469e      	mov	lr, r3
 80074ea:	4770      	bx	lr

080074ec <_fini>:
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	bf00      	nop
 80074f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f2:	bc08      	pop	{r3}
 80074f4:	469e      	mov	lr, r3
 80074f6:	4770      	bx	lr
