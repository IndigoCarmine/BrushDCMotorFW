
BrushDCMotorFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007744  08007744  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  08007744  08007744  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007744  08007744  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007744  08007744  00017744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800774c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200000ec  08007838  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08007838  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f4c  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003896  00000000  00000000  00032061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  000358f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00036ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b642  00000000  00000000  00037ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001670d  00000000  00000000  00053102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ea0  00000000  00000000  0006980f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd6af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005160  00000000  00000000  000fd700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ec 	.word	0x200000ec
 8000128:	00000000 	.word	0x00000000
 800012c:	080075b0 	.word	0x080075b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f0 	.word	0x200000f0
 8000148:	080075b0 	.word	0x080075b0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2iz>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30f      	bcc.n	800071e <__aeabi_f2iz+0x2a>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d90d      	bls.n	8000724 <__aeabi_f2iz+0x30>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	bf18      	it	ne
 800071a:	4240      	negne	r0, r0
 800071c:	4770      	bx	lr
 800071e:	f04f 0000 	mov.w	r0, #0
 8000722:	4770      	bx	lr
 8000724:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000728:	d101      	bne.n	800072e <__aeabi_f2iz+0x3a>
 800072a:	0242      	lsls	r2, r0, #9
 800072c:	d105      	bne.n	800073a <__aeabi_f2iz+0x46>
 800072e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000732:	bf08      	it	eq
 8000734:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr

08000740 <PID_Update>:
#include "PID.h"
#include "math.h"



float PID_Update(PID *pid,float now){
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]

	float error = pid->target - now;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6a1b      	ldr	r3, [r3, #32]
 800074e:	6839      	ldr	r1, [r7, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fcff 	bl	8000154 <__aeabi_fsub>
 8000756:	4603      	mov	r3, r0
 8000758:	60bb      	str	r3, [r7, #8]
	pid->Integral += (pid->PreError + error)/2*pid->dt;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	69dc      	ldr	r4, [r3, #28]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	68b9      	ldr	r1, [r7, #8]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fcf7 	bl	8000158 <__addsf3>
 800076a:	4603      	mov	r3, r0
 800076c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fead 	bl	80004d0 <__aeabi_fdiv>
 8000776:	4603      	mov	r3, r0
 8000778:	461a      	mov	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	4619      	mov	r1, r3
 8000780:	4610      	mov	r0, r2
 8000782:	f7ff fdf1 	bl	8000368 <__aeabi_fmul>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	4620      	mov	r0, r4
 800078c:	f7ff fce4 	bl	8000158 <__addsf3>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	61da      	str	r2, [r3, #28]

	float out =
			pid->PGain * error +
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fde2 	bl	8000368 <__aeabi_fmul>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461c      	mov	r4, r3
			pid->IGain * pid->Integral +
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	4619      	mov	r1, r3
 80007b2:	4610      	mov	r0, r2
 80007b4:	f7ff fdd8 	bl	8000368 <__aeabi_fmul>
 80007b8:	4603      	mov	r3, r0
			pid->PGain * error +
 80007ba:	4619      	mov	r1, r3
 80007bc:	4620      	mov	r0, r4
 80007be:	f7ff fccb 	bl	8000158 <__addsf3>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461d      	mov	r5, r3
			pid->DGain * (error - pid->PreError)/pid->dt;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689c      	ldr	r4, [r3, #8]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4619      	mov	r1, r3
 80007d0:	68b8      	ldr	r0, [r7, #8]
 80007d2:	f7ff fcbf 	bl	8000154 <__aeabi_fsub>
 80007d6:	4603      	mov	r3, r0
 80007d8:	4619      	mov	r1, r3
 80007da:	4620      	mov	r0, r4
 80007dc:	f7ff fdc4 	bl	8000368 <__aeabi_fmul>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4610      	mov	r0, r2
 80007ec:	f7ff fe70 	bl	80004d0 <__aeabi_fdiv>
 80007f0:	4603      	mov	r3, r0
	float out =
 80007f2:	4619      	mov	r1, r3
 80007f4:	4628      	mov	r0, r5
 80007f6:	f7ff fcaf 	bl	8000158 <__addsf3>
 80007fa:	4603      	mov	r3, r0
 80007fc:	60fb      	str	r3, [r7, #12]

	pid->PreError = error;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	619a      	str	r2, [r3, #24]

	if(fabsf(out) > pid->max){
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	4619      	mov	r1, r3
 8000810:	4610      	mov	r0, r2
 8000812:	f7ff ff65 	bl	80006e0 <__aeabi_fcmpgt>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d010      	beq.n	800083e <PID_Update+0xfe>
		out = pid->max * (out / fabsf(out));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	691c      	ldr	r4, [r3, #16]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000826:	4619      	mov	r1, r3
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f7ff fe51 	bl	80004d0 <__aeabi_fdiv>
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	4620      	mov	r0, r4
 8000834:	f7ff fd98 	bl	8000368 <__aeabi_fmul>
 8000838:	4603      	mov	r3, r0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	e00e      	b.n	800085c <PID_Update+0x11c>
	}else if(fabsf(out) < pid->epsilon){
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	4619      	mov	r1, r3
 800084a:	4610      	mov	r0, r2
 800084c:	f7ff ff2a 	bl	80006a4 <__aeabi_fcmplt>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <PID_Update+0x11c>
		out = 0;
 8000856:	f04f 0300 	mov.w	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
	}

	return out;
 800085c:	68fb      	ldr	r3, [r7, #12]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bdb0      	pop	{r4, r5, r7, pc}

08000866 <PID_Reset>:

void PID_Reset(PID* pid,float normal_error){
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
 800086e:	6039      	str	r1, [r7, #0]
	pid->Integral = 0;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
	pid->PreError = normal_error;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	619a      	str	r2, [r3, #24]
	pid->target = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f04f 0200 	mov.w	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_ADC1_Init+0x74>)
 80008a2:	4a19      	ldr	r2, [pc, #100]	; (8000908 <MX_ADC1_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_ADC1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_ADC1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_ADC1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_ADC1_Init+0x74>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ce:	f001 fc53 	bl	8002178 <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80008d8:	f000 fceb 	bl	80012b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_ADC1_Init+0x74>)
 80008ee:	f001 fe15 	bl	800251c <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80008f8:	f000 fcdb 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000108 	.word	0x20000108
 8000908:	40012400 	.word	0x40012400

0800090c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a28      	ldr	r2, [pc, #160]	; (80009c8 <HAL_ADC_MspInit+0xbc>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d149      	bne.n	80009c0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a26      	ldr	r2, [pc, #152]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a20      	ldr	r2, [pc, #128]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <HAL_ADC_MspInit+0xc0>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095c:	2301      	movs	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000960:	2303      	movs	r3, #3
 8000962:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	4819      	ldr	r0, [pc, #100]	; (80009d0 <HAL_ADC_MspInit+0xc4>)
 800096c:	f003 f9ba 	bl	8003ce4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 8000972:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <HAL_ADC_MspInit+0xcc>)
 8000974:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 800098a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800098e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 8000992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000996:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 800099a:	2220      	movs	r2, #32
 800099c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 80009a6:	f002 ffaf 	bl	8003908 <HAL_DMA_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80009b0:	f000 fc7f 	bl	80012b2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 80009b8:	621a      	str	r2, [r3, #32]
 80009ba:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_ADC_MspInit+0xc8>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40012400 	.word	0x40012400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010800 	.word	0x40010800
 80009d4:	20000138 	.word	0x20000138
 80009d8:	40020008 	.word	0x40020008

080009dc <CAN_FILTER_Init>:
#include "motor_control.h"
#include "led.h"
#include "encoder.h"
extern MotorMode motor_mode;

void CAN_FILTER_Init(void){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterIdHigh = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61fb      	str	r3, [r7, #28]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
	filter.FilterBank = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
	filter.SlaveStartFilterBank = 14;
 8000a02:	230e      	movs	r3, #14
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
	filter.FilterActivation = ENABLE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
	if (HAL_CAN_ConfigFilter(&hcan, &filter) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <CAN_FILTER_Init+0x4c>)
 8000a10:	f002 f927 	bl	8002c62 <HAL_CAN_ConfigFilter>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <CAN_FILTER_Init+0x42>
	{
		Error_Handler();
 8000a1a:	f000 fc4a 	bl	80012b2 <Error_Handler>
	}

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000017c 	.word	0x2000017c

08000a2c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_CAN_Init+0x80>)
 8000a32:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <MX_CAN_Init+0x84>)
 8000a34:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_CAN_Init+0x80>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_CAN_Init+0x80>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_CAN_Init+0x80>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_CAN_Init+0x80>)
 8000a4a:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000a4e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_CAN_Init+0x80>)
 8000a52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_CAN_Init+0x80>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_CAN_Init+0x80>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_CAN_Init+0x80>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_CAN_Init+0x80>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_CAN_Init+0x80>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_CAN_Init+0x80>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <MX_CAN_Init+0x80>)
 8000a7e:	f001 fff5 	bl	8002a6c <HAL_CAN_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a88:	f000 fc13 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FILTER_Init();
 8000a8c:	f7ff ffa6 	bl	80009dc <CAN_FILTER_Init>

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000a90:	2102      	movs	r1, #2
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_CAN_Init+0x80>)
 8000a94:	f002 fbe2 	bl	800325c <HAL_CAN_ActivateNotification>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_CAN_Init+0x76>
	{
		Error_Handler();
 8000a9e:	f000 fc08 	bl	80012b2 <Error_Handler>
	}

	HAL_CAN_Start(&hcan);
 8000aa2:	4802      	ldr	r0, [pc, #8]	; (8000aac <MX_CAN_Init+0x80>)
 8000aa4:	f002 f9a6 	bl	8002df4 <HAL_CAN_Start>
  /* USER CODE END CAN_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000017c 	.word	0x2000017c
 8000ab0:	40006400 	.word	0x40006400

08000ab4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a20      	ldr	r2, [pc, #128]	; (8000b50 <HAL_CAN_MspInit+0x9c>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d139      	bne.n	8000b48 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ade:	61d3      	str	r3, [r2, #28]
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_CAN_MspInit+0xa0>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0310 	add.w	r3, r7, #16
 8000b16:	4619      	mov	r1, r3
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <HAL_CAN_MspInit+0xa4>)
 8000b1a:	f003 f8e3 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4809      	ldr	r0, [pc, #36]	; (8000b58 <HAL_CAN_MspInit+0xa4>)
 8000b34:	f003 f8d6 	bl	8003ce4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2103      	movs	r1, #3
 8000b3c:	2014      	movs	r0, #20
 8000b3e:	f002 feac 	bl	800389a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000b42:	2014      	movs	r0, #20
 8000b44:	f002 fec5 	bl	80038d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40006400 	.word	0x40006400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800

08000b5c <CAN_Send_Status>:

/* USER CODE BEGIN 1 */



void CAN_Send_Status(uint8_t status){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	uint32_t TxMailbox;
	static const CAN_TxHeaderTypeDef TxHeader ={
			.StdId = BASE_ID + 3,
			.DLC = 1
	};
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, &status, &TxMailbox);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	1dfa      	adds	r2, r7, #7
 8000b6c:	4905      	ldr	r1, [pc, #20]	; (8000b84 <CAN_Send_Status+0x28>)
 8000b6e:	4806      	ldr	r0, [pc, #24]	; (8000b88 <CAN_Send_Status+0x2c>)
 8000b70:	f002 f984 	bl	8002e7c <HAL_CAN_AddTxMessage>
    led_on(can);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 fa89 	bl	800108c <led_on>
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	080075f4 	.word	0x080075f4
 8000b88:	2000017c 	.word	0x2000017c

08000b8c <CAN_Set_InterLock_Group>:



__IO uint8_t interlock_group_id = 0;

void CAN_Set_InterLock_Group(uint8_t id){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	interlock_group_id = id;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <CAN_Set_InterLock_Group+0x1c>)
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	7013      	strb	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	200001a4 	.word	0x200001a4

08000bac <CAN_Send_Partial_Stop>:

void CAN_Send_Partial_Stop(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	uint32_t TxMailbox;
	static const CAN_TxHeaderTypeDef TxHeader ={
			.StdId = 0x1,
			.DLC = 1
	};
	uint8_t group_id = interlock_group_id;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <CAN_Send_Partial_Stop+0x28>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	70fb      	strb	r3, [r7, #3]
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, &group_id, &TxMailbox);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	1cfa      	adds	r2, r7, #3
 8000bbe:	4906      	ldr	r1, [pc, #24]	; (8000bd8 <CAN_Send_Partial_Stop+0x2c>)
 8000bc0:	4806      	ldr	r0, [pc, #24]	; (8000bdc <CAN_Send_Partial_Stop+0x30>)
 8000bc2:	f002 f95b 	bl	8002e7c <HAL_CAN_AddTxMessage>
    led_on(can);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f000 fa60 	bl	800108c <led_on>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200001a4 	.word	0x200001a4
 8000bd8:	0800760c 	.word	0x0800760c
 8000bdc:	2000017c 	.word	0x2000017c

08000be0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8];
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	f107 0214 	add.w	r2, r7, #20
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f002 fa11 	bl	800301a <HAL_CAN_GetRxMessage>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f040 80cf 	bne.w	8000d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
    {
    	led_on(can);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 fa43 	bl	800108c <led_on>
    	switch(RxHeader.StdId){
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	2b0a      	cmp	r3, #10
 8000c0a:	f200 80c8 	bhi.w	8000d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
 8000c0e:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c14:	08000c41 	.word	0x08000c41
 8000c18:	08000c49 	.word	0x08000c49
 8000c1c:	08000d9f 	.word	0x08000d9f
 8000c20:	08000d9f 	.word	0x08000d9f
 8000c24:	08000d9f 	.word	0x08000d9f
 8000c28:	08000d9f 	.word	0x08000d9f
 8000c2c:	08000d9f 	.word	0x08000d9f
 8000c30:	08000d9f 	.word	0x08000d9f
 8000c34:	08000c5f 	.word	0x08000c5f
 8000c38:	08000c91 	.word	0x08000c91
 8000c3c:	08000c9b 	.word	0x08000c9b
    	case 0x0:
    	{
    		//emergency stop
    		ChangeMode(Stop);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f000 fb67 	bl	8001314 <ChangeMode>
    		return;
 8000c46:	e0aa      	b.n	8000d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
    		break;
    	}
    	case 0x01:
    	{
    		//Partial stop
    		if(interlock_group_id == RxData[0]){
 8000c48:	7b3a      	ldrb	r2, [r7, #12]
 8000c4a:	4b56      	ldr	r3, [pc, #344]	; (8000da4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f040 80a3 	bne.w	8000d9c <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>
    			ChangeMode(Interlock_Stop);
 8000c56:	2006      	movs	r0, #6
 8000c58:	f000 fb5c 	bl	8001314 <ChangeMode>
    		}
    		return;
 8000c5c:	e09e      	b.n	8000d9c <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>
    		break;
    	}
    	case BASE_ID:
    	{
    		//set target
    		switch(motor_mode){
 8000c5e:	4b52      	ldr	r3, [pc, #328]	; (8000da8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d00e      	beq.n	8000c84 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	dc10      	bgt.n	8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d002      	beq.n	8000c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d004      	beq.n	8000c7c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
    			memcpy(&positionPID.target,RxData,4);
    			break;
    		}
    		case Stop:
    		default:
    			break;
 8000c72:	e00b      	b.n	8000c8c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
 8000c74:	68fb      	ldr	r3, [r7, #12]
    			memcpy(&currentPID.target,RxData,4);
 8000c76:	4a4d      	ldr	r2, [pc, #308]	; (8000dac <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000c78:	6213      	str	r3, [r2, #32]
    			break;
 8000c7a:	e008      	b.n	8000c8e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    			memcpy(&positionPID.target,RxData,4);
 8000c7e:	4a4c      	ldr	r2, [pc, #304]	; (8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000c80:	6213      	str	r3, [r2, #32]
    			break;
 8000c82:	e004      	b.n	8000c8e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
 8000c84:	68fb      	ldr	r3, [r7, #12]
    			memcpy(&positionPID.target,RxData,4);
 8000c86:	4a4a      	ldr	r2, [pc, #296]	; (8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000c88:	6213      	str	r3, [r2, #32]
    			break;
 8000c8a:	e000      	b.n	8000c8e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
    			break;
 8000c8c:	bf00      	nop
    		}
    		return;
 8000c8e:	e086      	b.n	8000d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
    		break;
    	}
    	case BASE_ID + 1:
		{
			//mode setting
			ChangeMode(RxData[0]);
 8000c90:	7b3b      	ldrb	r3, [r7, #12]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fb3e 	bl	8001314 <ChangeMode>
			return;
 8000c98:	e081      	b.n	8000d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
			//parameter setting
			/*
			 * byte: parameter index
			 * float: parameter value
			 */
			switch(RxData[0]){
 8000c9a:	7b3b      	ldrb	r3, [r7, #12]
 8000c9c:	2b0b      	cmp	r3, #11
 8000c9e:	d87b      	bhi.n	8000d98 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>
 8000ca0:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca6:	bf00      	nop
 8000ca8:	08000cd9 	.word	0x08000cd9
 8000cac:	08000ce9 	.word	0x08000ce9
 8000cb0:	08000cf9 	.word	0x08000cf9
 8000cb4:	08000d09 	.word	0x08000d09
 8000cb8:	08000d19 	.word	0x08000d19
 8000cbc:	08000d29 	.word	0x08000d29
 8000cc0:	08000d39 	.word	0x08000d39
 8000cc4:	08000d49 	.word	0x08000d49
 8000cc8:	08000d59 	.word	0x08000d59
 8000ccc:	08000d63 	.word	0x08000d63
 8000cd0:	08000d79 	.word	0x08000d79
 8000cd4:	08000d89 	.word	0x08000d89
			case 0:{memcpy(&currentPID.PGain,RxData + 1,4);break;}
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	3301      	adds	r3, #1
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b32      	ldr	r3, [pc, #200]	; (8000dac <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e058      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
			case 1:{memcpy(&currentPID.IGain,RxData + 1,4);break;}
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	3301      	adds	r3, #1
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	e050      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
			case 2:{memcpy(&currentPID.DGain,RxData + 1,4);break;}
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	e048      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
			case 3:{memcpy(&currentPID.max,  RxData + 1,4);break;}
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b26      	ldr	r3, [pc, #152]	; (8000dac <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000d14:	611a      	str	r2, [r3, #16]
 8000d16:	e040      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>

			case 4:{memcpy(&positionPID.PGain,RxData + 1,4);break;}
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b23      	ldr	r3, [pc, #140]	; (8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e038      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
			case 5:{memcpy(&positionPID.IGain,RxData + 1,4);break;}
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	e030      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
			case 6:{memcpy(&positionPID.DGain,RxData + 1,4);break;}
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	e028      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
			case 7:{memcpy(&positionPID.max,  RxData + 1,4);break;}
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000d54:	611a      	str	r2, [r3, #16]
 8000d56:	e020      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>

			case 8:{CAN_Set_InterLock_Group(RxData[1]);break;}
 8000d58:	7b7b      	ldrb	r3, [r7, #13]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff16 	bl	8000b8c <CAN_Set_InterLock_Group>
 8000d60:	e01b      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
			case 9:{Encoder_SetDirection(RxData[1]? 1:-1);break;}
 8000d62:	7b7b      	ldrb	r3, [r7, #13]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e001      	b.n	8000d70 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f86b 	bl	8000e4c <Encoder_SetDirection>
 8000d76:	e010      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>


			case 10:{memcpy(&currentPID.epsilon,  RxData + 1,4);break;}
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	e008      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
			case 11:{memcpy(&positionPID.epsilon,  RxData + 1,4);break;}
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	e000      	b.n	8000d9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
			default:break;
 8000d98:	bf00      	nop
			}
			return;
 8000d9a:	e000      	b.n	8000d9e <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
    		return;
 8000d9c:	bf00      	nop
			break;
		}
    	}

    }
}
 8000d9e:	3730      	adds	r7, #48	; 0x30
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200001a4 	.word	0x200001a4
 8000da8:	200001b4 	.word	0x200001b4
 8000dac:	20000034 	.word	0x20000034
 8000db0:	20000058 	.word	0x20000058

08000db4 <InitADC>:

// It is uint16_t. but I use uint32_t for DMA.
uint32_t current = 0;

void InitADC()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <InitADC+0x28>)
 8000dba:	f001 fda9 	bl	8002910 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(&hadc1,&current, 1);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <InitADC+0x2c>)
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <InitADC+0x28>)
 8000dc4:	f001 fab0 	bl	8002328 <HAL_ADC_Start_DMA>
    hdma_adc1.Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT);
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <InitADC+0x30>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <InitADC+0x30>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0206 	bic.w	r2, r2, #6
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000108 	.word	0x20000108
 8000de0:	200001a8 	.word	0x200001a8
 8000de4:	20000138 	.word	0x20000138

08000de8 <GetLawCurrent>:
    */
    return (float)current / UINT16_MAX * 3.3 / CURRENT_REGISTER * A_COEFF;
}

uint16_t GetLawCurrent()
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
    return current;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <GetLawCurrent+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	b29b      	uxth	r3, r3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200001a8 	.word	0x200001a8

08000e00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_DMA_Init+0x38>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <MX_DMA_Init+0x38>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_DMA_Init+0x38>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	200b      	movs	r0, #11
 8000e24:	f002 fd39 	bl	800389a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e28:	200b      	movs	r0, #11
 8000e2a:	f002 fd52 	bl	80038d2 <HAL_NVIC_EnableIRQ>

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <ClearFault>:
{
    // read status1
    return (uint8_t)(SPI_Read(0x2));
}
void ClearFault()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    SPI_Write(8, 0b10001001);
 8000e40:	2189      	movs	r1, #137	; 0x89
 8000e42:	2008      	movs	r0, #8
 8000e44:	f000 fc82 	bl	800174c <SPI_Write>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <Encoder_SetDirection>:
#include "config.h"

int overflowcnt = 0;
__IO int direction = 1;

void Encoder_SetDirection(int dir){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	direction = dir;
 8000e54:	4a03      	ldr	r2, [pc, #12]	; (8000e64 <Encoder_SetDirection+0x18>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000000 	.word	0x20000000

08000e68 <Encoder_OverflowCallback>:

void Encoder_OverflowCallback(){
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

    __HAL_TIM_CLEAR_FLAG(&htim2, TIM_IT_UPDATE);
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <Encoder_OverflowCallback+0x3c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f06f 0201 	mvn.w	r2, #1
 8000e74:	611a      	str	r2, [r3, #16]
    if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) //0 → 65535
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <Encoder_OverflowCallback+0x3c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	2b10      	cmp	r3, #16
 8000e82:	d105      	bne.n	8000e90 <Encoder_OverflowCallback+0x28>
    {
        overflowcnt --;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <Encoder_OverflowCallback+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <Encoder_OverflowCallback+0x40>)
 8000e8c:	6013      	str	r3, [r2, #0]
    else //65535 → 0
    {
        overflowcnt ++;

    }
}
 8000e8e:	e004      	b.n	8000e9a <Encoder_OverflowCallback+0x32>
        overflowcnt ++;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <Encoder_OverflowCallback+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <Encoder_OverflowCallback+0x40>)
 8000e98:	6013      	str	r3, [r2, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000268 	.word	0x20000268
 8000ea8:	200001ac 	.word	0x200001ac

08000eac <Encoder_GetPosition>:
float Encoder_GetPosition(){
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	return direction *ENCODER_SCALER* ((float)overflowcnt * UINT16_MAX + htim2.Instance->CNT);
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <Encoder_GetPosition+0x50>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fa03 	bl	80002c0 <__aeabi_i2f>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <Encoder_GetPosition+0x54>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff f9fd 	bl	80002c0 <__aeabi_i2f>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	490e      	ldr	r1, [pc, #56]	; (8000f04 <Encoder_GetPosition+0x58>)
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fa4c 	bl	8000368 <__aeabi_fmul>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <Encoder_GetPosition+0x5c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff f9ec 	bl	80002b8 <__aeabi_ui2f>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4628      	mov	r0, r5
 8000ee6:	f7ff f937 	bl	8000158 <__addsf3>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4619      	mov	r1, r3
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff fa3a 	bl	8000368 <__aeabi_fmul>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000000 	.word	0x20000000
 8000f00:	200001ac 	.word	0x200001ac
 8000f04:	477fff00 	.word	0x477fff00
 8000f08:	20000268 	.word	0x20000268

08000f0c <Encoder_Reset>:

void Encoder_Reset(){
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
	overflowcnt = 0;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <Encoder_Reset+0x1c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
	htim2.Instance->CNT =0;
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <Encoder_Reset+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200001ac 	.word	0x200001ac
 8000f2c:	20000268 	.word	0x20000268

08000f30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0310 	add.w	r3, r7, #16
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f44:	4b34      	ldr	r3, [pc, #208]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a33      	ldr	r2, [pc, #204]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0310 	and.w	r3, r3, #16
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5c:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a2d      	ldr	r2, [pc, #180]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f62:	f043 0320 	orr.w	r3, r3, #32
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0320 	and.w	r3, r3, #32
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0308 	and.w	r3, r3, #8
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, nSleep_Pin|PH_Pin|nSCS_Pin|DRVOFF_Pin
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f641 31e2 	movw	r1, #7138	; 0x1be2
 8000faa:	481c      	ldr	r0, [pc, #112]	; (800101c <MX_GPIO_Init+0xec>)
 8000fac:	f003 f835 	bl	800401a <HAL_GPIO_WritePin>
                          |LED_STATE2_Pin|LED_STATE1_Pin|LED_MOTOR_Pin|LED_CAN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LimitA_Pin|LimitB_Pin;
 8000fb0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_GPIO_Init+0xf0>)
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_GPIO_Init+0xf4>)
 8000fc6:	f002 fe8d 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nFAULT_Pin;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(nFAULT_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480f      	ldr	r0, [pc, #60]	; (800101c <MX_GPIO_Init+0xec>)
 8000fde:	f002 fe81 	bl	8003ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = nSleep_Pin|PH_Pin|nSCS_Pin|DRVOFF_Pin
 8000fe2:	f641 33e2 	movw	r3, #7138	; 0x1be2
 8000fe6:	613b      	str	r3, [r7, #16]
                          |LED_STATE2_Pin|LED_STATE1_Pin|LED_MOTOR_Pin|LED_CAN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <MX_GPIO_Init+0xec>)
 8000ffc:	f002 fe72 	bl	8003ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2101      	movs	r1, #1
 8001004:	2028      	movs	r0, #40	; 0x28
 8001006:	f002 fc48 	bl	800389a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100a:	2028      	movs	r0, #40	; 0x28
 800100c:	f002 fc61 	bl	80038d2 <HAL_NVIC_EnableIRQ>

}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	40010c00 	.word	0x40010c00
 8001020:	10210000 	.word	0x10210000
 8001024:	40011000 	.word	0x40011000

08001028 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

uint32_t last_time=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	//for avoiding chattering.
	if(HAL_GetTick()-last_time<1000)return;
 8001032:	f001 f873 	bl	800211c <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_GPIO_EXTI_Callback+0x5c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001042:	d319      	bcc.n	8001078 <HAL_GPIO_EXTI_Callback+0x50>
	if(
		HAL_GPIO_ReadPin(LimitA_GPIO_Port, LimitA_Pin)==GPIO_PIN_SET &&
 8001044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001048:	480f      	ldr	r0, [pc, #60]	; (8001088 <HAL_GPIO_EXTI_Callback+0x60>)
 800104a:	f002 ffcf 	bl	8003fec <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
	if(
 8001050:	2b01      	cmp	r3, #1
 8001052:	d107      	bne.n	8001064 <HAL_GPIO_EXTI_Callback+0x3c>
		HAL_GPIO_ReadPin(LimitB_GPIO_Port, LimitB_Pin)==GPIO_PIN_SET
 8001054:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <HAL_GPIO_EXTI_Callback+0x60>)
 800105a:	f002 ffc7 	bl	8003fec <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
		HAL_GPIO_ReadPin(LimitA_GPIO_Port, LimitA_Pin)==GPIO_PIN_SET &&
 8001060:	2b01      	cmp	r3, #1
 8001062:	d00b      	beq.n	800107c <HAL_GPIO_EXTI_Callback+0x54>
	)return;

	StopFromLimit(GPIO_Pin);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fa7e 	bl	8001568 <StopFromLimit>
	last_time = HAL_GetTick();
 800106c:	f001 f856 	bl	800211c <HAL_GetTick>
 8001070:	4603      	mov	r3, r0
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e002      	b.n	800107e <HAL_GPIO_EXTI_Callback+0x56>
	if(HAL_GetTick()-last_time<1000)return;
 8001078:	bf00      	nop
 800107a:	e000      	b.n	800107e <HAL_GPIO_EXTI_Callback+0x56>
	)return;
 800107c:	bf00      	nop
}
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200001b0 	.word	0x200001b0
 8001088:	40011000 	.word	0x40011000

0800108c <led_on>:
	{LED_STATE1_GPIO_Port,LED_STATE1_Pin,0,0},
	{LED_STATE2_GPIO_Port,LED_STATE2_Pin,0,0}
};

void led_on(led name)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
    // if the led is off.
    if (led_list[name].is_high == 0)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <led_on+0x54>)
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	4413      	add	r3, r2
 800109e:	330c      	adds	r3, #12
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d117      	bne.n	80010d6 <led_on+0x4a>
    {
        HAL_GPIO_WritePin(led_list[name].gpio, led_list[name].pin, GPIO_PIN_SET);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <led_on+0x54>)
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	4413      	add	r3, r2
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <led_on+0x54>)
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	4413      	add	r3, r2
 80010b8:	3304      	adds	r3, #4
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	2201      	movs	r2, #1
 80010be:	4619      	mov	r1, r3
 80010c0:	f002 ffab 	bl	800401a <HAL_GPIO_WritePin>
        led_list[name].before_tick = HAL_GetTick();
 80010c4:	79fc      	ldrb	r4, [r7, #7]
 80010c6:	f001 f829 	bl	800211c <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	4904      	ldr	r1, [pc, #16]	; (80010e0 <led_on+0x54>)
 80010ce:	0123      	lsls	r3, r4, #4
 80010d0:	440b      	add	r3, r1
 80010d2:	3308      	adds	r3, #8
 80010d4:	601a      	str	r2, [r3, #0]
    }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd90      	pop	{r4, r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000004 	.word	0x20000004

080010e4 <led_process>:

void led_process(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
    for (int i = 0; i < LED_LIST_SIZE; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e02d      	b.n	800114c <led_process+0x68>
    {
        if (led_list[i].is_high || HAL_GetTick() - led_list[i].before_tick > LED_INTERVAL)
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <led_process+0x78>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	330c      	adds	r3, #12
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10c      	bne.n	800111a <led_process+0x36>
 8001100:	f001 f80c 	bl	800211c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	4915      	ldr	r1, [pc, #84]	; (800115c <led_process+0x78>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	440b      	add	r3, r1
 800110e:	3308      	adds	r3, #8
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001118:	d915      	bls.n	8001146 <led_process+0x62>
        {
            HAL_GPIO_WritePin(led_list[i].gpio, led_list[i].pin, GPIO_PIN_RESET);
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <led_process+0x78>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	4413      	add	r3, r2
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <led_process+0x78>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	4413      	add	r3, r2
 800112c:	3304      	adds	r3, #4
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	2200      	movs	r2, #0
 8001132:	4619      	mov	r1, r3
 8001134:	f002 ff71 	bl	800401a <HAL_GPIO_WritePin>
            led_list[i].is_high = 0;
 8001138:	4a08      	ldr	r2, [pc, #32]	; (800115c <led_process+0x78>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	4413      	add	r3, r2
 8001140:	330c      	adds	r3, #12
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < LED_LIST_SIZE; i++)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3301      	adds	r3, #1
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b02      	cmp	r3, #2
 8001150:	ddce      	ble.n	80010f0 <led_process+0xc>
        }
    }
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000004 	.word	0x20000004

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 ff81 	bl	800206c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f847 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f7ff fedf 	bl	8000f30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001172:	f7ff fe45 	bl	8000e00 <MX_DMA_Init>
  MX_CAN_Init();
 8001176:	f7ff fc59 	bl	8000a2c <MX_CAN_Init>
  MX_SPI1_Init();
 800117a:	f000 fa55 	bl	8001628 <MX_SPI1_Init>
  MX_TIM1_Init();
 800117e:	f000 fc8b 	bl	8001a98 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001182:	f7ff fb85 	bl	8000890 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001186:	f000 fd27 	bl	8001bd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800118a:	f000 fd79 	bl	8001c80 <MX_TIM3_Init>
  MX_TIM4_Init();
 800118e:	f000 fdeb 	bl	8001d68 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  led_on(state1);
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff ff7a 	bl	800108c <led_on>
  led_on(state2);
 8001198:	2002      	movs	r0, #2
 800119a:	f7ff ff77 	bl	800108c <led_on>
  led_on(can);
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff ff74 	bl	800108c <led_on>
  led_process();
 80011a4:	f7ff ff9e 	bl	80010e4 <led_process>
  Activate();
 80011a8:	f000 f93a 	bl	8001420 <Activate>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int lasttime_send_stop = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)==GPIO_PIN_RESET){
 80011b0:	2101      	movs	r1, #1
 80011b2:	4811      	ldr	r0, [pc, #68]	; (80011f8 <main+0x98>)
 80011b4:	f002 ff1a 	bl	8003fec <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d107      	bne.n	80011ce <main+0x6e>
		  led_on(can);
 80011be:	2000      	movs	r0, #0
 80011c0:	f7ff ff64 	bl	800108c <led_on>
		  ClearFault();
 80011c4:	f7ff fe3a 	bl	8000e3c <ClearFault>
		  ChangeMode(Stop);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f000 f8a3 	bl	8001314 <ChangeMode>
	  }

	  if(GetMode() == Interlock_Waiting && (HAL_GetTick() - lasttime_send_stop>50)){
 80011ce:	f000 f875 	bl	80012bc <GetMode>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d10c      	bne.n	80011f2 <main+0x92>
 80011d8:	f000 ffa0 	bl	800211c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b32      	cmp	r3, #50	; 0x32
 80011e4:	d905      	bls.n	80011f2 <main+0x92>
		  CAN_Send_Partial_Stop();
 80011e6:	f7ff fce1 	bl	8000bac <CAN_Send_Partial_Stop>
		  lasttime_send_stop = HAL_GetTick();
 80011ea:	f000 ff97 	bl	800211c <HAL_GetTick>
 80011ee:	4603      	mov	r3, r0
 80011f0:	607b      	str	r3, [r7, #4]
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  led_process();
 80011f2:	f7ff ff77 	bl	80010e4 <led_process>
	  if(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)==GPIO_PIN_RESET){
 80011f6:	e7db      	b.n	80011b0 <main+0x50>
 80011f8:	40010c00 	.word	0x40010c00

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	; 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001206:	2228      	movs	r2, #40	; 0x28
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f005 fa00 	bl	8006610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2301      	movs	r3, #1
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123a:	2301      	movs	r3, #1
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001248:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800124c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001252:	4618      	mov	r0, r3
 8001254:	f002 ff12 	bl	800407c <HAL_RCC_OscConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800125e:	f000 f828 	bl	80012b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001262:	230f      	movs	r3, #15
 8001264:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001272:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2102      	movs	r1, #2
 800127e:	4618      	mov	r0, r3
 8001280:	f003 f97e 	bl	8004580 <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800128a:	f000 f812 	bl	80012b2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800128e:	2302      	movs	r3, #2
 8001290:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001296:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4618      	mov	r0, r3
 800129c:	f003 faea 	bl	8004874 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012a6:	f000 f804 	bl	80012b2 <Error_Handler>
  }
}
 80012aa:	bf00      	nop
 80012ac:	3750      	adds	r7, #80	; 0x50
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b6:	b672      	cpsid	i
}
 80012b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ba:	e7fe      	b.n	80012ba <Error_Handler+0x8>

080012bc <GetMode>:

void SetPWMAndDirection(int32_t pwm);
int GetCurrentDirection();

__IO MotorMode motor_mode = Stop;
MotorMode GetMode(){
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	return motor_mode;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <GetMode+0x14>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b2db      	uxtb	r3, r3
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200001b4 	.word	0x200001b4

080012d4 <StateReset>:
void StateReset(){
 80012d4:	b598      	push	{r3, r4, r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	PID_Reset(&currentPID,GetCurrentDirection() * GetLawCurrent());
 80012d8:	f000 f99c 	bl	8001614 <GetCurrentDirection>
 80012dc:	4604      	mov	r4, r0
 80012de:	f7ff fd83 	bl	8000de8 <GetLawCurrent>
 80012e2:	4603      	mov	r3, r0
 80012e4:	fb04 f303 	mul.w	r3, r4, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ffe9 	bl	80002c0 <__aeabi_i2f>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <StateReset+0x38>)
 80012f4:	f7ff fab7 	bl	8000866 <PID_Reset>
	PID_Reset(&positionPID,0);
 80012f8:	f04f 0100 	mov.w	r1, #0
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <StateReset+0x3c>)
 80012fe:	f7ff fab2 	bl	8000866 <PID_Reset>
	Encoder_Reset();
 8001302:	f7ff fe03 	bl	8000f0c <Encoder_Reset>
}
 8001306:	bf00      	nop
 8001308:	bd98      	pop	{r3, r4, r7, pc}
 800130a:	bf00      	nop
 800130c:	20000034 	.word	0x20000034
 8001310:	20000058 	.word	0x20000058

08001314 <ChangeMode>:
void ChangeMode(MotorMode mode){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	//if motor_mode is InterlockWaiting, Cannot Change Interlock_Stop.
	if(motor_mode == Interlock_Waiting && mode == Interlock_Stop)return;
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <ChangeMode+0x90>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b05      	cmp	r3, #5
 8001326:	d102      	bne.n	800132e <ChangeMode+0x1a>
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b06      	cmp	r3, #6
 800132c:	d035      	beq.n	800139a <ChangeMode+0x86>

	motor_mode = mode;
 800132e:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <ChangeMode+0x90>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	7013      	strb	r3, [r2, #0]
	if(motor_mode == Stop ||motor_mode == Interlock_Waiting ||motor_mode == Interlock_Stop){
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <ChangeMode+0x90>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <ChangeMode+0x3e>
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <ChangeMode+0x90>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b05      	cmp	r3, #5
 8001346:	d004      	beq.n	8001352 <ChangeMode+0x3e>
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <ChangeMode+0x90>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b06      	cmp	r3, #6
 8001350:	d10f      	bne.n	8001372 <ChangeMode+0x5e>
		HAL_GPIO_WritePin(LED_MOTOR_GPIO_Port, LED_MOTOR_Pin, GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <ChangeMode+0x94>)
 800135a:	f002 fe5e 	bl	800401a <HAL_GPIO_WritePin>
		//pid control stop
		HAL_TIM_Base_Stop_IT(&htim3);
 800135e:	4813      	ldr	r0, [pc, #76]	; (80013ac <ChangeMode+0x98>)
 8001360:	f003 ff70 	bl	8005244 <HAL_TIM_Base_Stop_IT>
		//pwm stop
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001364:	2100      	movs	r1, #0
 8001366:	4812      	ldr	r0, [pc, #72]	; (80013b0 <ChangeMode+0x9c>)
 8001368:	f004 f8ec 	bl	8005544 <HAL_TIM_PWM_Stop>
		StateReset();
 800136c:	f7ff ffb2 	bl	80012d4 <StateReset>
 8001370:	e00c      	b.n	800138c <ChangeMode+0x78>
	}else{

		HAL_GPIO_WritePin(LED_MOTOR_GPIO_Port, LED_MOTOR_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <ChangeMode+0x94>)
 800137a:	f002 fe4e 	bl	800401a <HAL_GPIO_WritePin>
		//pid control start
		HAL_TIM_Base_Start_IT(&htim3);
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <ChangeMode+0x98>)
 8001380:	f003 ff0e 	bl	80051a0 <HAL_TIM_Base_Start_IT>
		//pwm start
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001384:	2100      	movs	r1, #0
 8001386:	480a      	ldr	r0, [pc, #40]	; (80013b0 <ChangeMode+0x9c>)
 8001388:	f004 f83a 	bl	8005400 <HAL_TIM_PWM_Start>
	}
	CAN_Send_Status(motor_mode);
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <ChangeMode+0x90>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fbe2 	bl	8000b5c <CAN_Send_Status>
 8001398:	e000      	b.n	800139c <ChangeMode+0x88>
	if(motor_mode == Interlock_Waiting && mode == Interlock_Stop)return;
 800139a:	bf00      	nop
}
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200001b4 	.word	0x200001b4
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	200002b0 	.word	0x200002b0
 80013b0:	20000220 	.word	0x20000220

080013b4 <DriverActivate>:

void DriverActivate(){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2102      	movs	r1, #2
 80013bc:	4817      	ldr	r0, [pc, #92]	; (800141c <DriverActivate+0x68>)
 80013be:	f002 fe2c 	bl	800401a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DRVOFF_GPIO_Port, DRVOFF_Pin, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	2120      	movs	r1, #32
 80013c6:	4815      	ldr	r0, [pc, #84]	; (800141c <DriverActivate+0x68>)
 80013c8:	f002 fe27 	bl	800401a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2102      	movs	r1, #2
 80013d0:	4812      	ldr	r0, [pc, #72]	; (800141c <DriverActivate+0x68>)
 80013d2:	f002 fe22 	bl	800401a <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)!=GPIO_PIN_RESET){
 80013d6:	e004      	b.n	80013e2 <DriverActivate+0x2e>
	  led_on(state1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff fe57 	bl	800108c <led_on>
	  led_process();
 80013de:	f7ff fe81 	bl	80010e4 <led_process>
	while(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)!=GPIO_PIN_RESET){
 80013e2:	2101      	movs	r1, #1
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <DriverActivate+0x68>)
 80013e6:	f002 fe01 	bl	8003fec <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f3      	bne.n	80013d8 <DriverActivate+0x24>
	}
	while(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)!=GPIO_PIN_SET){
 80013f0:	e006      	b.n	8001400 <DriverActivate+0x4c>
	  led_on(state2);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff fe4a 	bl	800108c <led_on>
	  ClearFault();
 80013f8:	f7ff fd20 	bl	8000e3c <ClearFault>
	  led_process();
 80013fc:	f7ff fe72 	bl	80010e4 <led_process>
	while(HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin)!=GPIO_PIN_SET){
 8001400:	2101      	movs	r1, #1
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <DriverActivate+0x68>)
 8001404:	f002 fdf2 	bl	8003fec <HAL_GPIO_ReadPin>
 8001408:	4603      	mov	r3, r0
 800140a:	2b01      	cmp	r3, #1
 800140c:	d1f1      	bne.n	80013f2 <DriverActivate+0x3e>
	}
	HAL_GPIO_WritePin(DRVOFF_GPIO_Port, DRVOFF_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2120      	movs	r1, #32
 8001412:	4802      	ldr	r0, [pc, #8]	; (800141c <DriverActivate+0x68>)
 8001414:	f002 fe01 	bl	800401a <HAL_GPIO_WritePin>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40010c00 	.word	0x40010c00

08001420 <Activate>:
void Activate(){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001424:	213c      	movs	r1, #60	; 0x3c
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <Activate+0x20>)
 8001428:	f004 f992 	bl	8005750 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <Activate+0x20>)
 800142e:	f003 feb7 	bl	80051a0 <HAL_TIM_Base_Start_IT>
	DriverActivate();
 8001432:	f7ff ffbf 	bl	80013b4 <DriverActivate>
	InitADC();
 8001436:	f7ff fcbd 	bl	8000db4 <InitADC>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000268 	.word	0x20000268

08001444 <MotorControlUpdate>:
float encoder_position;
int32_t pwm=0;
/*
Position -> Current -> PWM
*/
void MotorControlUpdate(){
 8001444:	b598      	push	{r3, r4, r7, lr}
 8001446:	af00      	add	r7, sp, #0
	led_on(state1);
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff fe1f 	bl	800108c <led_on>
//	if(!HAL_GPIO_ReadPin(nFAULT_GPIO_Port, nFAULT_Pin))return;

	switch(motor_mode){
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <MotorControlUpdate+0x110>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b05      	cmp	r3, #5
 8001456:	d86b      	bhi.n	8001530 <MotorControlUpdate+0xec>
 8001458:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <MotorControlUpdate+0x1c>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	08001539 	.word	0x08001539
 8001464:	08001539 	.word	0x08001539
 8001468:	08001479 	.word	0x08001479
 800146c:	080014a9 	.word	0x080014a9
 8001470:	080014ed 	.word	0x080014ed
 8001474:	08001539 	.word	0x08001539
		//TODO
		break;
	}
	case Current:
	{
		pwm = PID_Update(&currentPID, GetCurrentDirection() * GetLawCurrent());
 8001478:	f000 f8cc 	bl	8001614 <GetCurrentDirection>
 800147c:	4604      	mov	r4, r0
 800147e:	f7ff fcb3 	bl	8000de8 <GetLawCurrent>
 8001482:	4603      	mov	r3, r0
 8001484:	fb04 f303 	mul.w	r3, r4, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe ff19 	bl	80002c0 <__aeabi_i2f>
 800148e:	4603      	mov	r3, r0
 8001490:	4619      	mov	r1, r3
 8001492:	4831      	ldr	r0, [pc, #196]	; (8001558 <MotorControlUpdate+0x114>)
 8001494:	f7ff f954 	bl	8000740 <PID_Update>
 8001498:	4603      	mov	r3, r0
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f92a 	bl	80006f4 <__aeabi_f2iz>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a2e      	ldr	r2, [pc, #184]	; (800155c <MotorControlUpdate+0x118>)
 80014a4:	6013      	str	r3, [r2, #0]
		break;
 80014a6:	e048      	b.n	800153a <MotorControlUpdate+0xf6>
	}
	case Position:
	{
		currentPID.target = PID_Update(&positionPID, Encoder_GetPosition());
 80014a8:	f7ff fd00 	bl	8000eac <Encoder_GetPosition>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4619      	mov	r1, r3
 80014b0:	482b      	ldr	r0, [pc, #172]	; (8001560 <MotorControlUpdate+0x11c>)
 80014b2:	f7ff f945 	bl	8000740 <PID_Update>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <MotorControlUpdate+0x114>)
 80014ba:	6213      	str	r3, [r2, #32]
		pwm = PID_Update(&currentPID, GetCurrentDirection() * GetLawCurrent());
 80014bc:	f000 f8aa 	bl	8001614 <GetCurrentDirection>
 80014c0:	4604      	mov	r4, r0
 80014c2:	f7ff fc91 	bl	8000de8 <GetLawCurrent>
 80014c6:	4603      	mov	r3, r0
 80014c8:	fb04 f303 	mul.w	r3, r4, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe fef7 	bl	80002c0 <__aeabi_i2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4619      	mov	r1, r3
 80014d6:	4820      	ldr	r0, [pc, #128]	; (8001558 <MotorControlUpdate+0x114>)
 80014d8:	f7ff f932 	bl	8000740 <PID_Update>
 80014dc:	4603      	mov	r3, r0
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f908 	bl	80006f4 <__aeabi_f2iz>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a1d      	ldr	r2, [pc, #116]	; (800155c <MotorControlUpdate+0x118>)
 80014e8:	6013      	str	r3, [r2, #0]
		break;
 80014ea:	e026      	b.n	800153a <MotorControlUpdate+0xf6>
	}
	case Interlock_Position:
	{
		currentPID.target = PID_Update(&positionPID, Encoder_GetPosition());
 80014ec:	f7ff fcde 	bl	8000eac <Encoder_GetPosition>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4619      	mov	r1, r3
 80014f4:	481a      	ldr	r0, [pc, #104]	; (8001560 <MotorControlUpdate+0x11c>)
 80014f6:	f7ff f923 	bl	8000740 <PID_Update>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a16      	ldr	r2, [pc, #88]	; (8001558 <MotorControlUpdate+0x114>)
 80014fe:	6213      	str	r3, [r2, #32]
		pwm = PID_Update(&currentPID, GetCurrentDirection() * GetLawCurrent());
 8001500:	f000 f888 	bl	8001614 <GetCurrentDirection>
 8001504:	4604      	mov	r4, r0
 8001506:	f7ff fc6f 	bl	8000de8 <GetLawCurrent>
 800150a:	4603      	mov	r3, r0
 800150c:	fb04 f303 	mul.w	r3, r4, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe fed5 	bl	80002c0 <__aeabi_i2f>
 8001516:	4603      	mov	r3, r0
 8001518:	4619      	mov	r1, r3
 800151a:	480f      	ldr	r0, [pc, #60]	; (8001558 <MotorControlUpdate+0x114>)
 800151c:	f7ff f910 	bl	8000740 <PID_Update>
 8001520:	4603      	mov	r3, r0
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f8e6 	bl	80006f4 <__aeabi_f2iz>
 8001528:	4603      	mov	r3, r0
 800152a:	4a0c      	ldr	r2, [pc, #48]	; (800155c <MotorControlUpdate+0x118>)
 800152c:	6013      	str	r3, [r2, #0]
		break;
 800152e:	e004      	b.n	800153a <MotorControlUpdate+0xf6>
	}


	default:
		ChangeMode(Stop);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff feef 	bl	8001314 <ChangeMode>
		break;
 8001536:	e000      	b.n	800153a <MotorControlUpdate+0xf6>
		break;
 8001538:	bf00      	nop
	}

	SetPWMAndDirection(pwm);
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <MotorControlUpdate+0x118>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f82e 	bl	80015a0 <SetPWMAndDirection>
	encoder_position = Encoder_GetPosition();
 8001544:	f7ff fcb2 	bl	8000eac <Encoder_GetPosition>
 8001548:	4603      	mov	r3, r0
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <MotorControlUpdate+0x120>)
 800154c:	6013      	str	r3, [r2, #0]


}
 800154e:	bf00      	nop
 8001550:	bd98      	pop	{r3, r4, r7, pc}
 8001552:	bf00      	nop
 8001554:	200001b4 	.word	0x200001b4
 8001558:	20000034 	.word	0x20000034
 800155c:	200001bc 	.word	0x200001bc
 8001560:	20000058 	.word	0x20000058
 8001564:	200001b8 	.word	0x200001b8

08001568 <StopFromLimit>:


void StopFromLimit(uint32_t GPIO_Pin){
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	MotorMode mode = motor_mode;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <StopFromLimit+0x34>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	73fb      	strb	r3, [r7, #15]
	//first, stop as soon as possible
	ChangeMode(Stop);
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff fecc 	bl	8001314 <ChangeMode>

	if(mode == Interlock_Position || mode == Interlock_Waiting){
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	2b04      	cmp	r3, #4
 8001580:	d002      	beq.n	8001588 <StopFromLimit+0x20>
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b05      	cmp	r3, #5
 8001586:	d104      	bne.n	8001592 <StopFromLimit+0x2a>
		ChangeMode(Interlock_Waiting);
 8001588:	2005      	movs	r0, #5
 800158a:	f7ff fec3 	bl	8001314 <ChangeMode>
		CAN_Send_Partial_Stop();
 800158e:	f7ff fb0d 	bl	8000bac <CAN_Send_Partial_Stop>
		// the job keeps doing on main function.

	}
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200001b4 	.word	0x200001b4

080015a0 <SetPWMAndDirection>:


int currentDirection = 0;
int lastMotorDirectionSetting = 0;
void SetPWMAndDirection(int32_t pwm){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

	//set direction
	if(pwm > 0){
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	dd09      	ble.n	80015c2 <SetPWMAndDirection+0x22>
		HAL_GPIO_WritePin(PH_GPIO_Port, PH_Pin, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b4:	4814      	ldr	r0, [pc, #80]	; (8001608 <SetPWMAndDirection+0x68>)
 80015b6:	f002 fd30 	bl	800401a <HAL_GPIO_WritePin>
		currentDirection = 1;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <SetPWMAndDirection+0x6c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e00c      	b.n	80015dc <SetPWMAndDirection+0x3c>
	}else{
		HAL_GPIO_WritePin(PH_GPIO_Port, PH_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c8:	480f      	ldr	r0, [pc, #60]	; (8001608 <SetPWMAndDirection+0x68>)
 80015ca:	f002 fd26 	bl	800401a <HAL_GPIO_WritePin>
		pwm = -pwm;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	425b      	negs	r3, r3
 80015d2:	607b      	str	r3, [r7, #4]
		currentDirection = -1;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <SetPWMAndDirection+0x6c>)
 80015d6:	f04f 32ff 	mov.w	r2, #4294967295
 80015da:	601a      	str	r2, [r3, #0]
	}

	if(pwm> UINT16_MAX)pwm = UINT16_MAX;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e2:	db02      	blt.n	80015ea <SetPWMAndDirection+0x4a>
 80015e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e8:	607b      	str	r3, [r7, #4]

	//low pwm cut off
	if(pwm < 300) pwm = 0;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015f0:	da01      	bge.n	80015f6 <SetPWMAndDirection+0x56>
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SetPWMAndDirection+0x70>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40010c00 	.word	0x40010c00
 800160c:	200001c0 	.word	0x200001c0
 8001610:	20000220 	.word	0x20000220

08001614 <GetCurrentDirection>:

//it is -1 or 1
int GetCurrentDirection(){
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
	return currentDirection;
 8001618:	4b02      	ldr	r3, [pc, #8]	; (8001624 <GetCurrentDirection+0x10>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	200001c0 	.word	0x200001c0

08001628 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */
  HAL_GPIO_WritePin(nSCS_GPIO_Port, nSCS_Pin, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001632:	481e      	ldr	r0, [pc, #120]	; (80016ac <MX_SPI1_Init+0x84>)
 8001634:	f002 fcf1 	bl	800401a <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_SPI1_Init+0x88>)
 800163a:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <MX_SPI1_Init+0x8c>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001640:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_SPI1_Init+0x88>)
 800164e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001652:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_SPI1_Init+0x88>)
 800165c:	2201      	movs	r2, #1
 800165e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001666:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_SPI1_Init+0x88>)
 800166a:	2220      	movs	r2, #32
 800166c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <MX_SPI1_Init+0x88>)
 800167c:	2200      	movs	r2, #0
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001682:	220a      	movs	r2, #10
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001686:	480a      	ldr	r0, [pc, #40]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001688:	f003 fa60 	bl	8004b4c <HAL_SPI_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001692:	f7ff fe0e 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_SPI1_Init+0x88>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <MX_SPI1_Init+0x88>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016a4:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40010c00 	.word	0x40010c00
 80016b0:	200001c4 	.word	0x200001c4
 80016b4:	40013000 	.word	0x40013000

080016b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <HAL_SPI_MspInit+0x88>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d12f      	bne.n	8001738 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <HAL_SPI_MspInit+0x8c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_SPI_MspInit+0x8c>)
 80016de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_SPI_MspInit+0x8c>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_SPI_MspInit+0x8c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a13      	ldr	r2, [pc, #76]	; (8001744 <HAL_SPI_MspInit+0x8c>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_SPI_MspInit+0x8c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001708:	23a0      	movs	r3, #160	; 0xa0
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <HAL_SPI_MspInit+0x90>)
 800171c:	f002 fae2 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001720:	2340      	movs	r3, #64	; 0x40
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_SPI_MspInit+0x90>)
 8001734:	f002 fad6 	bl	8003ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40013000 	.word	0x40013000
 8001744:	40021000 	.word	0x40021000
 8001748:	40010800 	.word	0x40010800

0800174c <SPI_Write>:
	HAL_GPIO_WritePin(nSCS_GPIO_Port, nSCS_Pin, GPIO_PIN_SET);
	if(status!=HAL_OK)led_on(state2);
	return (((uint16_t)RxData[1]) << 8) + RxData[0];

}
uint16_t SPI_Write(uint8_t address,uint8_t data){
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af02      	add	r7, sp, #8
 8001752:	4603      	mov	r3, r0
 8001754:	460a      	mov	r2, r1
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	4613      	mov	r3, r2
 800175a:	71bb      	strb	r3, [r7, #6]
	//address size assert
	assert(!(address & 0b11000000));
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <SPI_Write+0x26>
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <SPI_Write+0x90>)
 8001768:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <SPI_Write+0x94>)
 800176a:	218d      	movs	r1, #141	; 0x8d
 800176c:	481d      	ldr	r0, [pc, #116]	; (80017e4 <SPI_Write+0x98>)
 800176e:	f004 fef5 	bl	800655c <__assert_func>

	uint8_t TxData[2];
	TxData[1] = address | 0b00000000;
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	737b      	strb	r3, [r7, #13]
	TxData[0] = data;
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	733b      	strb	r3, [r7, #12]
	uint8_t RxData[2];

	HAL_GPIO_WritePin(nSCS_GPIO_Port, nSCS_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001780:	4819      	ldr	r0, [pc, #100]	; (80017e8 <SPI_Write+0x9c>)
 8001782:	f002 fc4a 	bl	800401a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001786:	2001      	movs	r0, #1
 8001788:	f000 fcd2 	bl	8002130 <HAL_Delay>
	HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)TxData, (uint8_t*)RxData, 1, SPI_TIMEOUT);
 800178c:	f107 0208 	add.w	r2, r7, #8
 8001790:	f107 010c 	add.w	r1, r7, #12
 8001794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2301      	movs	r3, #1
 800179c:	4813      	ldr	r0, [pc, #76]	; (80017ec <SPI_Write+0xa0>)
 800179e:	f003 fa59 	bl	8004c54 <HAL_SPI_TransmitReceive>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f000 fcc2 	bl	8002130 <HAL_Delay>
	HAL_GPIO_WritePin(nSCS_GPIO_Port, nSCS_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <SPI_Write+0x9c>)
 80017b4:	f002 fc31 	bl	800401a <HAL_GPIO_WritePin>
	if(status!=HAL_OK){
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <SPI_Write+0x78>
		led_on(state2);
 80017be:	2002      	movs	r0, #2
 80017c0:	f7ff fc64 	bl	800108c <led_on>
	}
	return (((uint16_t)RxData[1]) << 8) + RxData[0];
 80017c4:	7a7b      	ldrb	r3, [r7, #9]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	7a3b      	ldrb	r3, [r7, #8]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4413      	add	r3, r2
 80017d2:	b29b      	uxth	r3, r3
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	080075c8 	.word	0x080075c8
 80017e0:	08007624 	.word	0x08007624
 80017e4:	080075e0 	.word	0x080075e0
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	200001c4 	.word	0x200001c4

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_MspInit+0x5c>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <HAL_MspInit+0x5c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6193      	str	r3, [r2, #24]
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_MspInit+0x5c>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_MspInit+0x5c>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_MspInit+0x5c>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	61d3      	str	r3, [r2, #28]
 800181a:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_MspInit+0x5c>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_MspInit+0x60>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_MspInit+0x60>)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	40021000 	.word	0x40021000
 8001850:	40010000 	.word	0x40010000

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <NMI_Handler+0x4>

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <MemManage_Handler+0x4>

08001866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <UsageFault_Handler+0x4>

08001872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189a:	f000 fc2d 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <DMA1_Channel1_IRQHandler+0x10>)
 80018aa:	f002 f8e7 	bl	8003a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000138 	.word	0x20000138

080018b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80018be:	f001 fcf2 	bl	80032a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000017c 	.word	0x2000017c

080018cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <TIM2_IRQHandler+0x10>)
 80018d2:	f003 ffcb 	bl	800586c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000268 	.word	0x20000268

080018e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <TIM3_IRQHandler+0x10>)
 80018e6:	f003 ffc1 	bl	800586c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200002b0 	.word	0x200002b0

080018f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LimitA_Pin);
 80018f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018fc:	f002 fba6 	bl	800404c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LimitB_Pin);
 8001900:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001904:	f002 fba2 	bl	800404c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return 1;
 8001910:	2301      	movs	r3, #1
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <_kill>:

int _kill(int pid, int sig)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001924:	f004 fe38 	bl	8006598 <__errno>
 8001928:	4603      	mov	r3, r0
 800192a:	2216      	movs	r2, #22
 800192c:	601a      	str	r2, [r3, #0]
  return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_exit>:

void _exit (int status)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001942:	f04f 31ff 	mov.w	r1, #4294967295
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffe7 	bl	800191a <_kill>
  while (1) {}    /* Make sure we hang here */
 800194c:	e7fe      	b.n	800194c <_exit+0x12>

0800194e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e00a      	b.n	8001976 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001960:	f3af 8000 	nop.w
 8001964:	4601      	mov	r1, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3301      	adds	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	dbf0      	blt.n	8001960 <_read+0x12>
  }

  return len;
 800197e:	687b      	ldr	r3, [r7, #4]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e009      	b.n	80019ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbf1      	blt.n	800199a <_write+0x12>
  }
  return len;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_close>:

int _close(int file)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	605a      	str	r2, [r3, #4]
  return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <_isatty>:

int _isatty(int file)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019fc:	2301      	movs	r3, #1
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <_sbrk+0x5c>)
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <_sbrk+0x60>)
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a34:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <_sbrk+0x64>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <_sbrk+0x68>)
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d207      	bcs.n	8001a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a50:	f004 fda2 	bl	8006598 <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	220c      	movs	r2, #12
 8001a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	e009      	b.n	8001a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <_sbrk+0x64>)
 8001a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20005000 	.word	0x20005000
 8001a80:	00000400 	.word	0x00000400
 8001a84:	2000021c 	.word	0x2000021c
 8001a88:	20000358 	.word	0x20000358

08001a8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b096      	sub	sp, #88	; 0x58
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	611a      	str	r2, [r3, #16]
 8001ac6:	615a      	str	r2, [r3, #20]
 8001ac8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2220      	movs	r2, #32
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 fd9d 	bl	8006610 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001ad8:	4a3e      	ldr	r2, [pc, #248]	; (8001bd4 <MX_TIM1_Init+0x13c>)
 8001ada:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001adc:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ae8:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b02:	4833      	ldr	r0, [pc, #204]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001b04:	f003 fafc 	bl	8005100 <HAL_TIM_Base_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b0e:	f7ff fbd0 	bl	80012b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	482c      	ldr	r0, [pc, #176]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001b20:	f004 f8ca 	bl	8005cb8 <HAL_TIM_ConfigClockSource>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b2a:	f7ff fbc2 	bl	80012b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b2e:	4828      	ldr	r0, [pc, #160]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001b30:	f003 fc0e 	bl	8005350 <HAL_TIM_PWM_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b3a:	f7ff fbba 	bl	80012b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4820      	ldr	r0, [pc, #128]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001b4e:	f004 fc43 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b58:	f7ff fbab 	bl	80012b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b5c:	2360      	movs	r3, #96	; 0x60
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001b82:	f003 ffd7 	bl	8005b34 <HAL_TIM_PWM_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b8c:	f7ff fb91 	bl	80012b2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001bb4:	f004 fc6e 	bl	8006494 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001bbe:	f7ff fb78 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bc2:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <MX_TIM1_Init+0x138>)
 8001bc4:	f000 f9e0 	bl	8001f88 <HAL_TIM_MspPostInit>

}
 8001bc8:	bf00      	nop
 8001bca:	3758      	adds	r7, #88	; 0x58
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000220 	.word	0x20000220
 8001bd4:	40012c00 	.word	0x40012c00

08001bd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 fd12 	bl	8006610 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c24:	2301      	movs	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c34:	2301      	movs	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	4619      	mov	r1, r3
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c48:	f003 fce0 	bl	800560c <HAL_TIM_Encoder_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c52:	f7ff fb2e 	bl	80012b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <MX_TIM2_Init+0xa4>)
 8001c64:	f004 fbb8 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c6e:	f7ff fb20 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c72:	bf00      	nop
 8001c74:	3730      	adds	r7, #48	; 0x30
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000268 	.word	0x20000268

08001c80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08e      	sub	sp, #56	; 0x38
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c94:	f107 0320 	add.w	r3, r7, #32
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
 8001cac:	615a      	str	r2, [r3, #20]
 8001cae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001cb2:	4a2c      	ldr	r2, [pc, #176]	; (8001d64 <MX_TIM3_Init+0xe4>)
 8001cb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001cb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbe:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 70-1;
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001cc6:	2245      	movs	r2, #69	; 0x45
 8001cc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cca:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cd6:	4822      	ldr	r0, [pc, #136]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001cd8:	f003 fa12 	bl	8005100 <HAL_TIM_Base_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ce2:	f7ff fae6 	bl	80012b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481b      	ldr	r0, [pc, #108]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001cf4:	f003 ffe0 	bl	8005cb8 <HAL_TIM_ConfigClockSource>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001cfe:	f7ff fad8 	bl	80012b2 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001d02:	4817      	ldr	r0, [pc, #92]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001d04:	f003 facc 	bl	80052a0 <HAL_TIM_OC_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d0e:	f7ff fad0 	bl	80012b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d1a:	f107 0320 	add.w	r3, r7, #32
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480f      	ldr	r0, [pc, #60]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001d22:	f004 fb59 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d2c:	f7ff fac1 	bl	80012b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2200      	movs	r2, #0
 8001d44:	4619      	mov	r1, r3
 8001d46:	4806      	ldr	r0, [pc, #24]	; (8001d60 <MX_TIM3_Init+0xe0>)
 8001d48:	f003 fe98 	bl	8005a7c <HAL_TIM_OC_ConfigChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d52:	f7ff faae 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	3738      	adds	r7, #56	; 0x38
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200002b0 	.word	0x200002b0
 8001d64:	40000400 	.word	0x40000400

08001d68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <MX_TIM4_Init+0x94>)
 8001d86:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <MX_TIM4_Init+0x98>)
 8001d88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <MX_TIM4_Init+0x94>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MX_TIM4_Init+0x94>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <MX_TIM4_Init+0x94>)
 8001d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <MX_TIM4_Init+0x94>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <MX_TIM4_Init+0x94>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001daa:	4814      	ldr	r0, [pc, #80]	; (8001dfc <MX_TIM4_Init+0x94>)
 8001dac:	f003 f9a8 	bl	8005100 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001db6:	f7ff fa7c 	bl	80012b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dc0:	f107 0308 	add.w	r3, r7, #8
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480d      	ldr	r0, [pc, #52]	; (8001dfc <MX_TIM4_Init+0x94>)
 8001dc8:	f003 ff76 	bl	8005cb8 <HAL_TIM_ConfigClockSource>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001dd2:	f7ff fa6e 	bl	80012b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dde:	463b      	mov	r3, r7
 8001de0:	4619      	mov	r1, r3
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <MX_TIM4_Init+0x94>)
 8001de4:	f004 faf8 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001dee:	f7ff fa60 	bl	80012b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200002f8 	.word	0x200002f8
 8001e00:	40000800 	.word	0x40000800

08001e04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_TIM_Base_MspInit+0x8c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10c      	bne.n	8001e30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e16:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <HAL_TIM_Base_MspInit+0x90>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <HAL_TIM_Base_MspInit+0x90>)
 8001e1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e20:	6193      	str	r3, [r2, #24]
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_TIM_Base_MspInit+0x90>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e2e:	e02a      	b.n	8001e86 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <HAL_TIM_Base_MspInit+0x94>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d114      	bne.n	8001e64 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_TIM_Base_MspInit+0x90>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_TIM_Base_MspInit+0x90>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	61d3      	str	r3, [r2, #28]
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <HAL_TIM_Base_MspInit+0x90>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2102      	movs	r1, #2
 8001e56:	201d      	movs	r0, #29
 8001e58:	f001 fd1f 	bl	800389a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e5c:	201d      	movs	r0, #29
 8001e5e:	f001 fd38 	bl	80038d2 <HAL_NVIC_EnableIRQ>
}
 8001e62:	e010      	b.n	8001e86 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_TIM_Base_MspInit+0x98>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10b      	bne.n	8001e86 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_TIM_Base_MspInit+0x90>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_TIM_Base_MspInit+0x90>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	61d3      	str	r3, [r2, #28]
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_TIM_Base_MspInit+0x90>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40012c00 	.word	0x40012c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800

08001ea0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d156      	bne.n	8001f6e <HAL_TIM_Encoder_MspInit+0xce>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	61d3      	str	r3, [r2, #28]
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001ef6:	f043 0308 	orr.w	r3, r3, #8
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4817      	ldr	r0, [pc, #92]	; (8001f7c <HAL_TIM_Encoder_MspInit+0xdc>)
 8001f1e:	f001 fee1 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f22:	2308      	movs	r3, #8
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4812      	ldr	r0, [pc, #72]	; (8001f80 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001f36:	f001 fed5 	bl	8003ce4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
 8001f58:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2104      	movs	r1, #4
 8001f62:	201c      	movs	r0, #28
 8001f64:	f001 fc99 	bl	800389a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f68:	201c      	movs	r0, #28
 8001f6a:	f001 fcb2 	bl	80038d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	40010000 	.word	0x40010000

08001f88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_TIM_MspPostInit+0x5c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d118      	bne.n	8001fda <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_TIM_MspPostInit+0x60>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_TIM_MspPostInit+0x60>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_TIM_MspPostInit+0x60>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EN_Pin;
 8001fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_TIM_MspPostInit+0x64>)
 8001fd6:	f001 fe85 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fda:	bf00      	nop
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40012c00 	.word	0x40012c00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010800 	.word	0x40010800

08001ff0 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2){
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d101      	bne.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x16>
    	Encoder_OverflowCallback();
 8002002:	f7fe ff31 	bl	8000e68 <Encoder_OverflowCallback>
    }

    if(htim->Instance==TIM3){
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x24>
    	MotorControlUpdate();
 8002010:	f7ff fa18 	bl	8001444 <MotorControlUpdate>
    }
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40000400 	.word	0x40000400

08002020 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002020:	f7ff fd34 	bl	8001a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002024:	480b      	ldr	r0, [pc, #44]	; (8002054 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002026:	490c      	ldr	r1, [pc, #48]	; (8002058 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002028:	4a0c      	ldr	r2, [pc, #48]	; (800205c <LoopFillZerobss+0x16>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800203c:	4c09      	ldr	r4, [pc, #36]	; (8002064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800204a:	f004 fabd 	bl	80065c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800204e:	f7ff f887 	bl	8001160 <main>
  bx lr
 8002052:	4770      	bx	lr
  ldr r0, =_sdata
 8002054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002058:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 800205c:	0800774c 	.word	0x0800774c
  ldr r2, =_sbss
 8002060:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002064:	20000354 	.word	0x20000354

08002068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC1_2_IRQHandler>
	...

0800206c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_Init+0x28>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_Init+0x28>)
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f001 fc01 	bl	8003884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002082:	200f      	movs	r0, #15
 8002084:	f000 f808 	bl	8002098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002088:	f7ff fbb2 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40022000 	.word	0x40022000

08002098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_InitTick+0x54>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_InitTick+0x58>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4619      	mov	r1, r3
 80020aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f001 fc19 	bl	80038ee <HAL_SYSTICK_Config>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00e      	b.n	80020e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	d80a      	bhi.n	80020e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020cc:	2200      	movs	r2, #0
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f001 fbe1 	bl	800389a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d8:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <HAL_InitTick+0x5c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	2000007c 	.word	0x2000007c
 80020f0:	20000084 	.word	0x20000084
 80020f4:	20000080 	.word	0x20000080

080020f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_IncTick+0x1c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_IncTick+0x20>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a03      	ldr	r2, [pc, #12]	; (8002118 <HAL_IncTick+0x20>)
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	20000084 	.word	0x20000084
 8002118:	20000340 	.word	0x20000340

0800211c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <HAL_GetTick+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000340 	.word	0x20000340

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff fff0 	bl	800211c <HAL_GetTick>
 800213c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_Delay+0x44>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002156:	bf00      	nop
 8002158:	f7ff ffe0 	bl	800211c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000084 	.word	0x20000084

08002178 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e0be      	b.n	8002318 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe fba8 	bl	800090c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 faff 	bl	80027c0 <ADC_ConversionStop_Disable>
 80021c2:	4603      	mov	r3, r0
 80021c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 8099 	bne.w	8002306 <HAL_ADC_Init+0x18e>
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 8095 	bne.w	8002306 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e4:	f023 0302 	bic.w	r3, r3, #2
 80021e8:	f043 0202 	orr.w	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7b1b      	ldrb	r3, [r3, #12]
 80021fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002200:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	4313      	orrs	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002210:	d003      	beq.n	800221a <HAL_ADC_Init+0xa2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d102      	bne.n	8002220 <HAL_ADC_Init+0xa8>
 800221a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221e:	e000      	b.n	8002222 <HAL_ADC_Init+0xaa>
 8002220:	2300      	movs	r3, #0
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	7d1b      	ldrb	r3, [r3, #20]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d119      	bne.n	8002264 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7b1b      	ldrb	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	3b01      	subs	r3, #1
 800223e:	035a      	lsls	r2, r3, #13
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	e00b      	b.n	8002264 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	f043 0220 	orr.w	r2, r3, #32
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_ADC_Init+0x1a8>)
 8002280:	4013      	ands	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	430b      	orrs	r3, r1
 800228a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002294:	d003      	beq.n	800229e <HAL_ADC_Init+0x126>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d104      	bne.n	80022a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	051b      	lsls	r3, r3, #20
 80022a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_ADC_Init+0x1ac>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d10b      	bne.n	80022e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022e2:	e018      	b.n	8002316 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	f023 0312 	bic.w	r3, r3, #18
 80022ec:	f043 0210 	orr.w	r2, r3, #16
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002304:	e007      	b.n	8002316 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	f043 0210 	orr.w	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002316:	7dfb      	ldrb	r3, [r7, #23]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	ffe1f7fd 	.word	0xffe1f7fd
 8002324:	ff1f0efe 	.word	0xff1f0efe

08002328 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a64      	ldr	r2, [pc, #400]	; (80024d0 <HAL_ADC_Start_DMA+0x1a8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d004      	beq.n	800234c <HAL_ADC_Start_DMA+0x24>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a63      	ldr	r2, [pc, #396]	; (80024d4 <HAL_ADC_Start_DMA+0x1ac>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d106      	bne.n	800235a <HAL_ADC_Start_DMA+0x32>
 800234c:	4b60      	ldr	r3, [pc, #384]	; (80024d0 <HAL_ADC_Start_DMA+0x1a8>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 80b3 	bne.w	80024c0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_ADC_Start_DMA+0x40>
 8002364:	2302      	movs	r3, #2
 8002366:	e0ae      	b.n	80024c6 <HAL_ADC_Start_DMA+0x19e>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f9cb 	bl	800270c <ADC_Enable>
 8002376:	4603      	mov	r3, r0
 8002378:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800237a:	7dfb      	ldrb	r3, [r7, #23]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 809a 	bne.w	80024b6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a4e      	ldr	r2, [pc, #312]	; (80024d4 <HAL_ADC_Start_DMA+0x1ac>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d105      	bne.n	80023ac <HAL_ADC_Start_DMA+0x84>
 80023a0:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <HAL_ADC_Start_DMA+0x1a8>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d115      	bne.n	80023d8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d026      	beq.n	8002414 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023d6:	e01d      	b.n	8002414 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a39      	ldr	r2, [pc, #228]	; (80024d0 <HAL_ADC_Start_DMA+0x1a8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d004      	beq.n	80023f8 <HAL_ADC_Start_DMA+0xd0>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a38      	ldr	r2, [pc, #224]	; (80024d4 <HAL_ADC_Start_DMA+0x1ac>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d10d      	bne.n	8002414 <HAL_ADC_Start_DMA+0xec>
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <HAL_ADC_Start_DMA+0x1a8>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800240c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f023 0206 	bic.w	r2, r3, #6
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
 800242c:	e002      	b.n	8002434 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <HAL_ADC_Start_DMA+0x1b0>)
 8002442:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a24      	ldr	r2, [pc, #144]	; (80024dc <HAL_ADC_Start_DMA+0x1b4>)
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <HAL_ADC_Start_DMA+0x1b8>)
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0202 	mvn.w	r2, #2
 800245c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a18      	ldr	r0, [r3, #32]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	334c      	adds	r3, #76	; 0x4c
 8002478:	4619      	mov	r1, r3
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f001 fa9d 	bl	80039bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800248c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002490:	d108      	bne.n	80024a4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024a0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024a2:	e00f      	b.n	80024c4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024b2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024b4:	e006      	b.n	80024c4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80024be:	e001      	b.n	80024c4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40012400 	.word	0x40012400
 80024d4:	40012800 	.word	0x40012800
 80024d8:	08002843 	.word	0x08002843
 80024dc:	080028bf 	.word	0x080028bf
 80024e0:	080028db 	.word	0x080028db

080024e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
	...

0800251c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_ADC_ConfigChannel+0x20>
 8002538:	2302      	movs	r3, #2
 800253a:	e0dc      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x1da>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b06      	cmp	r3, #6
 800254a:	d81c      	bhi.n	8002586 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	3b05      	subs	r3, #5
 800255e:	221f      	movs	r2, #31
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	4019      	ands	r1, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	3b05      	subs	r3, #5
 8002578:	fa00 f203 	lsl.w	r2, r0, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	635a      	str	r2, [r3, #52]	; 0x34
 8002584:	e03c      	b.n	8002600 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d81c      	bhi.n	80025c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	3b23      	subs	r3, #35	; 0x23
 80025a0:	221f      	movs	r2, #31
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	4019      	ands	r1, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	3b23      	subs	r3, #35	; 0x23
 80025ba:	fa00 f203 	lsl.w	r2, r0, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
 80025c6:	e01b      	b.n	8002600 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b41      	subs	r3, #65	; 0x41
 80025da:	221f      	movs	r2, #31
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4019      	ands	r1, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b41      	subs	r3, #65	; 0x41
 80025f4:	fa00 f203 	lsl.w	r2, r0, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b09      	cmp	r3, #9
 8002606:	d91c      	bls.n	8002642 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68d9      	ldr	r1, [r3, #12]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3b1e      	subs	r3, #30
 800261a:	2207      	movs	r2, #7
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	4019      	ands	r1, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6898      	ldr	r0, [r3, #8]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	3b1e      	subs	r3, #30
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	e019      	b.n	8002676 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6919      	ldr	r1, [r3, #16]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	2207      	movs	r2, #7
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	4019      	ands	r1, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6898      	ldr	r0, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	fa00 f203 	lsl.w	r2, r0, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b10      	cmp	r3, #16
 800267c:	d003      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002682:	2b11      	cmp	r3, #17
 8002684:	d132      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <HAL_ADC_ConfigChannel+0x1e4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d125      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d126      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d11a      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026b6:	4b13      	ldr	r3, [pc, #76]	; (8002704 <HAL_ADC_ConfigChannel+0x1e8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a13      	ldr	r2, [pc, #76]	; (8002708 <HAL_ADC_ConfigChannel+0x1ec>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	0c9a      	lsrs	r2, r3, #18
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026cc:	e002      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f9      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x1b2>
 80026da:	e007      	b.n	80026ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	40012400 	.word	0x40012400
 8002704:	2000007c 	.word	0x2000007c
 8002708:	431bde83 	.word	0x431bde83

0800270c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d040      	beq.n	80027ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <ADC_Enable+0xac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <ADC_Enable+0xb0>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	0c9b      	lsrs	r3, r3, #18
 8002746:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002748:	e002      	b.n	8002750 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3b01      	subs	r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002756:	f7ff fce1 	bl	800211c <HAL_GetTick>
 800275a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800275c:	e01f      	b.n	800279e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800275e:	f7ff fcdd 	bl	800211c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d918      	bls.n	800279e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d011      	beq.n	800279e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e007      	b.n	80027ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d1d8      	bne.n	800275e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2000007c 	.word	0x2000007c
 80027bc:	431bde83 	.word	0x431bde83

080027c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d12e      	bne.n	8002838 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027ea:	f7ff fc97 	bl	800211c <HAL_GetTick>
 80027ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027f0:	e01b      	b.n	800282a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027f2:	f7ff fc93 	bl	800211c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d914      	bls.n	800282a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10d      	bne.n	800282a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e007      	b.n	800283a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d0dc      	beq.n	80027f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002858:	2b00      	cmp	r3, #0
 800285a:	d127      	bne.n	80028ac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002872:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002876:	d115      	bne.n	80028a4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fe1d 	bl	80024e4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80028aa:	e004      	b.n	80028b6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f7ff fe12 	bl	80024f6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	f043 0204 	orr.w	r2, r3, #4
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff fe01 	bl	8002508 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_ADCEx_Calibration_Start+0x1e>
 800292a:	2302      	movs	r3, #2
 800292c:	e097      	b.n	8002a5e <HAL_ADCEx_Calibration_Start+0x14e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ff42 	bl	80027c0 <ADC_ConversionStop_Disable>
 800293c:	4603      	mov	r3, r0
 800293e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff fee3 	bl	800270c <ADC_Enable>
 8002946:	4603      	mov	r3, r0
 8002948:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f040 8081 	bne.w	8002a54 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800295a:	f023 0302 	bic.w	r3, r3, #2
 800295e:	f043 0202 	orr.w	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002966:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <HAL_ADCEx_Calibration_Start+0x158>)
 8002968:	681c      	ldr	r4, [r3, #0]
 800296a:	2002      	movs	r0, #2
 800296c:	f002 f838 	bl	80049e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002970:	4603      	mov	r3, r0
 8002972:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002976:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002978:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800297a:	e002      	b.n	8002982 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3b01      	subs	r3, #1
 8002980:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f9      	bne.n	800297c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0208 	orr.w	r2, r2, #8
 8002996:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002998:	f7ff fbc0 	bl	800211c <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800299e:	e01b      	b.n	80029d8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80029a0:	f7ff fbbc 	bl	800211c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b0a      	cmp	r3, #10
 80029ac:	d914      	bls.n	80029d8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	f023 0312 	bic.w	r3, r3, #18
 80029c4:	f043 0210 	orr.w	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e042      	b.n	8002a5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1dc      	bne.n	80029a0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0204 	orr.w	r2, r2, #4
 80029f4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80029f6:	f7ff fb91 	bl	800211c <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80029fc:	e01b      	b.n	8002a36 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80029fe:	f7ff fb8d 	bl	800211c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b0a      	cmp	r3, #10
 8002a0a:	d914      	bls.n	8002a36 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	f023 0312 	bic.w	r3, r3, #18
 8002a22:	f043 0210 	orr.w	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e013      	b.n	8002a5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1dc      	bne.n	80029fe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	f023 0303 	bic.w	r3, r3, #3
 8002a4c:	f043 0201 	orr.w	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000007c 	.word	0x2000007c

08002a6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0ed      	b.n	8002c5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe f812 	bl	8000ab4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa0:	f7ff fb3c 	bl	800211c <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002aa6:	e012      	b.n	8002ace <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002aa8:	f7ff fb38 	bl	800211c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b0a      	cmp	r3, #10
 8002ab4:	d90b      	bls.n	8002ace <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2205      	movs	r2, #5
 8002ac6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0c5      	b.n	8002c5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0e5      	beq.n	8002aa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0202 	bic.w	r2, r2, #2
 8002aea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aec:	f7ff fb16 	bl	800211c <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002af2:	e012      	b.n	8002b1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002af4:	f7ff fb12 	bl	800211c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b0a      	cmp	r3, #10
 8002b00:	d90b      	bls.n	8002b1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2205      	movs	r2, #5
 8002b12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e09f      	b.n	8002c5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e5      	bne.n	8002af4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7e1b      	ldrb	r3, [r3, #24]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d108      	bne.n	8002b42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e007      	b.n	8002b52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	7e5b      	ldrb	r3, [r3, #25]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d108      	bne.n	8002b6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e007      	b.n	8002b7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7e9b      	ldrb	r3, [r3, #26]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d108      	bne.n	8002b96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0220 	orr.w	r2, r2, #32
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e007      	b.n	8002ba6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0220 	bic.w	r2, r2, #32
 8002ba4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7edb      	ldrb	r3, [r3, #27]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0210 	bic.w	r2, r2, #16
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e007      	b.n	8002bd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0210 	orr.w	r2, r2, #16
 8002bce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7f1b      	ldrb	r3, [r3, #28]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d108      	bne.n	8002bea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0208 	orr.w	r2, r2, #8
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e007      	b.n	8002bfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0208 	bic.w	r2, r2, #8
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7f5b      	ldrb	r3, [r3, #29]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d108      	bne.n	8002c14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0204 	orr.w	r2, r2, #4
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e007      	b.n	8002c24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0204 	bic.w	r2, r2, #4
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	ea42 0103 	orr.w	r1, r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	1e5a      	subs	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b087      	sub	sp, #28
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c78:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d003      	beq.n	8002c88 <HAL_CAN_ConfigFilter+0x26>
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	f040 80aa 	bne.w	8002ddc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d123      	bne.n	8002d0a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	401a      	ands	r2, r3
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ce4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3248      	adds	r2, #72	; 0x48
 8002cea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cfe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d00:	6979      	ldr	r1, [r7, #20]
 8002d02:	3348      	adds	r3, #72	; 0x48
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d122      	bne.n	8002d58 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3248      	adds	r2, #72	; 0x48
 8002d38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	3348      	adds	r3, #72	; 0x48
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d72:	e007      	b.n	8002d84 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002d9e:	e007      	b.n	8002db0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dce:	f023 0201 	bic.w	r2, r3, #1
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e006      	b.n	8002dea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d12e      	bne.n	8002e66 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e20:	f7ff f97c 	bl	800211c <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e26:	e012      	b.n	8002e4e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e28:	f7ff f978 	bl	800211c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b0a      	cmp	r3, #10
 8002e34:	d90b      	bls.n	8002e4e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2205      	movs	r2, #5
 8002e46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e012      	b.n	8002e74 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1e5      	bne.n	8002e28 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e006      	b.n	8002e74 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e90:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d003      	beq.n	8002ea8 <HAL_CAN_AddTxMessage+0x2c>
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	f040 80ad 	bne.w	8003002 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8095 	beq.w	8002ff2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	0e1b      	lsrs	r3, r3, #24
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10d      	bne.n	8002f00 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	6809      	ldr	r1, [r1, #0]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	3318      	adds	r3, #24
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	440b      	add	r3, r1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	e00f      	b.n	8002f20 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f0a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f10:	68f9      	ldr	r1, [r7, #12]
 8002f12:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002f14:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	3318      	adds	r3, #24
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	440b      	add	r3, r1
 8002f1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3318      	adds	r3, #24
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	440b      	add	r3, r1
 8002f30:	3304      	adds	r3, #4
 8002f32:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	7d1b      	ldrb	r3, [r3, #20]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d111      	bne.n	8002f60 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3318      	adds	r3, #24
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	4413      	add	r3, r2
 8002f48:	3304      	adds	r3, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	6811      	ldr	r1, [r2, #0]
 8002f50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3318      	adds	r3, #24
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3307      	adds	r3, #7
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	061a      	lsls	r2, r3, #24
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3306      	adds	r3, #6
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	041b      	lsls	r3, r3, #16
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3305      	adds	r3, #5
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	3204      	adds	r2, #4
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	4610      	mov	r0, r2
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	6811      	ldr	r1, [r2, #0]
 8002f88:	ea43 0200 	orr.w	r2, r3, r0
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	440b      	add	r3, r1
 8002f92:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3303      	adds	r3, #3
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	061a      	lsls	r2, r3, #24
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	041b      	lsls	r3, r3, #16
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3301      	adds	r3, #1
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	7812      	ldrb	r2, [r2, #0]
 8002fb8:	4610      	mov	r0, r2
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	6811      	ldr	r1, [r2, #0]
 8002fbe:	ea43 0200 	orr.w	r2, r3, r0
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	440b      	add	r3, r1
 8002fc8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002fcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3318      	adds	r3, #24
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4413      	add	r3, r2
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	6811      	ldr	r1, [r2, #0]
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	3318      	adds	r3, #24
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	440b      	add	r3, r1
 8002fec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e00e      	b.n	8003010 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e006      	b.n	8003010 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
  }
}
 8003010:	4618      	mov	r0, r3
 8003012:	3724      	adds	r7, #36	; 0x24
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800301a:	b480      	push	{r7}
 800301c:	b087      	sub	sp, #28
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800302e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d003      	beq.n	800303e <HAL_CAN_GetRxMessage+0x24>
 8003036:	7dfb      	ldrb	r3, [r7, #23]
 8003038:	2b02      	cmp	r3, #2
 800303a:	f040 8103 	bne.w	8003244 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10e      	bne.n	8003062 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d116      	bne.n	8003080 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0f7      	b.n	8003252 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d107      	bne.n	8003080 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0e8      	b.n	8003252 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	331b      	adds	r3, #27
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	4413      	add	r3, r2
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0204 	and.w	r2, r3, #4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10c      	bne.n	80030b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	331b      	adds	r3, #27
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	4413      	add	r3, r2
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	0d5b      	lsrs	r3, r3, #21
 80030ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e00b      	b.n	80030d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	331b      	adds	r3, #27
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	4413      	add	r3, r2
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	08db      	lsrs	r3, r3, #3
 80030c8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	331b      	adds	r3, #27
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	4413      	add	r3, r2
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0202 	and.w	r2, r3, #2
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	331b      	adds	r3, #27
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	4413      	add	r3, r2
 80030f2:	3304      	adds	r3, #4
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2208      	movs	r2, #8
 8003102:	611a      	str	r2, [r3, #16]
 8003104:	e00b      	b.n	800311e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	331b      	adds	r3, #27
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	4413      	add	r3, r2
 8003112:	3304      	adds	r3, #4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	331b      	adds	r3, #27
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b2da      	uxtb	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	331b      	adds	r3, #27
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	4413      	add	r3, r2
 8003142:	3304      	adds	r3, #4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	b29a      	uxth	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	4413      	add	r3, r2
 8003158:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	4413      	add	r3, r2
 800316e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0a1a      	lsrs	r2, r3, #8
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	4413      	add	r3, r2
 8003188:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	0c1a      	lsrs	r2, r3, #16
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	3302      	adds	r3, #2
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	0e1a      	lsrs	r2, r3, #24
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	3303      	adds	r3, #3
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	3304      	adds	r3, #4
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	0a1a      	lsrs	r2, r3, #8
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	3305      	adds	r3, #5
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	0c1a      	lsrs	r2, r3, #16
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	3306      	adds	r3, #6
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	4413      	add	r3, r2
 8003208:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0e1a      	lsrs	r2, r3, #24
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	3307      	adds	r3, #7
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d108      	bne.n	8003230 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0220 	orr.w	r2, r2, #32
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	e007      	b.n	8003240 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	e006      	b.n	8003252 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800326c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d002      	beq.n	800327a <HAL_CAN_ActivateNotification+0x1e>
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d109      	bne.n	800328e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6959      	ldr	r1, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e006      	b.n	800329c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
  }
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b08a      	sub	sp, #40	; 0x28
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d07c      	beq.n	80033e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d023      	beq.n	800333e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2201      	movs	r2, #1
 80032fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f983 	bl	8003614 <HAL_CAN_TxMailbox0CompleteCallback>
 800330e:	e016      	b.n	800333e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d004      	beq.n	8003324 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	e00c      	b.n	800333e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
 8003336:	e002      	b.n	800333e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f986 	bl	800364a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d024      	beq.n	8003392 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003350:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f962 	bl	8003626 <HAL_CAN_TxMailbox1CompleteCallback>
 8003362:	e016      	b.n	8003392 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	e00c      	b.n	8003392 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
 800338a:	e002      	b.n	8003392 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f965 	bl	800365c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d024      	beq.n	80033e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f941 	bl	8003638 <HAL_CAN_TxMailbox2CompleteCallback>
 80033b6:	e016      	b.n	80033e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	e00c      	b.n	80033e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d004      	beq.n	80033e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
 80033de:	e002      	b.n	80033e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f944 	bl	800366e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00c      	beq.n	800340a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f003 0310 	and.w	r3, r3, #16
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003400:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2210      	movs	r2, #16
 8003408:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d006      	beq.n	800342c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2208      	movs	r2, #8
 8003424:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f92a 	bl	8003680 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7fd fbcb 	bl	8000be0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00c      	beq.n	800346e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003464:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2210      	movs	r2, #16
 800346c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00b      	beq.n	8003490 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2208      	movs	r2, #8
 8003488:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f90a 	bl	80036a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f8f2 	bl	8003692 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2210      	movs	r2, #16
 80034c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8f3 	bl	80036b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d006      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2208      	movs	r2, #8
 80034ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f8eb 	bl	80036c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d07b      	beq.n	80035f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d072      	beq.n	80035ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003560:	2b00      	cmp	r3, #0
 8003562:	d043      	beq.n	80035ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800356a:	2b00      	cmp	r3, #0
 800356c:	d03e      	beq.n	80035ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003574:	2b60      	cmp	r3, #96	; 0x60
 8003576:	d02b      	beq.n	80035d0 <HAL_CAN_IRQHandler+0x32a>
 8003578:	2b60      	cmp	r3, #96	; 0x60
 800357a:	d82e      	bhi.n	80035da <HAL_CAN_IRQHandler+0x334>
 800357c:	2b50      	cmp	r3, #80	; 0x50
 800357e:	d022      	beq.n	80035c6 <HAL_CAN_IRQHandler+0x320>
 8003580:	2b50      	cmp	r3, #80	; 0x50
 8003582:	d82a      	bhi.n	80035da <HAL_CAN_IRQHandler+0x334>
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d019      	beq.n	80035bc <HAL_CAN_IRQHandler+0x316>
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d826      	bhi.n	80035da <HAL_CAN_IRQHandler+0x334>
 800358c:	2b30      	cmp	r3, #48	; 0x30
 800358e:	d010      	beq.n	80035b2 <HAL_CAN_IRQHandler+0x30c>
 8003590:	2b30      	cmp	r3, #48	; 0x30
 8003592:	d822      	bhi.n	80035da <HAL_CAN_IRQHandler+0x334>
 8003594:	2b10      	cmp	r3, #16
 8003596:	d002      	beq.n	800359e <HAL_CAN_IRQHandler+0x2f8>
 8003598:	2b20      	cmp	r3, #32
 800359a:	d005      	beq.n	80035a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800359c:	e01d      	b.n	80035da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	f043 0308 	orr.w	r3, r3, #8
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035a6:	e019      	b.n	80035dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	f043 0310 	orr.w	r3, r3, #16
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035b0:	e014      	b.n	80035dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	f043 0320 	orr.w	r3, r3, #32
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ba:	e00f      	b.n	80035dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035c4:	e00a      	b.n	80035dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ce:	e005      	b.n	80035dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035d8:	e000      	b.n	80035dc <HAL_CAN_IRQHandler+0x336>
            break;
 80035da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80035ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2204      	movs	r2, #4
 80035f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f867 	bl	80036da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800360c:	bf00      	nop
 800360e:	3728      	adds	r7, #40	; 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr

08003626 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003708:	4013      	ands	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371e:	4a04      	ldr	r2, [pc, #16]	; (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	60d3      	str	r3, [r2, #12]
}
 8003724:	bf00      	nop
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <__NVIC_GetPriorityGrouping+0x18>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0307 	and.w	r3, r3, #7
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db0b      	blt.n	800377a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4906      	ldr	r1, [pc, #24]	; (8003784 <__NVIC_EnableIRQ+0x34>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2001      	movs	r0, #1
 8003772:	fa00 f202 	lsl.w	r2, r0, r2
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003850:	d301      	bcc.n	8003856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003852:	2301      	movs	r3, #1
 8003854:	e00f      	b.n	8003876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003856:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <SysTick_Config+0x40>)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800385e:	210f      	movs	r1, #15
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	f7ff ff90 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <SysTick_Config+0x40>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800386e:	4b04      	ldr	r3, [pc, #16]	; (8003880 <SysTick_Config+0x40>)
 8003870:	2207      	movs	r2, #7
 8003872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	e000e010 	.word	0xe000e010

08003884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff2d 	bl	80036ec <__NVIC_SetPriorityGrouping>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	4603      	mov	r3, r0
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038ac:	f7ff ff42 	bl	8003734 <__NVIC_GetPriorityGrouping>
 80038b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	6978      	ldr	r0, [r7, #20]
 80038b8:	f7ff ff90 	bl	80037dc <NVIC_EncodePriority>
 80038bc:	4602      	mov	r2, r0
 80038be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff5f 	bl	8003788 <__NVIC_SetPriority>
}
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ff35 	bl	8003750 <__NVIC_EnableIRQ>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ffa2 	bl	8003840 <SysTick_Config>
 80038fc:	4603      	mov	r3, r0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e043      	b.n	80039a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_DMA_Init+0xa8>)
 8003926:	4413      	add	r3, r2
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_DMA_Init+0xac>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	009a      	lsls	r2, r3, #2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <HAL_DMA_Init+0xb0>)
 800393a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003952:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003956:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr
 80039b0:	bffdfff8 	.word	0xbffdfff8
 80039b4:	cccccccd 	.word	0xcccccccd
 80039b8:	40020000 	.word	0x40020000

080039bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_DMA_Start_IT+0x20>
 80039d8:	2302      	movs	r3, #2
 80039da:	e04b      	b.n	8003a74 <HAL_DMA_Start_IT+0xb8>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d13a      	bne.n	8003a66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	68b9      	ldr	r1, [r7, #8]
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f937 	bl	8003c88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 020e 	orr.w	r2, r2, #14
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e00f      	b.n	8003a54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 020a 	orr.w	r2, r2, #10
 8003a52:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	e005      	b.n	8003a72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	2204      	movs	r2, #4
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d04f      	beq.n	8003b44 <HAL_DMA_IRQHandler+0xc8>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d04a      	beq.n	8003b44 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d107      	bne.n	8003acc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0204 	bic.w	r2, r2, #4
 8003aca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a66      	ldr	r2, [pc, #408]	; (8003c6c <HAL_DMA_IRQHandler+0x1f0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d029      	beq.n	8003b2a <HAL_DMA_IRQHandler+0xae>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a65      	ldr	r2, [pc, #404]	; (8003c70 <HAL_DMA_IRQHandler+0x1f4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d022      	beq.n	8003b26 <HAL_DMA_IRQHandler+0xaa>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a63      	ldr	r2, [pc, #396]	; (8003c74 <HAL_DMA_IRQHandler+0x1f8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01a      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xa4>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a62      	ldr	r2, [pc, #392]	; (8003c78 <HAL_DMA_IRQHandler+0x1fc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d012      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x9e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a60      	ldr	r2, [pc, #384]	; (8003c7c <HAL_DMA_IRQHandler+0x200>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00a      	beq.n	8003b14 <HAL_DMA_IRQHandler+0x98>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a5f      	ldr	r2, [pc, #380]	; (8003c80 <HAL_DMA_IRQHandler+0x204>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d102      	bne.n	8003b0e <HAL_DMA_IRQHandler+0x92>
 8003b08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b0c:	e00e      	b.n	8003b2c <HAL_DMA_IRQHandler+0xb0>
 8003b0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b12:	e00b      	b.n	8003b2c <HAL_DMA_IRQHandler+0xb0>
 8003b14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b18:	e008      	b.n	8003b2c <HAL_DMA_IRQHandler+0xb0>
 8003b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b1e:	e005      	b.n	8003b2c <HAL_DMA_IRQHandler+0xb0>
 8003b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b24:	e002      	b.n	8003b2c <HAL_DMA_IRQHandler+0xb0>
 8003b26:	2340      	movs	r3, #64	; 0x40
 8003b28:	e000      	b.n	8003b2c <HAL_DMA_IRQHandler+0xb0>
 8003b2a:	2304      	movs	r3, #4
 8003b2c:	4a55      	ldr	r2, [pc, #340]	; (8003c84 <HAL_DMA_IRQHandler+0x208>)
 8003b2e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8094 	beq.w	8003c62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b42:	e08e      	b.n	8003c62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2202      	movs	r2, #2
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d056      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x186>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d051      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 020a 	bic.w	r2, r2, #10
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a38      	ldr	r2, [pc, #224]	; (8003c6c <HAL_DMA_IRQHandler+0x1f0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d029      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x166>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a37      	ldr	r2, [pc, #220]	; (8003c70 <HAL_DMA_IRQHandler+0x1f4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d022      	beq.n	8003bde <HAL_DMA_IRQHandler+0x162>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a35      	ldr	r2, [pc, #212]	; (8003c74 <HAL_DMA_IRQHandler+0x1f8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01a      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x15c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a34      	ldr	r2, [pc, #208]	; (8003c78 <HAL_DMA_IRQHandler+0x1fc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d012      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x156>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <HAL_DMA_IRQHandler+0x200>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00a      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x150>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a31      	ldr	r2, [pc, #196]	; (8003c80 <HAL_DMA_IRQHandler+0x204>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d102      	bne.n	8003bc6 <HAL_DMA_IRQHandler+0x14a>
 8003bc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bc4:	e00e      	b.n	8003be4 <HAL_DMA_IRQHandler+0x168>
 8003bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bca:	e00b      	b.n	8003be4 <HAL_DMA_IRQHandler+0x168>
 8003bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bd0:	e008      	b.n	8003be4 <HAL_DMA_IRQHandler+0x168>
 8003bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bd6:	e005      	b.n	8003be4 <HAL_DMA_IRQHandler+0x168>
 8003bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bdc:	e002      	b.n	8003be4 <HAL_DMA_IRQHandler+0x168>
 8003bde:	2320      	movs	r3, #32
 8003be0:	e000      	b.n	8003be4 <HAL_DMA_IRQHandler+0x168>
 8003be2:	2302      	movs	r3, #2
 8003be4:	4a27      	ldr	r2, [pc, #156]	; (8003c84 <HAL_DMA_IRQHandler+0x208>)
 8003be6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d034      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c00:	e02f      	b.n	8003c62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2208      	movs	r2, #8
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d028      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x1e8>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d023      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 020e 	bic.w	r2, r2, #14
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	2101      	movs	r1, #1
 8003c36:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
    }
  }
  return;
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
}
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40020008 	.word	0x40020008
 8003c70:	4002001c 	.word	0x4002001c
 8003c74:	40020030 	.word	0x40020030
 8003c78:	40020044 	.word	0x40020044
 8003c7c:	40020058 	.word	0x40020058
 8003c80:	4002006c 	.word	0x4002006c
 8003c84:	40020000 	.word	0x40020000

08003c88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b10      	cmp	r3, #16
 8003cb4:	d108      	bne.n	8003cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cc6:	e007      	b.n	8003cd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	60da      	str	r2, [r3, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
	...

08003ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b08b      	sub	sp, #44	; 0x2c
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf6:	e169      	b.n	8003fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	f040 8158 	bne.w	8003fc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4a9a      	ldr	r2, [pc, #616]	; (8003f84 <HAL_GPIO_Init+0x2a0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d05e      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d20:	4a98      	ldr	r2, [pc, #608]	; (8003f84 <HAL_GPIO_Init+0x2a0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d875      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d26:	4a98      	ldr	r2, [pc, #608]	; (8003f88 <HAL_GPIO_Init+0x2a4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d058      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d2c:	4a96      	ldr	r2, [pc, #600]	; (8003f88 <HAL_GPIO_Init+0x2a4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d86f      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d32:	4a96      	ldr	r2, [pc, #600]	; (8003f8c <HAL_GPIO_Init+0x2a8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d052      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d38:	4a94      	ldr	r2, [pc, #592]	; (8003f8c <HAL_GPIO_Init+0x2a8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d869      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d3e:	4a94      	ldr	r2, [pc, #592]	; (8003f90 <HAL_GPIO_Init+0x2ac>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d04c      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d44:	4a92      	ldr	r2, [pc, #584]	; (8003f90 <HAL_GPIO_Init+0x2ac>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d863      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d4a:	4a92      	ldr	r2, [pc, #584]	; (8003f94 <HAL_GPIO_Init+0x2b0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d046      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
 8003d50:	4a90      	ldr	r2, [pc, #576]	; (8003f94 <HAL_GPIO_Init+0x2b0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d85d      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d56:	2b12      	cmp	r3, #18
 8003d58:	d82a      	bhi.n	8003db0 <HAL_GPIO_Init+0xcc>
 8003d5a:	2b12      	cmp	r3, #18
 8003d5c:	d859      	bhi.n	8003e12 <HAL_GPIO_Init+0x12e>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_GPIO_Init+0x80>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003ddf 	.word	0x08003ddf
 8003d68:	08003db9 	.word	0x08003db9
 8003d6c:	08003dcb 	.word	0x08003dcb
 8003d70:	08003e0d 	.word	0x08003e0d
 8003d74:	08003e13 	.word	0x08003e13
 8003d78:	08003e13 	.word	0x08003e13
 8003d7c:	08003e13 	.word	0x08003e13
 8003d80:	08003e13 	.word	0x08003e13
 8003d84:	08003e13 	.word	0x08003e13
 8003d88:	08003e13 	.word	0x08003e13
 8003d8c:	08003e13 	.word	0x08003e13
 8003d90:	08003e13 	.word	0x08003e13
 8003d94:	08003e13 	.word	0x08003e13
 8003d98:	08003e13 	.word	0x08003e13
 8003d9c:	08003e13 	.word	0x08003e13
 8003da0:	08003e13 	.word	0x08003e13
 8003da4:	08003e13 	.word	0x08003e13
 8003da8:	08003dc1 	.word	0x08003dc1
 8003dac:	08003dd5 	.word	0x08003dd5
 8003db0:	4a79      	ldr	r2, [pc, #484]	; (8003f98 <HAL_GPIO_Init+0x2b4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003db6:	e02c      	b.n	8003e12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	623b      	str	r3, [r7, #32]
          break;
 8003dbe:	e029      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	623b      	str	r3, [r7, #32]
          break;
 8003dc8:	e024      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	623b      	str	r3, [r7, #32]
          break;
 8003dd2:	e01f      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	623b      	str	r3, [r7, #32]
          break;
 8003ddc:	e01a      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003de6:	2304      	movs	r3, #4
 8003de8:	623b      	str	r3, [r7, #32]
          break;
 8003dea:	e013      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003df4:	2308      	movs	r3, #8
 8003df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	611a      	str	r2, [r3, #16]
          break;
 8003dfe:	e009      	b.n	8003e14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e00:	2308      	movs	r3, #8
 8003e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	615a      	str	r2, [r3, #20]
          break;
 8003e0a:	e003      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	623b      	str	r3, [r7, #32]
          break;
 8003e10:	e000      	b.n	8003e14 <HAL_GPIO_Init+0x130>
          break;
 8003e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2bff      	cmp	r3, #255	; 0xff
 8003e18:	d801      	bhi.n	8003e1e <HAL_GPIO_Init+0x13a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	e001      	b.n	8003e22 <HAL_GPIO_Init+0x13e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2bff      	cmp	r3, #255	; 0xff
 8003e28:	d802      	bhi.n	8003e30 <HAL_GPIO_Init+0x14c>
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	e002      	b.n	8003e36 <HAL_GPIO_Init+0x152>
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	3b08      	subs	r3, #8
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	210f      	movs	r1, #15
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	401a      	ands	r2, r3
 8003e48:	6a39      	ldr	r1, [r7, #32]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e50:	431a      	orrs	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80b1 	beq.w	8003fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e64:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <HAL_GPIO_Init+0x2b8>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	4a4c      	ldr	r2, [pc, #304]	; (8003f9c <HAL_GPIO_Init+0x2b8>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6193      	str	r3, [r2, #24]
 8003e70:	4b4a      	ldr	r3, [pc, #296]	; (8003f9c <HAL_GPIO_Init+0x2b8>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e7c:	4a48      	ldr	r2, [pc, #288]	; (8003fa0 <HAL_GPIO_Init+0x2bc>)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	3302      	adds	r3, #2
 8003e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	220f      	movs	r2, #15
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a40      	ldr	r2, [pc, #256]	; (8003fa4 <HAL_GPIO_Init+0x2c0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <HAL_GPIO_Init+0x1ec>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3f      	ldr	r2, [pc, #252]	; (8003fa8 <HAL_GPIO_Init+0x2c4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00d      	beq.n	8003ecc <HAL_GPIO_Init+0x1e8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3e      	ldr	r2, [pc, #248]	; (8003fac <HAL_GPIO_Init+0x2c8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <HAL_GPIO_Init+0x1e4>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3d      	ldr	r2, [pc, #244]	; (8003fb0 <HAL_GPIO_Init+0x2cc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <HAL_GPIO_Init+0x1e0>
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e006      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	e004      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e002      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_GPIO_Init+0x1ee>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	f002 0203 	and.w	r2, r2, #3
 8003ed8:	0092      	lsls	r2, r2, #2
 8003eda:	4093      	lsls	r3, r2
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ee2:	492f      	ldr	r1, [pc, #188]	; (8003fa0 <HAL_GPIO_Init+0x2bc>)
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	089b      	lsrs	r3, r3, #2
 8003ee8:	3302      	adds	r3, #2
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	492c      	ldr	r1, [pc, #176]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]
 8003f08:	e006      	b.n	8003f18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	4928      	ldr	r1, [pc, #160]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d006      	beq.n	8003f32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f24:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	4922      	ldr	r1, [pc, #136]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60cb      	str	r3, [r1, #12]
 8003f30:	e006      	b.n	8003f40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	491e      	ldr	r1, [pc, #120]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	4918      	ldr	r1, [pc, #96]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	604b      	str	r3, [r1, #4]
 8003f58:	e006      	b.n	8003f68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	4914      	ldr	r1, [pc, #80]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d021      	beq.n	8003fb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	490e      	ldr	r1, [pc, #56]	; (8003fb4 <HAL_GPIO_Init+0x2d0>)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e021      	b.n	8003fc6 <HAL_GPIO_Init+0x2e2>
 8003f82:	bf00      	nop
 8003f84:	10320000 	.word	0x10320000
 8003f88:	10310000 	.word	0x10310000
 8003f8c:	10220000 	.word	0x10220000
 8003f90:	10210000 	.word	0x10210000
 8003f94:	10120000 	.word	0x10120000
 8003f98:	10110000 	.word	0x10110000
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40010800 	.word	0x40010800
 8003fa8:	40010c00 	.word	0x40010c00
 8003fac:	40011000 	.word	0x40011000
 8003fb0:	40011400 	.word	0x40011400
 8003fb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_GPIO_Init+0x304>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	4909      	ldr	r1, [pc, #36]	; (8003fe8 <HAL_GPIO_Init+0x304>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	3301      	adds	r3, #1
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f47f ae8e 	bne.w	8003cf8 <HAL_GPIO_Init+0x14>
  }
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	372c      	adds	r7, #44	; 0x2c
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	40010400 	.word	0x40010400

08003fec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	887b      	ldrh	r3, [r7, #2]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e001      	b.n	800400e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800400e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	807b      	strh	r3, [r7, #2]
 8004026:	4613      	mov	r3, r2
 8004028:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800402a:	787b      	ldrb	r3, [r7, #1]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004030:	887a      	ldrh	r2, [r7, #2]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004036:	e003      	b.n	8004040 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004038:	887b      	ldrh	r3, [r7, #2]
 800403a:	041a      	lsls	r2, r3, #16
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	611a      	str	r2, [r3, #16]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
	...

0800404c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d006      	beq.n	8004070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004062:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc ffdc 	bl	8001028 <HAL_GPIO_EXTI_Callback>
  }
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40010400 	.word	0x40010400

0800407c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e272      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8087 	beq.w	80041aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800409c:	4b92      	ldr	r3, [pc, #584]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 030c 	and.w	r3, r3, #12
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d00c      	beq.n	80040c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040a8:	4b8f      	ldr	r3, [pc, #572]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d112      	bne.n	80040da <HAL_RCC_OscConfig+0x5e>
 80040b4:	4b8c      	ldr	r3, [pc, #560]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d10b      	bne.n	80040da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c2:	4b89      	ldr	r3, [pc, #548]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d06c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x12c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d168      	bne.n	80041a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e24c      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x76>
 80040e4:	4b80      	ldr	r3, [pc, #512]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a7f      	ldr	r2, [pc, #508]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80040ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	e02e      	b.n	8004150 <HAL_RCC_OscConfig+0xd4>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0x98>
 80040fa:	4b7b      	ldr	r3, [pc, #492]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7a      	ldr	r2, [pc, #488]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 8004100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b78      	ldr	r3, [pc, #480]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a77      	ldr	r2, [pc, #476]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 800410c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e01d      	b.n	8004150 <HAL_RCC_OscConfig+0xd4>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0xbc>
 800411e:	4b72      	ldr	r3, [pc, #456]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a71      	ldr	r2, [pc, #452]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 8004124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b6f      	ldr	r3, [pc, #444]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a6e      	ldr	r2, [pc, #440]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0xd4>
 8004138:	4b6b      	ldr	r3, [pc, #428]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a6a      	ldr	r2, [pc, #424]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b68      	ldr	r3, [pc, #416]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a67      	ldr	r2, [pc, #412]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd ffe0 	bl	800211c <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004160:	f7fd ffdc 	bl	800211c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e200      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	4b5d      	ldr	r3, [pc, #372]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0xe4>
 800417e:	e014      	b.n	80041aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fd ffcc 	bl	800211c <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004188:	f7fd ffc8 	bl	800211c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1ec      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419a:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x10c>
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d063      	beq.n	800427e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041b6:	4b4c      	ldr	r3, [pc, #304]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041c2:	4b49      	ldr	r3, [pc, #292]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d11c      	bne.n	8004208 <HAL_RCC_OscConfig+0x18c>
 80041ce:	4b46      	ldr	r3, [pc, #280]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d116      	bne.n	8004208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	4b43      	ldr	r3, [pc, #268]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_RCC_OscConfig+0x176>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1c0      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f2:	4b3d      	ldr	r3, [pc, #244]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4939      	ldr	r1, [pc, #228]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	e03a      	b.n	800427e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	4b36      	ldr	r3, [pc, #216]	; (80042ec <HAL_RCC_OscConfig+0x270>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7fd ff81 	bl	800211c <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421e:	f7fd ff7d 	bl	800211c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1a1      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004230:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4927      	ldr	r1, [pc, #156]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
 8004250:	e015      	b.n	800427e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004252:	4b26      	ldr	r3, [pc, #152]	; (80042ec <HAL_RCC_OscConfig+0x270>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fd ff60 	bl	800211c <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004260:	f7fd ff5c 	bl	800211c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e180      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d03a      	beq.n	8004300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d019      	beq.n	80042c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004292:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004298:	f7fd ff40 	bl	800211c <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fd ff3c 	bl	800211c <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e160      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042be:	2001      	movs	r0, #1
 80042c0:	f000 faba 	bl	8004838 <RCC_Delay>
 80042c4:	e01c      	b.n	8004300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042cc:	f7fd ff26 	bl	800211c <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d2:	e00f      	b.n	80042f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d4:	f7fd ff22 	bl	800211c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d908      	bls.n	80042f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e146      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000
 80042ec:	42420000 	.word	0x42420000
 80042f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	4b92      	ldr	r3, [pc, #584]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e9      	bne.n	80042d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80a6 	beq.w	800445a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004312:	4b8b      	ldr	r3, [pc, #556]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10d      	bne.n	800433a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	4b88      	ldr	r3, [pc, #544]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4a87      	ldr	r2, [pc, #540]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004328:	61d3      	str	r3, [r2, #28]
 800432a:	4b85      	ldr	r3, [pc, #532]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	4b82      	ldr	r3, [pc, #520]	; (8004544 <HAL_RCC_OscConfig+0x4c8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d118      	bne.n	8004378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004346:	4b7f      	ldr	r3, [pc, #508]	; (8004544 <HAL_RCC_OscConfig+0x4c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a7e      	ldr	r2, [pc, #504]	; (8004544 <HAL_RCC_OscConfig+0x4c8>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004352:	f7fd fee3 	bl	800211c <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435a:	f7fd fedf 	bl	800211c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b64      	cmp	r3, #100	; 0x64
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e103      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	4b75      	ldr	r3, [pc, #468]	; (8004544 <HAL_RCC_OscConfig+0x4c8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x312>
 8004380:	4b6f      	ldr	r3, [pc, #444]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4a6e      	ldr	r2, [pc, #440]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6213      	str	r3, [r2, #32]
 800438c:	e02d      	b.n	80043ea <HAL_RCC_OscConfig+0x36e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x334>
 8004396:	4b6a      	ldr	r3, [pc, #424]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	4a69      	ldr	r2, [pc, #420]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	6213      	str	r3, [r2, #32]
 80043a2:	4b67      	ldr	r3, [pc, #412]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4a66      	ldr	r2, [pc, #408]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80043a8:	f023 0304 	bic.w	r3, r3, #4
 80043ac:	6213      	str	r3, [r2, #32]
 80043ae:	e01c      	b.n	80043ea <HAL_RCC_OscConfig+0x36e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b05      	cmp	r3, #5
 80043b6:	d10c      	bne.n	80043d2 <HAL_RCC_OscConfig+0x356>
 80043b8:	4b61      	ldr	r3, [pc, #388]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4a60      	ldr	r2, [pc, #384]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80043be:	f043 0304 	orr.w	r3, r3, #4
 80043c2:	6213      	str	r3, [r2, #32]
 80043c4:	4b5e      	ldr	r3, [pc, #376]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	4a5d      	ldr	r2, [pc, #372]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	6213      	str	r3, [r2, #32]
 80043d0:	e00b      	b.n	80043ea <HAL_RCC_OscConfig+0x36e>
 80043d2:	4b5b      	ldr	r3, [pc, #364]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	4a5a      	ldr	r2, [pc, #360]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	6213      	str	r3, [r2, #32]
 80043de:	4b58      	ldr	r3, [pc, #352]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4a57      	ldr	r2, [pc, #348]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80043e4:	f023 0304 	bic.w	r3, r3, #4
 80043e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d015      	beq.n	800441e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fd fe93 	bl	800211c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f8:	e00a      	b.n	8004410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fd fe8f 	bl	800211c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	f241 3288 	movw	r2, #5000	; 0x1388
 8004408:	4293      	cmp	r3, r2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e0b1      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004410:	4b4b      	ldr	r3, [pc, #300]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0ee      	beq.n	80043fa <HAL_RCC_OscConfig+0x37e>
 800441c:	e014      	b.n	8004448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441e:	f7fd fe7d 	bl	800211c <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004424:	e00a      	b.n	800443c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f7fd fe79 	bl	800211c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f241 3288 	movw	r2, #5000	; 0x1388
 8004434:	4293      	cmp	r3, r2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e09b      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443c:	4b40      	ldr	r3, [pc, #256]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1ee      	bne.n	8004426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d105      	bne.n	800445a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444e:	4b3c      	ldr	r3, [pc, #240]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	4a3b      	ldr	r2, [pc, #236]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8087 	beq.w	8004572 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004464:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b08      	cmp	r3, #8
 800446e:	d061      	beq.n	8004534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	2b02      	cmp	r3, #2
 8004476:	d146      	bne.n	8004506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004478:	4b33      	ldr	r3, [pc, #204]	; (8004548 <HAL_RCC_OscConfig+0x4cc>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447e:	f7fd fe4d 	bl	800211c <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004486:	f7fd fe49 	bl	800211c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e06d      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004498:	4b29      	ldr	r3, [pc, #164]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f0      	bne.n	8004486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ac:	d108      	bne.n	80044c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044ae:	4b24      	ldr	r3, [pc, #144]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	4921      	ldr	r1, [pc, #132]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044c0:	4b1f      	ldr	r3, [pc, #124]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a19      	ldr	r1, [r3, #32]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	430b      	orrs	r3, r1
 80044d2:	491b      	ldr	r1, [pc, #108]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x4cc>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7fd fe1d 	bl	800211c <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fd fe19 	bl	800211c <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e03d      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x46a>
 8004504:	e035      	b.n	8004572 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_RCC_OscConfig+0x4cc>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd fe06 	bl	800211c <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd fe02 	bl	800211c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e026      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCC_OscConfig+0x4c4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x498>
 8004532:	e01e      	b.n	8004572 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d107      	bne.n	800454c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e019      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
 8004540:	40021000 	.word	0x40021000
 8004544:	40007000 	.word	0x40007000
 8004548:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_OscConfig+0x500>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	429a      	cmp	r2, r3
 800455e:	d106      	bne.n	800456e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d001      	beq.n	8004572 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000

08004580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0d0      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004594:	4b6a      	ldr	r3, [pc, #424]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d910      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a2:	4b67      	ldr	r3, [pc, #412]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 0207 	bic.w	r2, r3, #7
 80045aa:	4965      	ldr	r1, [pc, #404]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b63      	ldr	r3, [pc, #396]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0b8      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045dc:	4b59      	ldr	r3, [pc, #356]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a58      	ldr	r2, [pc, #352]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f4:	4b53      	ldr	r3, [pc, #332]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a52      	ldr	r2, [pc, #328]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004600:	4b50      	ldr	r3, [pc, #320]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	494d      	ldr	r1, [pc, #308]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d040      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d115      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e07f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e073      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	4b3d      	ldr	r3, [pc, #244]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e06b      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800465e:	4b39      	ldr	r3, [pc, #228]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f023 0203 	bic.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4936      	ldr	r1, [pc, #216]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004670:	f7fd fd54 	bl	800211c <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	e00a      	b.n	800468e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004678:	f7fd fd50 	bl	800211c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e053      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468e:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 020c 	and.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	429a      	cmp	r2, r3
 800469e:	d1eb      	bne.n	8004678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d210      	bcs.n	80046d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b24      	ldr	r3, [pc, #144]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 0207 	bic.w	r2, r3, #7
 80046b6:	4922      	ldr	r1, [pc, #136]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	4b20      	ldr	r3, [pc, #128]	; (8004740 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e032      	b.n	8004736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046dc:	4b19      	ldr	r3, [pc, #100]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4916      	ldr	r1, [pc, #88]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	490e      	ldr	r1, [pc, #56]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800470e:	f000 f821 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8004712:	4602      	mov	r2, r0
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	490a      	ldr	r1, [pc, #40]	; (8004748 <HAL_RCC_ClockConfig+0x1c8>)
 8004720:	5ccb      	ldrb	r3, [r1, r3]
 8004722:	fa22 f303 	lsr.w	r3, r2, r3
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <HAL_RCC_ClockConfig+0x1cc>)
 8004728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_ClockConfig+0x1d0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd fcb2 	bl	8002098 <HAL_InitTick>

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40022000 	.word	0x40022000
 8004744:	40021000 	.word	0x40021000
 8004748:	08007630 	.word	0x08007630
 800474c:	2000007c 	.word	0x2000007c
 8004750:	20000080 	.word	0x20000080

08004754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	2300      	movs	r3, #0
 8004768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800476e:	4b1e      	ldr	r3, [pc, #120]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 030c 	and.w	r3, r3, #12
 800477a:	2b04      	cmp	r3, #4
 800477c:	d002      	beq.n	8004784 <HAL_RCC_GetSysClockFreq+0x30>
 800477e:	2b08      	cmp	r3, #8
 8004780:	d003      	beq.n	800478a <HAL_RCC_GetSysClockFreq+0x36>
 8004782:	e027      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004784:	4b19      	ldr	r3, [pc, #100]	; (80047ec <HAL_RCC_GetSysClockFreq+0x98>)
 8004786:	613b      	str	r3, [r7, #16]
      break;
 8004788:	e027      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	0c9b      	lsrs	r3, r3, #18
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004794:	5cd3      	ldrb	r3, [r2, r3]
 8004796:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d010      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047a2:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	0c5b      	lsrs	r3, r3, #17
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	4a11      	ldr	r2, [pc, #68]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80047ae:	5cd3      	ldrb	r3, [r2, r3]
 80047b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <HAL_RCC_GetSysClockFreq+0x98>)
 80047b6:	fb03 f202 	mul.w	r2, r3, r2
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	e004      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a0c      	ldr	r2, [pc, #48]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047c8:	fb02 f303 	mul.w	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	613b      	str	r3, [r7, #16]
      break;
 80047d2:	e002      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_GetSysClockFreq+0x98>)
 80047d6:	613b      	str	r3, [r7, #16]
      break;
 80047d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047da:	693b      	ldr	r3, [r7, #16]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000
 80047ec:	007a1200 	.word	0x007a1200
 80047f0:	08007648 	.word	0x08007648
 80047f4:	08007658 	.word	0x08007658
 80047f8:	003d0900 	.word	0x003d0900

080047fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004800:	4b02      	ldr	r3, [pc, #8]	; (800480c <HAL_RCC_GetHCLKFreq+0x10>)
 8004802:	681b      	ldr	r3, [r3, #0]
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr
 800480c:	2000007c 	.word	0x2000007c

08004810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004814:	f7ff fff2 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	0adb      	lsrs	r3, r3, #11
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4903      	ldr	r1, [pc, #12]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	08007640 	.word	0x08007640

08004838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <RCC_Delay+0x34>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <RCC_Delay+0x38>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0a5b      	lsrs	r3, r3, #9
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004854:	bf00      	nop
  }
  while (Delay --);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1e5a      	subs	r2, r3, #1
 800485a:	60fa      	str	r2, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f9      	bne.n	8004854 <RCC_Delay+0x1c>
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	2000007c 	.word	0x2000007c
 8004870:	10624dd3 	.word	0x10624dd3

08004874 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d07d      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004890:	2300      	movs	r3, #0
 8004892:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004894:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10d      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a0:	4b4c      	ldr	r3, [pc, #304]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	4a4b      	ldr	r2, [pc, #300]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048aa:	61d3      	str	r3, [r2, #28]
 80048ac:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048bc:	4b46      	ldr	r3, [pc, #280]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d118      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c8:	4b43      	ldr	r3, [pc, #268]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a42      	ldr	r2, [pc, #264]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048d4:	f7fd fc22 	bl	800211c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048da:	e008      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048dc:	f7fd fc1e 	bl	800211c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e06d      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ee:	4b3a      	ldr	r3, [pc, #232]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d02e      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	429a      	cmp	r2, r3
 8004916:	d027      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004918:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004922:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004924:	2201      	movs	r2, #1
 8004926:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004928:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800492e:	4a29      	ldr	r2, [pc, #164]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d014      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493e:	f7fd fbed 	bl	800211c <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004944:	e00a      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004946:	f7fd fbe9 	bl	800211c <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	f241 3288 	movw	r2, #5000	; 0x1388
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e036      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800495c:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ee      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004968:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4917      	ldr	r1, [pc, #92]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004976:	4313      	orrs	r3, r2
 8004978:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004980:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	490b      	ldr	r1, [pc, #44]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049b6:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	4904      	ldr	r1, [pc, #16]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40007000 	.word	0x40007000
 80049dc:	42420440 	.word	0x42420440

080049e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	f200 808a 	bhi.w	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d045      	beq.n	8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d075      	beq.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004a16:	e082      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004a18:	4b46      	ldr	r3, [pc, #280]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004a1e:	4b45      	ldr	r3, [pc, #276]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d07b      	beq.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	0c9b      	lsrs	r3, r3, #18
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	4a41      	ldr	r2, [pc, #260]	; (8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004a34:	5cd3      	ldrb	r3, [r2, r3]
 8004a36:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d015      	beq.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a42:	4b3c      	ldr	r3, [pc, #240]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	0c5b      	lsrs	r3, r3, #17
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	4a3b      	ldr	r2, [pc, #236]	; (8004b3c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00d      	beq.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004a5c:	4a38      	ldr	r2, [pc, #224]	; (8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	e004      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	4a34      	ldr	r2, [pc, #208]	; (8004b44 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
 8004a76:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004a78:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a84:	d102      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	61bb      	str	r3, [r7, #24]
      break;
 8004a8a:	e04a      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4a2d      	ldr	r2, [pc, #180]	; (8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	61bb      	str	r3, [r7, #24]
      break;
 8004a9a:	e042      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004a9c:	4b25      	ldr	r3, [pc, #148]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aac:	d108      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004ab8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e01f      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aca:	d109      	bne.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004acc:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004ad8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	e00f      	b.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aea:	d11c      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004aec:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d016      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004af8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004afc:	61bb      	str	r3, [r7, #24]
      break;
 8004afe:	e012      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004b00:	e011      	b.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004b02:	f7ff fe85 	bl	8004810 <HAL_RCC_GetPCLK2Freq>
 8004b06:	4602      	mov	r2, r0
 8004b08:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	0b9b      	lsrs	r3, r3, #14
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	3301      	adds	r3, #1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1a:	61bb      	str	r3, [r7, #24]
      break;
 8004b1c:	e004      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b1e:	bf00      	nop
 8004b20:	e002      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b22:	bf00      	nop
 8004b24:	e000      	b.n	8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004b26:	bf00      	nop
    }
  }
  return (frequency);
 8004b28:	69bb      	ldr	r3, [r7, #24]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40021000 	.word	0x40021000
 8004b38:	0800765c 	.word	0x0800765c
 8004b3c:	0800766c 	.word	0x0800766c
 8004b40:	007a1200 	.word	0x007a1200
 8004b44:	003d0900 	.word	0x003d0900
 8004b48:	aaaaaaab 	.word	0xaaaaaaab

08004b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e076      	b.n	8004c4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d108      	bne.n	8004b78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b6e:	d009      	beq.n	8004b84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	61da      	str	r2, [r3, #28]
 8004b76:	e005      	b.n	8004b84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fc fd8a 	bl	80016b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a1b      	ldr	r3, [r3, #32]
 8004c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c08:	ea42 0103 	orr.w	r1, r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	0c1a      	lsrs	r2, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f002 0204 	and.w	r2, r2, #4
 8004c2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c62:	2301      	movs	r3, #1
 8004c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_SPI_TransmitReceive+0x26>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e198      	b.n	8004fac <HAL_SPI_TransmitReceive+0x358>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c82:	f7fd fa4b 	bl	800211c <HAL_GetTick>
 8004c86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d00f      	beq.n	8004cc4 <HAL_SPI_TransmitReceive+0x70>
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004caa:	d107      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d103      	bne.n	8004cbc <HAL_SPI_TransmitReceive+0x68>
 8004cb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d003      	beq.n	8004cc4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cc2:	e16d      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_SPI_TransmitReceive+0x82>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_SPI_TransmitReceive+0x82>
 8004cd0:	887b      	ldrh	r3, [r7, #2]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cdc:	e160      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d003      	beq.n	8004cf2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2205      	movs	r2, #5
 8004cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	887a      	ldrh	r2, [r7, #2]
 8004d02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	887a      	ldrh	r2, [r7, #2]
 8004d08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	887a      	ldrh	r2, [r7, #2]
 8004d1a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d32:	2b40      	cmp	r3, #64	; 0x40
 8004d34:	d007      	beq.n	8004d46 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d4e:	d17c      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_SPI_TransmitReceive+0x10a>
 8004d58:	8b7b      	ldrh	r3, [r7, #26]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d16a      	bne.n	8004e34 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	881a      	ldrh	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	1c9a      	adds	r2, r3, #2
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d82:	e057      	b.n	8004e34 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d11b      	bne.n	8004dca <HAL_SPI_TransmitReceive+0x176>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d016      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x176>
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d113      	bne.n	8004dca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	881a      	ldrh	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	1c9a      	adds	r2, r3, #2
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d119      	bne.n	8004e0c <HAL_SPI_TransmitReceive+0x1b8>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d014      	beq.n	8004e0c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	b292      	uxth	r2, r2
 8004dee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	1c9a      	adds	r2, r3, #2
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e0c:	f7fd f986 	bl	800211c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d80b      	bhi.n	8004e34 <HAL_SPI_TransmitReceive+0x1e0>
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d007      	beq.n	8004e34 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e32:	e0b5      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1a2      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x130>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d19d      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x130>
 8004e48:	e080      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_SPI_TransmitReceive+0x204>
 8004e52:	8b7b      	ldrh	r3, [r7, #26]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d16f      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	330c      	adds	r3, #12
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e7e:	e05b      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d11c      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x274>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d017      	beq.n	8004ec8 <HAL_SPI_TransmitReceive+0x274>
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d114      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d119      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0x2b6>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d014      	beq.n	8004f0a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f06:	2301      	movs	r3, #1
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f0a:	f7fd f907 	bl	800211c <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d803      	bhi.n	8004f22 <HAL_SPI_TransmitReceive+0x2ce>
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d102      	bne.n	8004f28 <HAL_SPI_TransmitReceive+0x2d4>
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d107      	bne.n	8004f38 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f36:	e033      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d19e      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x22c>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d199      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 f8b7 	bl	80050c4 <SPI_EndRxTxTransaction>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d006      	beq.n	8004f6a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f68:	e01a      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f96:	e003      	b.n	8004fa0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3730      	adds	r7, #48	; 0x30
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fc4:	f7fd f8aa 	bl	800211c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fd4:	f7fd f8a2 	bl	800211c <HAL_GetTick>
 8004fd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fda:	4b39      	ldr	r3, [pc, #228]	; (80050c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	015b      	lsls	r3, r3, #5
 8004fe0:	0d1b      	lsrs	r3, r3, #20
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	fb02 f303 	mul.w	r3, r2, r3
 8004fe8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fea:	e054      	b.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff2:	d050      	beq.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ff4:	f7fd f892 	bl	800211c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	429a      	cmp	r2, r3
 8005002:	d902      	bls.n	800500a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d13d      	bne.n	8005086 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005018:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005022:	d111      	bne.n	8005048 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800502c:	d004      	beq.n	8005038 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005036:	d107      	bne.n	8005048 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005046:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005050:	d10f      	bne.n	8005072 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005070:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e017      	b.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	3b01      	subs	r3, #1
 8005094:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4013      	ands	r3, r2
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d19b      	bne.n	8004fec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3720      	adds	r7, #32
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	2000007c 	.word	0x2000007c

080050c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2200      	movs	r2, #0
 80050d8:	2180      	movs	r1, #128	; 0x80
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f7ff ff6a 	bl	8004fb4 <SPI_WaitFlagStateUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f043 0220 	orr.w	r2, r3, #32
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e000      	b.n	80050f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e041      	b.n	8005196 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fc fe6c 	bl	8001e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 fea6 	bl	8005e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e03a      	b.n	800522e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a18      	ldr	r2, [pc, #96]	; (8005238 <HAL_TIM_Base_Start_IT+0x98>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x58>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d009      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x58>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a14      	ldr	r2, [pc, #80]	; (800523c <HAL_TIM_Base_Start_IT+0x9c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x58>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a13      	ldr	r2, [pc, #76]	; (8005240 <HAL_TIM_Base_Start_IT+0xa0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d111      	bne.n	800521c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b06      	cmp	r3, #6
 8005208:	d010      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0201 	orr.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521a:	e007      	b.n	800522c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800

08005244 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0201 	bic.w	r2, r2, #1
 800525a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	f241 1311 	movw	r3, #4369	; 0x1111
 8005266:	4013      	ands	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10f      	bne.n	800528c <HAL_TIM_Base_Stop_IT+0x48>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6a1a      	ldr	r2, [r3, #32]
 8005272:	f240 4344 	movw	r3, #1092	; 0x444
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <HAL_TIM_Base_Stop_IT+0x48>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e041      	b.n	8005336 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f839 	bl	800533e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f000 fdd6 	bl	8005e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e041      	b.n	80053e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f839 	bl	80053ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3304      	adds	r3, #4
 800538c:	4619      	mov	r1, r3
 800538e:	4610      	mov	r0, r2
 8005390:	f000 fd7e 	bl	8005e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <HAL_TIM_PWM_Start+0x24>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e022      	b.n	800546a <HAL_TIM_PWM_Start+0x6a>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b04      	cmp	r3, #4
 8005428:	d109      	bne.n	800543e <HAL_TIM_PWM_Start+0x3e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	bf14      	ite	ne
 8005436:	2301      	movne	r3, #1
 8005438:	2300      	moveq	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	e015      	b.n	800546a <HAL_TIM_PWM_Start+0x6a>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d109      	bne.n	8005458 <HAL_TIM_PWM_Start+0x58>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e008      	b.n	800546a <HAL_TIM_PWM_Start+0x6a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b01      	cmp	r3, #1
 8005462:	bf14      	ite	ne
 8005464:	2301      	movne	r3, #1
 8005466:	2300      	moveq	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e05e      	b.n	8005530 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d104      	bne.n	8005482 <HAL_TIM_PWM_Start+0x82>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005480:	e013      	b.n	80054aa <HAL_TIM_PWM_Start+0xaa>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b04      	cmp	r3, #4
 8005486:	d104      	bne.n	8005492 <HAL_TIM_PWM_Start+0x92>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005490:	e00b      	b.n	80054aa <HAL_TIM_PWM_Start+0xaa>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b08      	cmp	r3, #8
 8005496:	d104      	bne.n	80054a2 <HAL_TIM_PWM_Start+0xa2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a0:	e003      	b.n	80054aa <HAL_TIM_PWM_Start+0xaa>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2201      	movs	r2, #1
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 ff6c 	bl	8006390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <HAL_TIM_PWM_Start+0x138>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d107      	bne.n	80054d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a18      	ldr	r2, [pc, #96]	; (8005538 <HAL_TIM_PWM_Start+0x138>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_TIM_PWM_Start+0xfa>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d009      	beq.n	80054fa <HAL_TIM_PWM_Start+0xfa>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a14      	ldr	r2, [pc, #80]	; (800553c <HAL_TIM_PWM_Start+0x13c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_TIM_PWM_Start+0xfa>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a12      	ldr	r2, [pc, #72]	; (8005540 <HAL_TIM_PWM_Start+0x140>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d111      	bne.n	800551e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b06      	cmp	r3, #6
 800550a:	d010      	beq.n	800552e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551c:	e007      	b.n	800552e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40012c00 	.word	0x40012c00
 800553c:	40000400 	.word	0x40000400
 8005540:	40000800 	.word	0x40000800

08005544 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	6839      	ldr	r1, [r7, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f000 ff1a 	bl	8006390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a29      	ldr	r2, [pc, #164]	; (8005608 <HAL_TIM_PWM_Stop+0xc4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d117      	bne.n	8005596 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6a1a      	ldr	r2, [r3, #32]
 800556c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005570:	4013      	ands	r3, r2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <HAL_TIM_PWM_Stop+0x52>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	f240 4344 	movw	r3, #1092	; 0x444
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d107      	bne.n	8005596 <HAL_TIM_PWM_Stop+0x52>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	f241 1311 	movw	r3, #4369	; 0x1111
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10f      	bne.n	80055c6 <HAL_TIM_PWM_Stop+0x82>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	f240 4344 	movw	r3, #1092	; 0x444
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <HAL_TIM_PWM_Stop+0x82>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_PWM_Stop+0x92>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d4:	e013      	b.n	80055fe <HAL_TIM_PWM_Stop+0xba>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_PWM_Stop+0xa2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e4:	e00b      	b.n	80055fe <HAL_TIM_PWM_Stop+0xba>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_PWM_Stop+0xb2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f4:	e003      	b.n	80055fe <HAL_TIM_PWM_Stop+0xba>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40012c00 	.word	0x40012c00

0800560c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e093      	b.n	8005748 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d106      	bne.n	800563a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fc fc33 	bl	8001ea0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6812      	ldr	r2, [r2, #0]
 800564c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005650:	f023 0307 	bic.w	r3, r3, #7
 8005654:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3304      	adds	r3, #4
 800565e:	4619      	mov	r1, r3
 8005660:	4610      	mov	r0, r2
 8005662:	f000 fc15 	bl	8005e90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568e:	f023 0303 	bic.w	r3, r3, #3
 8005692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	4313      	orrs	r3, r2
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80056ac:	f023 030c 	bic.w	r3, r3, #12
 80056b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	4313      	orrs	r3, r2
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	011a      	lsls	r2, r3, #4
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	031b      	lsls	r3, r3, #12
 80056dc:	4313      	orrs	r3, r2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	4313      	orrs	r3, r2
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005760:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005768:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005770:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005778:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d110      	bne.n	80057a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d102      	bne.n	800578c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005786:	7b7b      	ldrb	r3, [r7, #13]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d001      	beq.n	8005790 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e069      	b.n	8005864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a0:	e031      	b.n	8005806 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d110      	bne.n	80057ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057a8:	7bbb      	ldrb	r3, [r7, #14]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d102      	bne.n	80057b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057ae:	7b3b      	ldrb	r3, [r7, #12]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d001      	beq.n	80057b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e055      	b.n	8005864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057c8:	e01d      	b.n	8005806 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d108      	bne.n	80057e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057d0:	7bbb      	ldrb	r3, [r7, #14]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d105      	bne.n	80057e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057d6:	7b7b      	ldrb	r3, [r7, #13]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d102      	bne.n	80057e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057dc:	7b3b      	ldrb	r3, [r7, #12]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d001      	beq.n	80057e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e03e      	b.n	8005864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2202      	movs	r2, #2
 80057f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2202      	movs	r2, #2
 8005802:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_TIM_Encoder_Start+0xc4>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d008      	beq.n	8005824 <HAL_TIM_Encoder_Start+0xd4>
 8005812:	e00f      	b.n	8005834 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2201      	movs	r2, #1
 800581a:	2100      	movs	r1, #0
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fdb7 	bl	8006390 <TIM_CCxChannelCmd>
      break;
 8005822:	e016      	b.n	8005852 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2201      	movs	r2, #1
 800582a:	2104      	movs	r1, #4
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fdaf 	bl	8006390 <TIM_CCxChannelCmd>
      break;
 8005832:	e00e      	b.n	8005852 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2201      	movs	r2, #1
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fda7 	bl	8006390 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2201      	movs	r2, #1
 8005848:	2104      	movs	r1, #4
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fda0 	bl	8006390 <TIM_CCxChannelCmd>
      break;
 8005850:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0201 	orr.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b02      	cmp	r3, #2
 8005880:	d122      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b02      	cmp	r3, #2
 800588e:	d11b      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0202 	mvn.w	r2, #2
 8005898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fad2 	bl	8005e58 <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fac5 	bl	8005e46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fad4 	bl	8005e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d122      	bne.n	800591c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d11b      	bne.n	800591c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0204 	mvn.w	r2, #4
 80058ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 faa8 	bl	8005e58 <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa9b 	bl	8005e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 faaa 	bl	8005e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b08      	cmp	r3, #8
 8005928:	d122      	bne.n	8005970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b08      	cmp	r3, #8
 8005936:	d11b      	bne.n	8005970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0208 	mvn.w	r2, #8
 8005940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2204      	movs	r2, #4
 8005946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fa7e 	bl	8005e58 <HAL_TIM_IC_CaptureCallback>
 800595c:	e005      	b.n	800596a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa71 	bl	8005e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fa80 	bl	8005e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0310 	and.w	r3, r3, #16
 800597a:	2b10      	cmp	r3, #16
 800597c:	d122      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b10      	cmp	r3, #16
 800598a:	d11b      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0210 	mvn.w	r2, #16
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2208      	movs	r2, #8
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa54 	bl	8005e58 <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa47 	bl	8005e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fa56 	bl	8005e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10e      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d107      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0201 	mvn.w	r2, #1
 80059e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fc fb00 	bl	8001ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b80      	cmp	r3, #128	; 0x80
 80059fc:	d10e      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a08:	2b80      	cmp	r3, #128	; 0x80
 8005a0a:	d107      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fd96 	bl	8006548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d10e      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d107      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fa1a 	bl	8005e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d10e      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d107      	bne.n	8005a74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0220 	mvn.w	r2, #32
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fd61 	bl	8006536 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e048      	b.n	8005b2c <HAL_TIM_OC_ConfigChannel+0xb0>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b0c      	cmp	r3, #12
 8005aa6:	d839      	bhi.n	8005b1c <HAL_TIM_OC_ConfigChannel+0xa0>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005ae5 	.word	0x08005ae5
 8005ab4:	08005b1d 	.word	0x08005b1d
 8005ab8:	08005b1d 	.word	0x08005b1d
 8005abc:	08005b1d 	.word	0x08005b1d
 8005ac0:	08005af3 	.word	0x08005af3
 8005ac4:	08005b1d 	.word	0x08005b1d
 8005ac8:	08005b1d 	.word	0x08005b1d
 8005acc:	08005b1d 	.word	0x08005b1d
 8005ad0:	08005b01 	.word	0x08005b01
 8005ad4:	08005b1d 	.word	0x08005b1d
 8005ad8:	08005b1d 	.word	0x08005b1d
 8005adc:	08005b1d 	.word	0x08005b1d
 8005ae0:	08005b0f 	.word	0x08005b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fa32 	bl	8005f54 <TIM_OC1_SetConfig>
      break;
 8005af0:	e017      	b.n	8005b22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fa91 	bl	8006020 <TIM_OC2_SetConfig>
      break;
 8005afe:	e010      	b.n	8005b22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 faf4 	bl	80060f4 <TIM_OC3_SetConfig>
      break;
 8005b0c:	e009      	b.n	8005b22 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fb57 	bl	80061c8 <TIM_OC4_SetConfig>
      break;
 8005b1a:	e002      	b.n	8005b22 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e0ae      	b.n	8005cb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b0c      	cmp	r3, #12
 8005b5e:	f200 809f 	bhi.w	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b9d 	.word	0x08005b9d
 8005b6c:	08005ca1 	.word	0x08005ca1
 8005b70:	08005ca1 	.word	0x08005ca1
 8005b74:	08005ca1 	.word	0x08005ca1
 8005b78:	08005bdd 	.word	0x08005bdd
 8005b7c:	08005ca1 	.word	0x08005ca1
 8005b80:	08005ca1 	.word	0x08005ca1
 8005b84:	08005ca1 	.word	0x08005ca1
 8005b88:	08005c1f 	.word	0x08005c1f
 8005b8c:	08005ca1 	.word	0x08005ca1
 8005b90:	08005ca1 	.word	0x08005ca1
 8005b94:	08005ca1 	.word	0x08005ca1
 8005b98:	08005c5f 	.word	0x08005c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f9d6 	bl	8005f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0208 	orr.w	r2, r2, #8
 8005bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0204 	bic.w	r2, r2, #4
 8005bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	619a      	str	r2, [r3, #24]
      break;
 8005bda:	e064      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fa1c 	bl	8006020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6999      	ldr	r1, [r3, #24]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	021a      	lsls	r2, r3, #8
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	619a      	str	r2, [r3, #24]
      break;
 8005c1c:	e043      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fa65 	bl	80060f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 0208 	orr.w	r2, r2, #8
 8005c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0204 	bic.w	r2, r2, #4
 8005c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69d9      	ldr	r1, [r3, #28]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	61da      	str	r2, [r3, #28]
      break;
 8005c5c:	e023      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 faaf 	bl	80061c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69d9      	ldr	r1, [r3, #28]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	021a      	lsls	r2, r3, #8
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	61da      	str	r2, [r3, #28]
      break;
 8005c9e:	e002      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e0b4      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x186>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68ba      	ldr	r2, [r7, #8]
 8005d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d0c:	d03e      	beq.n	8005d8c <HAL_TIM_ConfigClockSource+0xd4>
 8005d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d12:	f200 8087 	bhi.w	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1a:	f000 8086 	beq.w	8005e2a <HAL_TIM_ConfigClockSource+0x172>
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d22:	d87f      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d24:	2b70      	cmp	r3, #112	; 0x70
 8005d26:	d01a      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0xa6>
 8005d28:	2b70      	cmp	r3, #112	; 0x70
 8005d2a:	d87b      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d2c:	2b60      	cmp	r3, #96	; 0x60
 8005d2e:	d050      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x11a>
 8005d30:	2b60      	cmp	r3, #96	; 0x60
 8005d32:	d877      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d34:	2b50      	cmp	r3, #80	; 0x50
 8005d36:	d03c      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0xfa>
 8005d38:	2b50      	cmp	r3, #80	; 0x50
 8005d3a:	d873      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d3c:	2b40      	cmp	r3, #64	; 0x40
 8005d3e:	d058      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0x13a>
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d86f      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d44:	2b30      	cmp	r3, #48	; 0x30
 8005d46:	d064      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x15a>
 8005d48:	2b30      	cmp	r3, #48	; 0x30
 8005d4a:	d86b      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d060      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x15a>
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d867      	bhi.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05c      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x15a>
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d05a      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0x15a>
 8005d5c:	e062      	b.n	8005e24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6899      	ldr	r1, [r3, #8]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f000 faf0 	bl	8006352 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	609a      	str	r2, [r3, #8]
      break;
 8005d8a:	e04f      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6818      	ldr	r0, [r3, #0]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	6899      	ldr	r1, [r3, #8]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f000 fad9 	bl	8006352 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dae:	609a      	str	r2, [r3, #8]
      break;
 8005db0:	e03c      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6859      	ldr	r1, [r3, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f000 fa50 	bl	8006264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2150      	movs	r1, #80	; 0x50
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 faa7 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8005dd0:	e02c      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6818      	ldr	r0, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	6859      	ldr	r1, [r3, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	461a      	mov	r2, r3
 8005de0:	f000 fa6e 	bl	80062c0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2160      	movs	r1, #96	; 0x60
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fa97 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8005df0:	e01c      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6859      	ldr	r1, [r3, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f000 fa30 	bl	8006264 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2140      	movs	r1, #64	; 0x40
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fa87 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8005e10:	e00c      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	f000 fa7e 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8005e22:	e003      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
      break;
 8005e28:	e000      	b.n	8005e2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr

08005e6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr
	...

08005e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a29      	ldr	r2, [pc, #164]	; (8005f48 <TIM_Base_SetConfig+0xb8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <TIM_Base_SetConfig+0x30>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eae:	d007      	beq.n	8005ec0 <TIM_Base_SetConfig+0x30>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a26      	ldr	r2, [pc, #152]	; (8005f4c <TIM_Base_SetConfig+0xbc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_Base_SetConfig+0x30>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a25      	ldr	r2, [pc, #148]	; (8005f50 <TIM_Base_SetConfig+0xc0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d108      	bne.n	8005ed2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a1c      	ldr	r2, [pc, #112]	; (8005f48 <TIM_Base_SetConfig+0xb8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00b      	beq.n	8005ef2 <TIM_Base_SetConfig+0x62>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee0:	d007      	beq.n	8005ef2 <TIM_Base_SetConfig+0x62>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <TIM_Base_SetConfig+0xbc>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_Base_SetConfig+0x62>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a18      	ldr	r2, [pc, #96]	; (8005f50 <TIM_Base_SetConfig+0xc0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d108      	bne.n	8005f04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a07      	ldr	r2, [pc, #28]	; (8005f48 <TIM_Base_SetConfig+0xb8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d103      	bne.n	8005f38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	615a      	str	r2, [r3, #20]
}
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800

08005f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f023 0201 	bic.w	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f023 0302 	bic.w	r3, r3, #2
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a1c      	ldr	r2, [pc, #112]	; (800601c <TIM_OC1_SetConfig+0xc8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10c      	bne.n	8005fca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0308 	bic.w	r3, r3, #8
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 0304 	bic.w	r3, r3, #4
 8005fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a13      	ldr	r2, [pc, #76]	; (800601c <TIM_OC1_SetConfig+0xc8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d111      	bne.n	8005ff6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	40012c00 	.word	0x40012c00

08006020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	f023 0210 	bic.w	r2, r3, #16
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 0320 	bic.w	r3, r3, #32
 800606a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a1d      	ldr	r2, [pc, #116]	; (80060f0 <TIM_OC2_SetConfig+0xd0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10d      	bne.n	800609c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a14      	ldr	r2, [pc, #80]	; (80060f0 <TIM_OC2_SetConfig+0xd0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d113      	bne.n	80060cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr
 80060f0:	40012c00 	.word	0x40012c00

080060f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0303 	bic.w	r3, r3, #3
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800613c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <TIM_OC3_SetConfig+0xd0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d10d      	bne.n	800616e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800616c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <TIM_OC3_SetConfig+0xd0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d113      	bne.n	800619e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800617c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	621a      	str	r2, [r3, #32]
}
 80061b8:	bf00      	nop
 80061ba:	371c      	adds	r7, #28
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40012c00 	.word	0x40012c00

080061c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b087      	sub	sp, #28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	031b      	lsls	r3, r3, #12
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a0f      	ldr	r2, [pc, #60]	; (8006260 <TIM_OC4_SetConfig+0x98>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d109      	bne.n	800623c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800622e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	019b      	lsls	r3, r3, #6
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	40012c00 	.word	0x40012c00

08006264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f023 0201 	bic.w	r2, r3, #1
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800628e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f023 030a 	bic.w	r3, r3, #10
 80062a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr

080062c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f023 0210 	bic.w	r2, r3, #16
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	031b      	lsls	r3, r3, #12
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	011b      	lsls	r3, r3, #4
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	4313      	orrs	r3, r2
 8006306:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	621a      	str	r2, [r3, #32]
}
 8006314:	bf00      	nop
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	f043 0307 	orr.w	r3, r3, #7
 8006340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	609a      	str	r2, [r3, #8]
}
 8006348:	bf00      	nop
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr

08006352 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006352:	b480      	push	{r7}
 8006354:	b087      	sub	sp, #28
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
 800635e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800636c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	021a      	lsls	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	431a      	orrs	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4313      	orrs	r3, r2
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	609a      	str	r2, [r3, #8]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr

08006390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f003 031f 	and.w	r3, r3, #31
 80063a2:	2201      	movs	r2, #1
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a1a      	ldr	r2, [r3, #32]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	43db      	mvns	r3, r3
 80063b2:	401a      	ands	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a1a      	ldr	r2, [r3, #32]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	fa01 f303 	lsl.w	r3, r1, r3
 80063c8:	431a      	orrs	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e046      	b.n	800647e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a16      	ldr	r2, [pc, #88]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00e      	beq.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643c:	d009      	beq.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a12      	ldr	r2, [pc, #72]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a10      	ldr	r2, [pc, #64]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d10c      	bne.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	4313      	orrs	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	bc80      	pop	{r7}
 8006486:	4770      	bx	lr
 8006488:	40012c00 	.word	0x40012c00
 800648c:	40000400 	.word	0x40000400
 8006490:	40000800 	.word	0x40000800

08006494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e03d      	b.n	800652c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr

08006536 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr

08006548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr
	...

0800655c <__assert_func>:
 800655c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800655e:	4614      	mov	r4, r2
 8006560:	461a      	mov	r2, r3
 8006562:	4b09      	ldr	r3, [pc, #36]	; (8006588 <__assert_func+0x2c>)
 8006564:	4605      	mov	r5, r0
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68d8      	ldr	r0, [r3, #12]
 800656a:	b14c      	cbz	r4, 8006580 <__assert_func+0x24>
 800656c:	4b07      	ldr	r3, [pc, #28]	; (800658c <__assert_func+0x30>)
 800656e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006572:	9100      	str	r1, [sp, #0]
 8006574:	462b      	mov	r3, r5
 8006576:	4906      	ldr	r1, [pc, #24]	; (8006590 <__assert_func+0x34>)
 8006578:	f000 f814 	bl	80065a4 <fiprintf>
 800657c:	f000 fbfe 	bl	8006d7c <abort>
 8006580:	4b04      	ldr	r3, [pc, #16]	; (8006594 <__assert_func+0x38>)
 8006582:	461c      	mov	r4, r3
 8006584:	e7f3      	b.n	800656e <__assert_func+0x12>
 8006586:	bf00      	nop
 8006588:	20000088 	.word	0x20000088
 800658c:	0800766e 	.word	0x0800766e
 8006590:	0800767b 	.word	0x0800767b
 8006594:	080076a9 	.word	0x080076a9

08006598 <__errno>:
 8006598:	4b01      	ldr	r3, [pc, #4]	; (80065a0 <__errno+0x8>)
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	20000088 	.word	0x20000088

080065a4 <fiprintf>:
 80065a4:	b40e      	push	{r1, r2, r3}
 80065a6:	b503      	push	{r0, r1, lr}
 80065a8:	4601      	mov	r1, r0
 80065aa:	ab03      	add	r3, sp, #12
 80065ac:	4805      	ldr	r0, [pc, #20]	; (80065c4 <fiprintf+0x20>)
 80065ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b2:	6800      	ldr	r0, [r0, #0]
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	f000 f85b 	bl	8006670 <_vfiprintf_r>
 80065ba:	b002      	add	sp, #8
 80065bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c0:	b003      	add	sp, #12
 80065c2:	4770      	bx	lr
 80065c4:	20000088 	.word	0x20000088

080065c8 <__libc_init_array>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	2600      	movs	r6, #0
 80065cc:	4d0c      	ldr	r5, [pc, #48]	; (8006600 <__libc_init_array+0x38>)
 80065ce:	4c0d      	ldr	r4, [pc, #52]	; (8006604 <__libc_init_array+0x3c>)
 80065d0:	1b64      	subs	r4, r4, r5
 80065d2:	10a4      	asrs	r4, r4, #2
 80065d4:	42a6      	cmp	r6, r4
 80065d6:	d109      	bne.n	80065ec <__libc_init_array+0x24>
 80065d8:	f000 ffea 	bl	80075b0 <_init>
 80065dc:	2600      	movs	r6, #0
 80065de:	4d0a      	ldr	r5, [pc, #40]	; (8006608 <__libc_init_array+0x40>)
 80065e0:	4c0a      	ldr	r4, [pc, #40]	; (800660c <__libc_init_array+0x44>)
 80065e2:	1b64      	subs	r4, r4, r5
 80065e4:	10a4      	asrs	r4, r4, #2
 80065e6:	42a6      	cmp	r6, r4
 80065e8:	d105      	bne.n	80065f6 <__libc_init_array+0x2e>
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f0:	4798      	blx	r3
 80065f2:	3601      	adds	r6, #1
 80065f4:	e7ee      	b.n	80065d4 <__libc_init_array+0xc>
 80065f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fa:	4798      	blx	r3
 80065fc:	3601      	adds	r6, #1
 80065fe:	e7f2      	b.n	80065e6 <__libc_init_array+0x1e>
 8006600:	08007744 	.word	0x08007744
 8006604:	08007744 	.word	0x08007744
 8006608:	08007744 	.word	0x08007744
 800660c:	08007748 	.word	0x08007748

08006610 <memset>:
 8006610:	4603      	mov	r3, r0
 8006612:	4402      	add	r2, r0
 8006614:	4293      	cmp	r3, r2
 8006616:	d100      	bne.n	800661a <memset+0xa>
 8006618:	4770      	bx	lr
 800661a:	f803 1b01 	strb.w	r1, [r3], #1
 800661e:	e7f9      	b.n	8006614 <memset+0x4>

08006620 <__sfputc_r>:
 8006620:	6893      	ldr	r3, [r2, #8]
 8006622:	b410      	push	{r4}
 8006624:	3b01      	subs	r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	6093      	str	r3, [r2, #8]
 800662a:	da07      	bge.n	800663c <__sfputc_r+0x1c>
 800662c:	6994      	ldr	r4, [r2, #24]
 800662e:	42a3      	cmp	r3, r4
 8006630:	db01      	blt.n	8006636 <__sfputc_r+0x16>
 8006632:	290a      	cmp	r1, #10
 8006634:	d102      	bne.n	800663c <__sfputc_r+0x1c>
 8006636:	bc10      	pop	{r4}
 8006638:	f000 bae0 	b.w	8006bfc <__swbuf_r>
 800663c:	6813      	ldr	r3, [r2, #0]
 800663e:	1c58      	adds	r0, r3, #1
 8006640:	6010      	str	r0, [r2, #0]
 8006642:	7019      	strb	r1, [r3, #0]
 8006644:	4608      	mov	r0, r1
 8006646:	bc10      	pop	{r4}
 8006648:	4770      	bx	lr

0800664a <__sfputs_r>:
 800664a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664c:	4606      	mov	r6, r0
 800664e:	460f      	mov	r7, r1
 8006650:	4614      	mov	r4, r2
 8006652:	18d5      	adds	r5, r2, r3
 8006654:	42ac      	cmp	r4, r5
 8006656:	d101      	bne.n	800665c <__sfputs_r+0x12>
 8006658:	2000      	movs	r0, #0
 800665a:	e007      	b.n	800666c <__sfputs_r+0x22>
 800665c:	463a      	mov	r2, r7
 800665e:	4630      	mov	r0, r6
 8006660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006664:	f7ff ffdc 	bl	8006620 <__sfputc_r>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d1f3      	bne.n	8006654 <__sfputs_r+0xa>
 800666c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006670 <_vfiprintf_r>:
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	460d      	mov	r5, r1
 8006676:	4614      	mov	r4, r2
 8006678:	4698      	mov	r8, r3
 800667a:	4606      	mov	r6, r0
 800667c:	b09d      	sub	sp, #116	; 0x74
 800667e:	b118      	cbz	r0, 8006688 <_vfiprintf_r+0x18>
 8006680:	6983      	ldr	r3, [r0, #24]
 8006682:	b90b      	cbnz	r3, 8006688 <_vfiprintf_r+0x18>
 8006684:	f000 fc98 	bl	8006fb8 <__sinit>
 8006688:	4b89      	ldr	r3, [pc, #548]	; (80068b0 <_vfiprintf_r+0x240>)
 800668a:	429d      	cmp	r5, r3
 800668c:	d11b      	bne.n	80066c6 <_vfiprintf_r+0x56>
 800668e:	6875      	ldr	r5, [r6, #4]
 8006690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006692:	07d9      	lsls	r1, r3, #31
 8006694:	d405      	bmi.n	80066a2 <_vfiprintf_r+0x32>
 8006696:	89ab      	ldrh	r3, [r5, #12]
 8006698:	059a      	lsls	r2, r3, #22
 800669a:	d402      	bmi.n	80066a2 <_vfiprintf_r+0x32>
 800669c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800669e:	f000 fd29 	bl	80070f4 <__retarget_lock_acquire_recursive>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	071b      	lsls	r3, r3, #28
 80066a6:	d501      	bpl.n	80066ac <_vfiprintf_r+0x3c>
 80066a8:	692b      	ldr	r3, [r5, #16]
 80066aa:	b9eb      	cbnz	r3, 80066e8 <_vfiprintf_r+0x78>
 80066ac:	4629      	mov	r1, r5
 80066ae:	4630      	mov	r0, r6
 80066b0:	f000 faf6 	bl	8006ca0 <__swsetup_r>
 80066b4:	b1c0      	cbz	r0, 80066e8 <_vfiprintf_r+0x78>
 80066b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066b8:	07dc      	lsls	r4, r3, #31
 80066ba:	d50e      	bpl.n	80066da <_vfiprintf_r+0x6a>
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	b01d      	add	sp, #116	; 0x74
 80066c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c6:	4b7b      	ldr	r3, [pc, #492]	; (80068b4 <_vfiprintf_r+0x244>)
 80066c8:	429d      	cmp	r5, r3
 80066ca:	d101      	bne.n	80066d0 <_vfiprintf_r+0x60>
 80066cc:	68b5      	ldr	r5, [r6, #8]
 80066ce:	e7df      	b.n	8006690 <_vfiprintf_r+0x20>
 80066d0:	4b79      	ldr	r3, [pc, #484]	; (80068b8 <_vfiprintf_r+0x248>)
 80066d2:	429d      	cmp	r5, r3
 80066d4:	bf08      	it	eq
 80066d6:	68f5      	ldreq	r5, [r6, #12]
 80066d8:	e7da      	b.n	8006690 <_vfiprintf_r+0x20>
 80066da:	89ab      	ldrh	r3, [r5, #12]
 80066dc:	0598      	lsls	r0, r3, #22
 80066de:	d4ed      	bmi.n	80066bc <_vfiprintf_r+0x4c>
 80066e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066e2:	f000 fd08 	bl	80070f6 <__retarget_lock_release_recursive>
 80066e6:	e7e9      	b.n	80066bc <_vfiprintf_r+0x4c>
 80066e8:	2300      	movs	r3, #0
 80066ea:	9309      	str	r3, [sp, #36]	; 0x24
 80066ec:	2320      	movs	r3, #32
 80066ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066f2:	2330      	movs	r3, #48	; 0x30
 80066f4:	f04f 0901 	mov.w	r9, #1
 80066f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80066fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80068bc <_vfiprintf_r+0x24c>
 8006700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006704:	4623      	mov	r3, r4
 8006706:	469a      	mov	sl, r3
 8006708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800670c:	b10a      	cbz	r2, 8006712 <_vfiprintf_r+0xa2>
 800670e:	2a25      	cmp	r2, #37	; 0x25
 8006710:	d1f9      	bne.n	8006706 <_vfiprintf_r+0x96>
 8006712:	ebba 0b04 	subs.w	fp, sl, r4
 8006716:	d00b      	beq.n	8006730 <_vfiprintf_r+0xc0>
 8006718:	465b      	mov	r3, fp
 800671a:	4622      	mov	r2, r4
 800671c:	4629      	mov	r1, r5
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff ff93 	bl	800664a <__sfputs_r>
 8006724:	3001      	adds	r0, #1
 8006726:	f000 80aa 	beq.w	800687e <_vfiprintf_r+0x20e>
 800672a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800672c:	445a      	add	r2, fp
 800672e:	9209      	str	r2, [sp, #36]	; 0x24
 8006730:	f89a 3000 	ldrb.w	r3, [sl]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80a2 	beq.w	800687e <_vfiprintf_r+0x20e>
 800673a:	2300      	movs	r3, #0
 800673c:	f04f 32ff 	mov.w	r2, #4294967295
 8006740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006744:	f10a 0a01 	add.w	sl, sl, #1
 8006748:	9304      	str	r3, [sp, #16]
 800674a:	9307      	str	r3, [sp, #28]
 800674c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006750:	931a      	str	r3, [sp, #104]	; 0x68
 8006752:	4654      	mov	r4, sl
 8006754:	2205      	movs	r2, #5
 8006756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800675a:	4858      	ldr	r0, [pc, #352]	; (80068bc <_vfiprintf_r+0x24c>)
 800675c:	f000 fd32 	bl	80071c4 <memchr>
 8006760:	9a04      	ldr	r2, [sp, #16]
 8006762:	b9d8      	cbnz	r0, 800679c <_vfiprintf_r+0x12c>
 8006764:	06d1      	lsls	r1, r2, #27
 8006766:	bf44      	itt	mi
 8006768:	2320      	movmi	r3, #32
 800676a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800676e:	0713      	lsls	r3, r2, #28
 8006770:	bf44      	itt	mi
 8006772:	232b      	movmi	r3, #43	; 0x2b
 8006774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006778:	f89a 3000 	ldrb.w	r3, [sl]
 800677c:	2b2a      	cmp	r3, #42	; 0x2a
 800677e:	d015      	beq.n	80067ac <_vfiprintf_r+0x13c>
 8006780:	4654      	mov	r4, sl
 8006782:	2000      	movs	r0, #0
 8006784:	f04f 0c0a 	mov.w	ip, #10
 8006788:	9a07      	ldr	r2, [sp, #28]
 800678a:	4621      	mov	r1, r4
 800678c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006790:	3b30      	subs	r3, #48	; 0x30
 8006792:	2b09      	cmp	r3, #9
 8006794:	d94e      	bls.n	8006834 <_vfiprintf_r+0x1c4>
 8006796:	b1b0      	cbz	r0, 80067c6 <_vfiprintf_r+0x156>
 8006798:	9207      	str	r2, [sp, #28]
 800679a:	e014      	b.n	80067c6 <_vfiprintf_r+0x156>
 800679c:	eba0 0308 	sub.w	r3, r0, r8
 80067a0:	fa09 f303 	lsl.w	r3, r9, r3
 80067a4:	4313      	orrs	r3, r2
 80067a6:	46a2      	mov	sl, r4
 80067a8:	9304      	str	r3, [sp, #16]
 80067aa:	e7d2      	b.n	8006752 <_vfiprintf_r+0xe2>
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	1d19      	adds	r1, r3, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	9103      	str	r1, [sp, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bfbb      	ittet	lt
 80067b8:	425b      	neglt	r3, r3
 80067ba:	f042 0202 	orrlt.w	r2, r2, #2
 80067be:	9307      	strge	r3, [sp, #28]
 80067c0:	9307      	strlt	r3, [sp, #28]
 80067c2:	bfb8      	it	lt
 80067c4:	9204      	strlt	r2, [sp, #16]
 80067c6:	7823      	ldrb	r3, [r4, #0]
 80067c8:	2b2e      	cmp	r3, #46	; 0x2e
 80067ca:	d10c      	bne.n	80067e6 <_vfiprintf_r+0x176>
 80067cc:	7863      	ldrb	r3, [r4, #1]
 80067ce:	2b2a      	cmp	r3, #42	; 0x2a
 80067d0:	d135      	bne.n	800683e <_vfiprintf_r+0x1ce>
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	3402      	adds	r4, #2
 80067d6:	1d1a      	adds	r2, r3, #4
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	9203      	str	r2, [sp, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bfb8      	it	lt
 80067e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80067e4:	9305      	str	r3, [sp, #20]
 80067e6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80068c0 <_vfiprintf_r+0x250>
 80067ea:	2203      	movs	r2, #3
 80067ec:	4650      	mov	r0, sl
 80067ee:	7821      	ldrb	r1, [r4, #0]
 80067f0:	f000 fce8 	bl	80071c4 <memchr>
 80067f4:	b140      	cbz	r0, 8006808 <_vfiprintf_r+0x198>
 80067f6:	2340      	movs	r3, #64	; 0x40
 80067f8:	eba0 000a 	sub.w	r0, r0, sl
 80067fc:	fa03 f000 	lsl.w	r0, r3, r0
 8006800:	9b04      	ldr	r3, [sp, #16]
 8006802:	3401      	adds	r4, #1
 8006804:	4303      	orrs	r3, r0
 8006806:	9304      	str	r3, [sp, #16]
 8006808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800680c:	2206      	movs	r2, #6
 800680e:	482d      	ldr	r0, [pc, #180]	; (80068c4 <_vfiprintf_r+0x254>)
 8006810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006814:	f000 fcd6 	bl	80071c4 <memchr>
 8006818:	2800      	cmp	r0, #0
 800681a:	d03f      	beq.n	800689c <_vfiprintf_r+0x22c>
 800681c:	4b2a      	ldr	r3, [pc, #168]	; (80068c8 <_vfiprintf_r+0x258>)
 800681e:	bb1b      	cbnz	r3, 8006868 <_vfiprintf_r+0x1f8>
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	3307      	adds	r3, #7
 8006824:	f023 0307 	bic.w	r3, r3, #7
 8006828:	3308      	adds	r3, #8
 800682a:	9303      	str	r3, [sp, #12]
 800682c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800682e:	443b      	add	r3, r7
 8006830:	9309      	str	r3, [sp, #36]	; 0x24
 8006832:	e767      	b.n	8006704 <_vfiprintf_r+0x94>
 8006834:	460c      	mov	r4, r1
 8006836:	2001      	movs	r0, #1
 8006838:	fb0c 3202 	mla	r2, ip, r2, r3
 800683c:	e7a5      	b.n	800678a <_vfiprintf_r+0x11a>
 800683e:	2300      	movs	r3, #0
 8006840:	f04f 0c0a 	mov.w	ip, #10
 8006844:	4619      	mov	r1, r3
 8006846:	3401      	adds	r4, #1
 8006848:	9305      	str	r3, [sp, #20]
 800684a:	4620      	mov	r0, r4
 800684c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006850:	3a30      	subs	r2, #48	; 0x30
 8006852:	2a09      	cmp	r2, #9
 8006854:	d903      	bls.n	800685e <_vfiprintf_r+0x1ee>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0c5      	beq.n	80067e6 <_vfiprintf_r+0x176>
 800685a:	9105      	str	r1, [sp, #20]
 800685c:	e7c3      	b.n	80067e6 <_vfiprintf_r+0x176>
 800685e:	4604      	mov	r4, r0
 8006860:	2301      	movs	r3, #1
 8006862:	fb0c 2101 	mla	r1, ip, r1, r2
 8006866:	e7f0      	b.n	800684a <_vfiprintf_r+0x1da>
 8006868:	ab03      	add	r3, sp, #12
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	462a      	mov	r2, r5
 800686e:	4630      	mov	r0, r6
 8006870:	4b16      	ldr	r3, [pc, #88]	; (80068cc <_vfiprintf_r+0x25c>)
 8006872:	a904      	add	r1, sp, #16
 8006874:	f3af 8000 	nop.w
 8006878:	4607      	mov	r7, r0
 800687a:	1c78      	adds	r0, r7, #1
 800687c:	d1d6      	bne.n	800682c <_vfiprintf_r+0x1bc>
 800687e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006880:	07d9      	lsls	r1, r3, #31
 8006882:	d405      	bmi.n	8006890 <_vfiprintf_r+0x220>
 8006884:	89ab      	ldrh	r3, [r5, #12]
 8006886:	059a      	lsls	r2, r3, #22
 8006888:	d402      	bmi.n	8006890 <_vfiprintf_r+0x220>
 800688a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800688c:	f000 fc33 	bl	80070f6 <__retarget_lock_release_recursive>
 8006890:	89ab      	ldrh	r3, [r5, #12]
 8006892:	065b      	lsls	r3, r3, #25
 8006894:	f53f af12 	bmi.w	80066bc <_vfiprintf_r+0x4c>
 8006898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800689a:	e711      	b.n	80066c0 <_vfiprintf_r+0x50>
 800689c:	ab03      	add	r3, sp, #12
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	462a      	mov	r2, r5
 80068a2:	4630      	mov	r0, r6
 80068a4:	4b09      	ldr	r3, [pc, #36]	; (80068cc <_vfiprintf_r+0x25c>)
 80068a6:	a904      	add	r1, sp, #16
 80068a8:	f000 f882 	bl	80069b0 <_printf_i>
 80068ac:	e7e4      	b.n	8006878 <_vfiprintf_r+0x208>
 80068ae:	bf00      	nop
 80068b0:	08007704 	.word	0x08007704
 80068b4:	08007724 	.word	0x08007724
 80068b8:	080076e4 	.word	0x080076e4
 80068bc:	080076b0 	.word	0x080076b0
 80068c0:	080076b6 	.word	0x080076b6
 80068c4:	080076ba 	.word	0x080076ba
 80068c8:	00000000 	.word	0x00000000
 80068cc:	0800664b 	.word	0x0800664b

080068d0 <_printf_common>:
 80068d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d4:	4616      	mov	r6, r2
 80068d6:	4699      	mov	r9, r3
 80068d8:	688a      	ldr	r2, [r1, #8]
 80068da:	690b      	ldr	r3, [r1, #16]
 80068dc:	4607      	mov	r7, r0
 80068de:	4293      	cmp	r3, r2
 80068e0:	bfb8      	it	lt
 80068e2:	4613      	movlt	r3, r2
 80068e4:	6033      	str	r3, [r6, #0]
 80068e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068ea:	460c      	mov	r4, r1
 80068ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068f0:	b10a      	cbz	r2, 80068f6 <_printf_common+0x26>
 80068f2:	3301      	adds	r3, #1
 80068f4:	6033      	str	r3, [r6, #0]
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	0699      	lsls	r1, r3, #26
 80068fa:	bf42      	ittt	mi
 80068fc:	6833      	ldrmi	r3, [r6, #0]
 80068fe:	3302      	addmi	r3, #2
 8006900:	6033      	strmi	r3, [r6, #0]
 8006902:	6825      	ldr	r5, [r4, #0]
 8006904:	f015 0506 	ands.w	r5, r5, #6
 8006908:	d106      	bne.n	8006918 <_printf_common+0x48>
 800690a:	f104 0a19 	add.w	sl, r4, #25
 800690e:	68e3      	ldr	r3, [r4, #12]
 8006910:	6832      	ldr	r2, [r6, #0]
 8006912:	1a9b      	subs	r3, r3, r2
 8006914:	42ab      	cmp	r3, r5
 8006916:	dc28      	bgt.n	800696a <_printf_common+0x9a>
 8006918:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800691c:	1e13      	subs	r3, r2, #0
 800691e:	6822      	ldr	r2, [r4, #0]
 8006920:	bf18      	it	ne
 8006922:	2301      	movne	r3, #1
 8006924:	0692      	lsls	r2, r2, #26
 8006926:	d42d      	bmi.n	8006984 <_printf_common+0xb4>
 8006928:	4649      	mov	r1, r9
 800692a:	4638      	mov	r0, r7
 800692c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006930:	47c0      	blx	r8
 8006932:	3001      	adds	r0, #1
 8006934:	d020      	beq.n	8006978 <_printf_common+0xa8>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	68e5      	ldr	r5, [r4, #12]
 800693a:	f003 0306 	and.w	r3, r3, #6
 800693e:	2b04      	cmp	r3, #4
 8006940:	bf18      	it	ne
 8006942:	2500      	movne	r5, #0
 8006944:	6832      	ldr	r2, [r6, #0]
 8006946:	f04f 0600 	mov.w	r6, #0
 800694a:	68a3      	ldr	r3, [r4, #8]
 800694c:	bf08      	it	eq
 800694e:	1aad      	subeq	r5, r5, r2
 8006950:	6922      	ldr	r2, [r4, #16]
 8006952:	bf08      	it	eq
 8006954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006958:	4293      	cmp	r3, r2
 800695a:	bfc4      	itt	gt
 800695c:	1a9b      	subgt	r3, r3, r2
 800695e:	18ed      	addgt	r5, r5, r3
 8006960:	341a      	adds	r4, #26
 8006962:	42b5      	cmp	r5, r6
 8006964:	d11a      	bne.n	800699c <_printf_common+0xcc>
 8006966:	2000      	movs	r0, #0
 8006968:	e008      	b.n	800697c <_printf_common+0xac>
 800696a:	2301      	movs	r3, #1
 800696c:	4652      	mov	r2, sl
 800696e:	4649      	mov	r1, r9
 8006970:	4638      	mov	r0, r7
 8006972:	47c0      	blx	r8
 8006974:	3001      	adds	r0, #1
 8006976:	d103      	bne.n	8006980 <_printf_common+0xb0>
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006980:	3501      	adds	r5, #1
 8006982:	e7c4      	b.n	800690e <_printf_common+0x3e>
 8006984:	2030      	movs	r0, #48	; 0x30
 8006986:	18e1      	adds	r1, r4, r3
 8006988:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006992:	4422      	add	r2, r4
 8006994:	3302      	adds	r3, #2
 8006996:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800699a:	e7c5      	b.n	8006928 <_printf_common+0x58>
 800699c:	2301      	movs	r3, #1
 800699e:	4622      	mov	r2, r4
 80069a0:	4649      	mov	r1, r9
 80069a2:	4638      	mov	r0, r7
 80069a4:	47c0      	blx	r8
 80069a6:	3001      	adds	r0, #1
 80069a8:	d0e6      	beq.n	8006978 <_printf_common+0xa8>
 80069aa:	3601      	adds	r6, #1
 80069ac:	e7d9      	b.n	8006962 <_printf_common+0x92>
	...

080069b0 <_printf_i>:
 80069b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069b4:	7e0f      	ldrb	r7, [r1, #24]
 80069b6:	4691      	mov	r9, r2
 80069b8:	2f78      	cmp	r7, #120	; 0x78
 80069ba:	4680      	mov	r8, r0
 80069bc:	460c      	mov	r4, r1
 80069be:	469a      	mov	sl, r3
 80069c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80069c6:	d807      	bhi.n	80069d8 <_printf_i+0x28>
 80069c8:	2f62      	cmp	r7, #98	; 0x62
 80069ca:	d80a      	bhi.n	80069e2 <_printf_i+0x32>
 80069cc:	2f00      	cmp	r7, #0
 80069ce:	f000 80d9 	beq.w	8006b84 <_printf_i+0x1d4>
 80069d2:	2f58      	cmp	r7, #88	; 0x58
 80069d4:	f000 80a4 	beq.w	8006b20 <_printf_i+0x170>
 80069d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069e0:	e03a      	b.n	8006a58 <_printf_i+0xa8>
 80069e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069e6:	2b15      	cmp	r3, #21
 80069e8:	d8f6      	bhi.n	80069d8 <_printf_i+0x28>
 80069ea:	a101      	add	r1, pc, #4	; (adr r1, 80069f0 <_printf_i+0x40>)
 80069ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069f0:	08006a49 	.word	0x08006a49
 80069f4:	08006a5d 	.word	0x08006a5d
 80069f8:	080069d9 	.word	0x080069d9
 80069fc:	080069d9 	.word	0x080069d9
 8006a00:	080069d9 	.word	0x080069d9
 8006a04:	080069d9 	.word	0x080069d9
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	080069d9 	.word	0x080069d9
 8006a10:	080069d9 	.word	0x080069d9
 8006a14:	080069d9 	.word	0x080069d9
 8006a18:	080069d9 	.word	0x080069d9
 8006a1c:	08006b6b 	.word	0x08006b6b
 8006a20:	08006a8d 	.word	0x08006a8d
 8006a24:	08006b4d 	.word	0x08006b4d
 8006a28:	080069d9 	.word	0x080069d9
 8006a2c:	080069d9 	.word	0x080069d9
 8006a30:	08006b8d 	.word	0x08006b8d
 8006a34:	080069d9 	.word	0x080069d9
 8006a38:	08006a8d 	.word	0x08006a8d
 8006a3c:	080069d9 	.word	0x080069d9
 8006a40:	080069d9 	.word	0x080069d9
 8006a44:	08006b55 	.word	0x08006b55
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	1d1a      	adds	r2, r3, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	602a      	str	r2, [r5, #0]
 8006a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0a4      	b.n	8006ba6 <_printf_i+0x1f6>
 8006a5c:	6820      	ldr	r0, [r4, #0]
 8006a5e:	6829      	ldr	r1, [r5, #0]
 8006a60:	0606      	lsls	r6, r0, #24
 8006a62:	f101 0304 	add.w	r3, r1, #4
 8006a66:	d50a      	bpl.n	8006a7e <_printf_i+0xce>
 8006a68:	680e      	ldr	r6, [r1, #0]
 8006a6a:	602b      	str	r3, [r5, #0]
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	da03      	bge.n	8006a78 <_printf_i+0xc8>
 8006a70:	232d      	movs	r3, #45	; 0x2d
 8006a72:	4276      	negs	r6, r6
 8006a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a78:	230a      	movs	r3, #10
 8006a7a:	485e      	ldr	r0, [pc, #376]	; (8006bf4 <_printf_i+0x244>)
 8006a7c:	e019      	b.n	8006ab2 <_printf_i+0x102>
 8006a7e:	680e      	ldr	r6, [r1, #0]
 8006a80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a84:	602b      	str	r3, [r5, #0]
 8006a86:	bf18      	it	ne
 8006a88:	b236      	sxthne	r6, r6
 8006a8a:	e7ef      	b.n	8006a6c <_printf_i+0xbc>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	6820      	ldr	r0, [r4, #0]
 8006a90:	1d19      	adds	r1, r3, #4
 8006a92:	6029      	str	r1, [r5, #0]
 8006a94:	0601      	lsls	r1, r0, #24
 8006a96:	d501      	bpl.n	8006a9c <_printf_i+0xec>
 8006a98:	681e      	ldr	r6, [r3, #0]
 8006a9a:	e002      	b.n	8006aa2 <_printf_i+0xf2>
 8006a9c:	0646      	lsls	r6, r0, #25
 8006a9e:	d5fb      	bpl.n	8006a98 <_printf_i+0xe8>
 8006aa0:	881e      	ldrh	r6, [r3, #0]
 8006aa2:	2f6f      	cmp	r7, #111	; 0x6f
 8006aa4:	bf0c      	ite	eq
 8006aa6:	2308      	moveq	r3, #8
 8006aa8:	230a      	movne	r3, #10
 8006aaa:	4852      	ldr	r0, [pc, #328]	; (8006bf4 <_printf_i+0x244>)
 8006aac:	2100      	movs	r1, #0
 8006aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ab2:	6865      	ldr	r5, [r4, #4]
 8006ab4:	2d00      	cmp	r5, #0
 8006ab6:	bfa8      	it	ge
 8006ab8:	6821      	ldrge	r1, [r4, #0]
 8006aba:	60a5      	str	r5, [r4, #8]
 8006abc:	bfa4      	itt	ge
 8006abe:	f021 0104 	bicge.w	r1, r1, #4
 8006ac2:	6021      	strge	r1, [r4, #0]
 8006ac4:	b90e      	cbnz	r6, 8006aca <_printf_i+0x11a>
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	d04d      	beq.n	8006b66 <_printf_i+0x1b6>
 8006aca:	4615      	mov	r5, r2
 8006acc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ad0:	fb03 6711 	mls	r7, r3, r1, r6
 8006ad4:	5dc7      	ldrb	r7, [r0, r7]
 8006ad6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ada:	4637      	mov	r7, r6
 8006adc:	42bb      	cmp	r3, r7
 8006ade:	460e      	mov	r6, r1
 8006ae0:	d9f4      	bls.n	8006acc <_printf_i+0x11c>
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d10b      	bne.n	8006afe <_printf_i+0x14e>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	07de      	lsls	r6, r3, #31
 8006aea:	d508      	bpl.n	8006afe <_printf_i+0x14e>
 8006aec:	6923      	ldr	r3, [r4, #16]
 8006aee:	6861      	ldr	r1, [r4, #4]
 8006af0:	4299      	cmp	r1, r3
 8006af2:	bfde      	ittt	le
 8006af4:	2330      	movle	r3, #48	; 0x30
 8006af6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006afa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006afe:	1b52      	subs	r2, r2, r5
 8006b00:	6122      	str	r2, [r4, #16]
 8006b02:	464b      	mov	r3, r9
 8006b04:	4621      	mov	r1, r4
 8006b06:	4640      	mov	r0, r8
 8006b08:	f8cd a000 	str.w	sl, [sp]
 8006b0c:	aa03      	add	r2, sp, #12
 8006b0e:	f7ff fedf 	bl	80068d0 <_printf_common>
 8006b12:	3001      	adds	r0, #1
 8006b14:	d14c      	bne.n	8006bb0 <_printf_i+0x200>
 8006b16:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1a:	b004      	add	sp, #16
 8006b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b20:	4834      	ldr	r0, [pc, #208]	; (8006bf4 <_printf_i+0x244>)
 8006b22:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b26:	6829      	ldr	r1, [r5, #0]
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b2e:	6029      	str	r1, [r5, #0]
 8006b30:	061d      	lsls	r5, r3, #24
 8006b32:	d514      	bpl.n	8006b5e <_printf_i+0x1ae>
 8006b34:	07df      	lsls	r7, r3, #31
 8006b36:	bf44      	itt	mi
 8006b38:	f043 0320 	orrmi.w	r3, r3, #32
 8006b3c:	6023      	strmi	r3, [r4, #0]
 8006b3e:	b91e      	cbnz	r6, 8006b48 <_printf_i+0x198>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	f023 0320 	bic.w	r3, r3, #32
 8006b46:	6023      	str	r3, [r4, #0]
 8006b48:	2310      	movs	r3, #16
 8006b4a:	e7af      	b.n	8006aac <_printf_i+0xfc>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	f043 0320 	orr.w	r3, r3, #32
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	2378      	movs	r3, #120	; 0x78
 8006b56:	4828      	ldr	r0, [pc, #160]	; (8006bf8 <_printf_i+0x248>)
 8006b58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b5c:	e7e3      	b.n	8006b26 <_printf_i+0x176>
 8006b5e:	0659      	lsls	r1, r3, #25
 8006b60:	bf48      	it	mi
 8006b62:	b2b6      	uxthmi	r6, r6
 8006b64:	e7e6      	b.n	8006b34 <_printf_i+0x184>
 8006b66:	4615      	mov	r5, r2
 8006b68:	e7bb      	b.n	8006ae2 <_printf_i+0x132>
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	6826      	ldr	r6, [r4, #0]
 8006b6e:	1d18      	adds	r0, r3, #4
 8006b70:	6961      	ldr	r1, [r4, #20]
 8006b72:	6028      	str	r0, [r5, #0]
 8006b74:	0635      	lsls	r5, r6, #24
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	d501      	bpl.n	8006b7e <_printf_i+0x1ce>
 8006b7a:	6019      	str	r1, [r3, #0]
 8006b7c:	e002      	b.n	8006b84 <_printf_i+0x1d4>
 8006b7e:	0670      	lsls	r0, r6, #25
 8006b80:	d5fb      	bpl.n	8006b7a <_printf_i+0x1ca>
 8006b82:	8019      	strh	r1, [r3, #0]
 8006b84:	2300      	movs	r3, #0
 8006b86:	4615      	mov	r5, r2
 8006b88:	6123      	str	r3, [r4, #16]
 8006b8a:	e7ba      	b.n	8006b02 <_printf_i+0x152>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	2100      	movs	r1, #0
 8006b90:	1d1a      	adds	r2, r3, #4
 8006b92:	602a      	str	r2, [r5, #0]
 8006b94:	681d      	ldr	r5, [r3, #0]
 8006b96:	6862      	ldr	r2, [r4, #4]
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 fb13 	bl	80071c4 <memchr>
 8006b9e:	b108      	cbz	r0, 8006ba4 <_printf_i+0x1f4>
 8006ba0:	1b40      	subs	r0, r0, r5
 8006ba2:	6060      	str	r0, [r4, #4]
 8006ba4:	6863      	ldr	r3, [r4, #4]
 8006ba6:	6123      	str	r3, [r4, #16]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bae:	e7a8      	b.n	8006b02 <_printf_i+0x152>
 8006bb0:	462a      	mov	r2, r5
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	6923      	ldr	r3, [r4, #16]
 8006bb8:	47d0      	blx	sl
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d0ab      	beq.n	8006b16 <_printf_i+0x166>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	079b      	lsls	r3, r3, #30
 8006bc2:	d413      	bmi.n	8006bec <_printf_i+0x23c>
 8006bc4:	68e0      	ldr	r0, [r4, #12]
 8006bc6:	9b03      	ldr	r3, [sp, #12]
 8006bc8:	4298      	cmp	r0, r3
 8006bca:	bfb8      	it	lt
 8006bcc:	4618      	movlt	r0, r3
 8006bce:	e7a4      	b.n	8006b1a <_printf_i+0x16a>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4632      	mov	r2, r6
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	47d0      	blx	sl
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d09b      	beq.n	8006b16 <_printf_i+0x166>
 8006bde:	3501      	adds	r5, #1
 8006be0:	68e3      	ldr	r3, [r4, #12]
 8006be2:	9903      	ldr	r1, [sp, #12]
 8006be4:	1a5b      	subs	r3, r3, r1
 8006be6:	42ab      	cmp	r3, r5
 8006be8:	dcf2      	bgt.n	8006bd0 <_printf_i+0x220>
 8006bea:	e7eb      	b.n	8006bc4 <_printf_i+0x214>
 8006bec:	2500      	movs	r5, #0
 8006bee:	f104 0619 	add.w	r6, r4, #25
 8006bf2:	e7f5      	b.n	8006be0 <_printf_i+0x230>
 8006bf4:	080076c1 	.word	0x080076c1
 8006bf8:	080076d2 	.word	0x080076d2

08006bfc <__swbuf_r>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	460e      	mov	r6, r1
 8006c00:	4614      	mov	r4, r2
 8006c02:	4605      	mov	r5, r0
 8006c04:	b118      	cbz	r0, 8006c0e <__swbuf_r+0x12>
 8006c06:	6983      	ldr	r3, [r0, #24]
 8006c08:	b90b      	cbnz	r3, 8006c0e <__swbuf_r+0x12>
 8006c0a:	f000 f9d5 	bl	8006fb8 <__sinit>
 8006c0e:	4b21      	ldr	r3, [pc, #132]	; (8006c94 <__swbuf_r+0x98>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	d12b      	bne.n	8006c6c <__swbuf_r+0x70>
 8006c14:	686c      	ldr	r4, [r5, #4]
 8006c16:	69a3      	ldr	r3, [r4, #24]
 8006c18:	60a3      	str	r3, [r4, #8]
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	071a      	lsls	r2, r3, #28
 8006c1e:	d52f      	bpl.n	8006c80 <__swbuf_r+0x84>
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	b36b      	cbz	r3, 8006c80 <__swbuf_r+0x84>
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	6820      	ldr	r0, [r4, #0]
 8006c28:	b2f6      	uxtb	r6, r6
 8006c2a:	1ac0      	subs	r0, r0, r3
 8006c2c:	6963      	ldr	r3, [r4, #20]
 8006c2e:	4637      	mov	r7, r6
 8006c30:	4283      	cmp	r3, r0
 8006c32:	dc04      	bgt.n	8006c3e <__swbuf_r+0x42>
 8006c34:	4621      	mov	r1, r4
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 f92a 	bl	8006e90 <_fflush_r>
 8006c3c:	bb30      	cbnz	r0, 8006c8c <__swbuf_r+0x90>
 8006c3e:	68a3      	ldr	r3, [r4, #8]
 8006c40:	3001      	adds	r0, #1
 8006c42:	3b01      	subs	r3, #1
 8006c44:	60a3      	str	r3, [r4, #8]
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	6022      	str	r2, [r4, #0]
 8006c4c:	701e      	strb	r6, [r3, #0]
 8006c4e:	6963      	ldr	r3, [r4, #20]
 8006c50:	4283      	cmp	r3, r0
 8006c52:	d004      	beq.n	8006c5e <__swbuf_r+0x62>
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	07db      	lsls	r3, r3, #31
 8006c58:	d506      	bpl.n	8006c68 <__swbuf_r+0x6c>
 8006c5a:	2e0a      	cmp	r6, #10
 8006c5c:	d104      	bne.n	8006c68 <__swbuf_r+0x6c>
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 f915 	bl	8006e90 <_fflush_r>
 8006c66:	b988      	cbnz	r0, 8006c8c <__swbuf_r+0x90>
 8006c68:	4638      	mov	r0, r7
 8006c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <__swbuf_r+0x9c>)
 8006c6e:	429c      	cmp	r4, r3
 8006c70:	d101      	bne.n	8006c76 <__swbuf_r+0x7a>
 8006c72:	68ac      	ldr	r4, [r5, #8]
 8006c74:	e7cf      	b.n	8006c16 <__swbuf_r+0x1a>
 8006c76:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <__swbuf_r+0xa0>)
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	bf08      	it	eq
 8006c7c:	68ec      	ldreq	r4, [r5, #12]
 8006c7e:	e7ca      	b.n	8006c16 <__swbuf_r+0x1a>
 8006c80:	4621      	mov	r1, r4
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 f80c 	bl	8006ca0 <__swsetup_r>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d0cb      	beq.n	8006c24 <__swbuf_r+0x28>
 8006c8c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c90:	e7ea      	b.n	8006c68 <__swbuf_r+0x6c>
 8006c92:	bf00      	nop
 8006c94:	08007704 	.word	0x08007704
 8006c98:	08007724 	.word	0x08007724
 8006c9c:	080076e4 	.word	0x080076e4

08006ca0 <__swsetup_r>:
 8006ca0:	4b32      	ldr	r3, [pc, #200]	; (8006d6c <__swsetup_r+0xcc>)
 8006ca2:	b570      	push	{r4, r5, r6, lr}
 8006ca4:	681d      	ldr	r5, [r3, #0]
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	460c      	mov	r4, r1
 8006caa:	b125      	cbz	r5, 8006cb6 <__swsetup_r+0x16>
 8006cac:	69ab      	ldr	r3, [r5, #24]
 8006cae:	b913      	cbnz	r3, 8006cb6 <__swsetup_r+0x16>
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f000 f981 	bl	8006fb8 <__sinit>
 8006cb6:	4b2e      	ldr	r3, [pc, #184]	; (8006d70 <__swsetup_r+0xd0>)
 8006cb8:	429c      	cmp	r4, r3
 8006cba:	d10f      	bne.n	8006cdc <__swsetup_r+0x3c>
 8006cbc:	686c      	ldr	r4, [r5, #4]
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc4:	0719      	lsls	r1, r3, #28
 8006cc6:	d42c      	bmi.n	8006d22 <__swsetup_r+0x82>
 8006cc8:	06dd      	lsls	r5, r3, #27
 8006cca:	d411      	bmi.n	8006cf0 <__swsetup_r+0x50>
 8006ccc:	2309      	movs	r3, #9
 8006cce:	6033      	str	r3, [r6, #0]
 8006cd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	81a3      	strh	r3, [r4, #12]
 8006cda:	e03e      	b.n	8006d5a <__swsetup_r+0xba>
 8006cdc:	4b25      	ldr	r3, [pc, #148]	; (8006d74 <__swsetup_r+0xd4>)
 8006cde:	429c      	cmp	r4, r3
 8006ce0:	d101      	bne.n	8006ce6 <__swsetup_r+0x46>
 8006ce2:	68ac      	ldr	r4, [r5, #8]
 8006ce4:	e7eb      	b.n	8006cbe <__swsetup_r+0x1e>
 8006ce6:	4b24      	ldr	r3, [pc, #144]	; (8006d78 <__swsetup_r+0xd8>)
 8006ce8:	429c      	cmp	r4, r3
 8006cea:	bf08      	it	eq
 8006cec:	68ec      	ldreq	r4, [r5, #12]
 8006cee:	e7e6      	b.n	8006cbe <__swsetup_r+0x1e>
 8006cf0:	0758      	lsls	r0, r3, #29
 8006cf2:	d512      	bpl.n	8006d1a <__swsetup_r+0x7a>
 8006cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cf6:	b141      	cbz	r1, 8006d0a <__swsetup_r+0x6a>
 8006cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cfc:	4299      	cmp	r1, r3
 8006cfe:	d002      	beq.n	8006d06 <__swsetup_r+0x66>
 8006d00:	4630      	mov	r0, r6
 8006d02:	f000 fa6d 	bl	80071e0 <_free_r>
 8006d06:	2300      	movs	r3, #0
 8006d08:	6363      	str	r3, [r4, #52]	; 0x34
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	2300      	movs	r3, #0
 8006d14:	6063      	str	r3, [r4, #4]
 8006d16:	6923      	ldr	r3, [r4, #16]
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	f043 0308 	orr.w	r3, r3, #8
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	b94b      	cbnz	r3, 8006d3a <__swsetup_r+0x9a>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d30:	d003      	beq.n	8006d3a <__swsetup_r+0x9a>
 8006d32:	4621      	mov	r1, r4
 8006d34:	4630      	mov	r0, r6
 8006d36:	f000 fa05 	bl	8007144 <__smakebuf_r>
 8006d3a:	89a0      	ldrh	r0, [r4, #12]
 8006d3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d40:	f010 0301 	ands.w	r3, r0, #1
 8006d44:	d00a      	beq.n	8006d5c <__swsetup_r+0xbc>
 8006d46:	2300      	movs	r3, #0
 8006d48:	60a3      	str	r3, [r4, #8]
 8006d4a:	6963      	ldr	r3, [r4, #20]
 8006d4c:	425b      	negs	r3, r3
 8006d4e:	61a3      	str	r3, [r4, #24]
 8006d50:	6923      	ldr	r3, [r4, #16]
 8006d52:	b943      	cbnz	r3, 8006d66 <__swsetup_r+0xc6>
 8006d54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d58:	d1ba      	bne.n	8006cd0 <__swsetup_r+0x30>
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	0781      	lsls	r1, r0, #30
 8006d5e:	bf58      	it	pl
 8006d60:	6963      	ldrpl	r3, [r4, #20]
 8006d62:	60a3      	str	r3, [r4, #8]
 8006d64:	e7f4      	b.n	8006d50 <__swsetup_r+0xb0>
 8006d66:	2000      	movs	r0, #0
 8006d68:	e7f7      	b.n	8006d5a <__swsetup_r+0xba>
 8006d6a:	bf00      	nop
 8006d6c:	20000088 	.word	0x20000088
 8006d70:	08007704 	.word	0x08007704
 8006d74:	08007724 	.word	0x08007724
 8006d78:	080076e4 	.word	0x080076e4

08006d7c <abort>:
 8006d7c:	2006      	movs	r0, #6
 8006d7e:	b508      	push	{r3, lr}
 8006d80:	f000 fb42 	bl	8007408 <raise>
 8006d84:	2001      	movs	r0, #1
 8006d86:	f7fa fdd8 	bl	800193a <_exit>
	...

08006d8c <__sflush_r>:
 8006d8c:	898a      	ldrh	r2, [r1, #12]
 8006d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d90:	4605      	mov	r5, r0
 8006d92:	0710      	lsls	r0, r2, #28
 8006d94:	460c      	mov	r4, r1
 8006d96:	d457      	bmi.n	8006e48 <__sflush_r+0xbc>
 8006d98:	684b      	ldr	r3, [r1, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	dc04      	bgt.n	8006da8 <__sflush_r+0x1c>
 8006d9e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dc01      	bgt.n	8006da8 <__sflush_r+0x1c>
 8006da4:	2000      	movs	r0, #0
 8006da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	d0fa      	beq.n	8006da4 <__sflush_r+0x18>
 8006dae:	2300      	movs	r3, #0
 8006db0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006db4:	682f      	ldr	r7, [r5, #0]
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	d032      	beq.n	8006e20 <__sflush_r+0x94>
 8006dba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	075a      	lsls	r2, r3, #29
 8006dc0:	d505      	bpl.n	8006dce <__sflush_r+0x42>
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	1ac0      	subs	r0, r0, r3
 8006dc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dc8:	b10b      	cbz	r3, 8006dce <__sflush_r+0x42>
 8006dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dcc:	1ac0      	subs	r0, r0, r3
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	6a21      	ldr	r1, [r4, #32]
 8006dd8:	47b0      	blx	r6
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	d106      	bne.n	8006dee <__sflush_r+0x62>
 8006de0:	6829      	ldr	r1, [r5, #0]
 8006de2:	291d      	cmp	r1, #29
 8006de4:	d82c      	bhi.n	8006e40 <__sflush_r+0xb4>
 8006de6:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <__sflush_r+0x100>)
 8006de8:	40ca      	lsrs	r2, r1
 8006dea:	07d6      	lsls	r6, r2, #31
 8006dec:	d528      	bpl.n	8006e40 <__sflush_r+0xb4>
 8006dee:	2200      	movs	r2, #0
 8006df0:	6062      	str	r2, [r4, #4]
 8006df2:	6922      	ldr	r2, [r4, #16]
 8006df4:	04d9      	lsls	r1, r3, #19
 8006df6:	6022      	str	r2, [r4, #0]
 8006df8:	d504      	bpl.n	8006e04 <__sflush_r+0x78>
 8006dfa:	1c42      	adds	r2, r0, #1
 8006dfc:	d101      	bne.n	8006e02 <__sflush_r+0x76>
 8006dfe:	682b      	ldr	r3, [r5, #0]
 8006e00:	b903      	cbnz	r3, 8006e04 <__sflush_r+0x78>
 8006e02:	6560      	str	r0, [r4, #84]	; 0x54
 8006e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e06:	602f      	str	r7, [r5, #0]
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	d0cb      	beq.n	8006da4 <__sflush_r+0x18>
 8006e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e10:	4299      	cmp	r1, r3
 8006e12:	d002      	beq.n	8006e1a <__sflush_r+0x8e>
 8006e14:	4628      	mov	r0, r5
 8006e16:	f000 f9e3 	bl	80071e0 <_free_r>
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	6360      	str	r0, [r4, #52]	; 0x34
 8006e1e:	e7c2      	b.n	8006da6 <__sflush_r+0x1a>
 8006e20:	6a21      	ldr	r1, [r4, #32]
 8006e22:	2301      	movs	r3, #1
 8006e24:	4628      	mov	r0, r5
 8006e26:	47b0      	blx	r6
 8006e28:	1c41      	adds	r1, r0, #1
 8006e2a:	d1c7      	bne.n	8006dbc <__sflush_r+0x30>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0c4      	beq.n	8006dbc <__sflush_r+0x30>
 8006e32:	2b1d      	cmp	r3, #29
 8006e34:	d001      	beq.n	8006e3a <__sflush_r+0xae>
 8006e36:	2b16      	cmp	r3, #22
 8006e38:	d101      	bne.n	8006e3e <__sflush_r+0xb2>
 8006e3a:	602f      	str	r7, [r5, #0]
 8006e3c:	e7b2      	b.n	8006da4 <__sflush_r+0x18>
 8006e3e:	89a3      	ldrh	r3, [r4, #12]
 8006e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e44:	81a3      	strh	r3, [r4, #12]
 8006e46:	e7ae      	b.n	8006da6 <__sflush_r+0x1a>
 8006e48:	690f      	ldr	r7, [r1, #16]
 8006e4a:	2f00      	cmp	r7, #0
 8006e4c:	d0aa      	beq.n	8006da4 <__sflush_r+0x18>
 8006e4e:	0793      	lsls	r3, r2, #30
 8006e50:	bf18      	it	ne
 8006e52:	2300      	movne	r3, #0
 8006e54:	680e      	ldr	r6, [r1, #0]
 8006e56:	bf08      	it	eq
 8006e58:	694b      	ldreq	r3, [r1, #20]
 8006e5a:	1bf6      	subs	r6, r6, r7
 8006e5c:	600f      	str	r7, [r1, #0]
 8006e5e:	608b      	str	r3, [r1, #8]
 8006e60:	2e00      	cmp	r6, #0
 8006e62:	dd9f      	ble.n	8006da4 <__sflush_r+0x18>
 8006e64:	4633      	mov	r3, r6
 8006e66:	463a      	mov	r2, r7
 8006e68:	4628      	mov	r0, r5
 8006e6a:	6a21      	ldr	r1, [r4, #32]
 8006e6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006e70:	47e0      	blx	ip
 8006e72:	2800      	cmp	r0, #0
 8006e74:	dc06      	bgt.n	8006e84 <__sflush_r+0xf8>
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	e790      	b.n	8006da6 <__sflush_r+0x1a>
 8006e84:	4407      	add	r7, r0
 8006e86:	1a36      	subs	r6, r6, r0
 8006e88:	e7ea      	b.n	8006e60 <__sflush_r+0xd4>
 8006e8a:	bf00      	nop
 8006e8c:	20400001 	.word	0x20400001

08006e90 <_fflush_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	690b      	ldr	r3, [r1, #16]
 8006e94:	4605      	mov	r5, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	b913      	cbnz	r3, 8006ea0 <_fflush_r+0x10>
 8006e9a:	2500      	movs	r5, #0
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	b118      	cbz	r0, 8006eaa <_fflush_r+0x1a>
 8006ea2:	6983      	ldr	r3, [r0, #24]
 8006ea4:	b90b      	cbnz	r3, 8006eaa <_fflush_r+0x1a>
 8006ea6:	f000 f887 	bl	8006fb8 <__sinit>
 8006eaa:	4b14      	ldr	r3, [pc, #80]	; (8006efc <_fflush_r+0x6c>)
 8006eac:	429c      	cmp	r4, r3
 8006eae:	d11b      	bne.n	8006ee8 <_fflush_r+0x58>
 8006eb0:	686c      	ldr	r4, [r5, #4]
 8006eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0ef      	beq.n	8006e9a <_fflush_r+0xa>
 8006eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ebc:	07d0      	lsls	r0, r2, #31
 8006ebe:	d404      	bmi.n	8006eca <_fflush_r+0x3a>
 8006ec0:	0599      	lsls	r1, r3, #22
 8006ec2:	d402      	bmi.n	8006eca <_fflush_r+0x3a>
 8006ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec6:	f000 f915 	bl	80070f4 <__retarget_lock_acquire_recursive>
 8006eca:	4628      	mov	r0, r5
 8006ecc:	4621      	mov	r1, r4
 8006ece:	f7ff ff5d 	bl	8006d8c <__sflush_r>
 8006ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	07da      	lsls	r2, r3, #31
 8006ed8:	d4e0      	bmi.n	8006e9c <_fflush_r+0xc>
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	059b      	lsls	r3, r3, #22
 8006ede:	d4dd      	bmi.n	8006e9c <_fflush_r+0xc>
 8006ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ee2:	f000 f908 	bl	80070f6 <__retarget_lock_release_recursive>
 8006ee6:	e7d9      	b.n	8006e9c <_fflush_r+0xc>
 8006ee8:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <_fflush_r+0x70>)
 8006eea:	429c      	cmp	r4, r3
 8006eec:	d101      	bne.n	8006ef2 <_fflush_r+0x62>
 8006eee:	68ac      	ldr	r4, [r5, #8]
 8006ef0:	e7df      	b.n	8006eb2 <_fflush_r+0x22>
 8006ef2:	4b04      	ldr	r3, [pc, #16]	; (8006f04 <_fflush_r+0x74>)
 8006ef4:	429c      	cmp	r4, r3
 8006ef6:	bf08      	it	eq
 8006ef8:	68ec      	ldreq	r4, [r5, #12]
 8006efa:	e7da      	b.n	8006eb2 <_fflush_r+0x22>
 8006efc:	08007704 	.word	0x08007704
 8006f00:	08007724 	.word	0x08007724
 8006f04:	080076e4 	.word	0x080076e4

08006f08 <std>:
 8006f08:	2300      	movs	r3, #0
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f16:	6083      	str	r3, [r0, #8]
 8006f18:	8181      	strh	r1, [r0, #12]
 8006f1a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f1c:	81c2      	strh	r2, [r0, #14]
 8006f1e:	6183      	str	r3, [r0, #24]
 8006f20:	4619      	mov	r1, r3
 8006f22:	2208      	movs	r2, #8
 8006f24:	305c      	adds	r0, #92	; 0x5c
 8006f26:	f7ff fb73 	bl	8006610 <memset>
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <std+0x38>)
 8006f2c:	6224      	str	r4, [r4, #32]
 8006f2e:	6263      	str	r3, [r4, #36]	; 0x24
 8006f30:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <std+0x3c>)
 8006f32:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f34:	4b04      	ldr	r3, [pc, #16]	; (8006f48 <std+0x40>)
 8006f36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <std+0x44>)
 8006f3a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	bf00      	nop
 8006f40:	08007441 	.word	0x08007441
 8006f44:	08007463 	.word	0x08007463
 8006f48:	0800749b 	.word	0x0800749b
 8006f4c:	080074bf 	.word	0x080074bf

08006f50 <_cleanup_r>:
 8006f50:	4901      	ldr	r1, [pc, #4]	; (8006f58 <_cleanup_r+0x8>)
 8006f52:	f000 b8af 	b.w	80070b4 <_fwalk_reent>
 8006f56:	bf00      	nop
 8006f58:	08006e91 	.word	0x08006e91

08006f5c <__sfmoreglue>:
 8006f5c:	2268      	movs	r2, #104	; 0x68
 8006f5e:	b570      	push	{r4, r5, r6, lr}
 8006f60:	1e4d      	subs	r5, r1, #1
 8006f62:	4355      	muls	r5, r2
 8006f64:	460e      	mov	r6, r1
 8006f66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f6a:	f000 f9a1 	bl	80072b0 <_malloc_r>
 8006f6e:	4604      	mov	r4, r0
 8006f70:	b140      	cbz	r0, 8006f84 <__sfmoreglue+0x28>
 8006f72:	2100      	movs	r1, #0
 8006f74:	e9c0 1600 	strd	r1, r6, [r0]
 8006f78:	300c      	adds	r0, #12
 8006f7a:	60a0      	str	r0, [r4, #8]
 8006f7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f80:	f7ff fb46 	bl	8006610 <memset>
 8006f84:	4620      	mov	r0, r4
 8006f86:	bd70      	pop	{r4, r5, r6, pc}

08006f88 <__sfp_lock_acquire>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__sfp_lock_acquire+0x8>)
 8006f8a:	f000 b8b3 	b.w	80070f4 <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	20000345 	.word	0x20000345

08006f94 <__sfp_lock_release>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__sfp_lock_release+0x8>)
 8006f96:	f000 b8ae 	b.w	80070f6 <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	20000345 	.word	0x20000345

08006fa0 <__sinit_lock_acquire>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	; (8006fa8 <__sinit_lock_acquire+0x8>)
 8006fa2:	f000 b8a7 	b.w	80070f4 <__retarget_lock_acquire_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	20000346 	.word	0x20000346

08006fac <__sinit_lock_release>:
 8006fac:	4801      	ldr	r0, [pc, #4]	; (8006fb4 <__sinit_lock_release+0x8>)
 8006fae:	f000 b8a2 	b.w	80070f6 <__retarget_lock_release_recursive>
 8006fb2:	bf00      	nop
 8006fb4:	20000346 	.word	0x20000346

08006fb8 <__sinit>:
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	4604      	mov	r4, r0
 8006fbc:	f7ff fff0 	bl	8006fa0 <__sinit_lock_acquire>
 8006fc0:	69a3      	ldr	r3, [r4, #24]
 8006fc2:	b11b      	cbz	r3, 8006fcc <__sinit+0x14>
 8006fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc8:	f7ff bff0 	b.w	8006fac <__sinit_lock_release>
 8006fcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fd0:	6523      	str	r3, [r4, #80]	; 0x50
 8006fd2:	4b13      	ldr	r3, [pc, #76]	; (8007020 <__sinit+0x68>)
 8006fd4:	4a13      	ldr	r2, [pc, #76]	; (8007024 <__sinit+0x6c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	bf08      	it	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	bf08      	it	eq
 8006fe4:	61a3      	streq	r3, [r4, #24]
 8006fe6:	f000 f81f 	bl	8007028 <__sfp>
 8006fea:	6060      	str	r0, [r4, #4]
 8006fec:	4620      	mov	r0, r4
 8006fee:	f000 f81b 	bl	8007028 <__sfp>
 8006ff2:	60a0      	str	r0, [r4, #8]
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 f817 	bl	8007028 <__sfp>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2104      	movs	r1, #4
 8006ffe:	60e0      	str	r0, [r4, #12]
 8007000:	6860      	ldr	r0, [r4, #4]
 8007002:	f7ff ff81 	bl	8006f08 <std>
 8007006:	2201      	movs	r2, #1
 8007008:	2109      	movs	r1, #9
 800700a:	68a0      	ldr	r0, [r4, #8]
 800700c:	f7ff ff7c 	bl	8006f08 <std>
 8007010:	2202      	movs	r2, #2
 8007012:	2112      	movs	r1, #18
 8007014:	68e0      	ldr	r0, [r4, #12]
 8007016:	f7ff ff77 	bl	8006f08 <std>
 800701a:	2301      	movs	r3, #1
 800701c:	61a3      	str	r3, [r4, #24]
 800701e:	e7d1      	b.n	8006fc4 <__sinit+0xc>
 8007020:	080076ac 	.word	0x080076ac
 8007024:	08006f51 	.word	0x08006f51

08007028 <__sfp>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	4607      	mov	r7, r0
 800702c:	f7ff ffac 	bl	8006f88 <__sfp_lock_acquire>
 8007030:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <__sfp+0x84>)
 8007032:	681e      	ldr	r6, [r3, #0]
 8007034:	69b3      	ldr	r3, [r6, #24]
 8007036:	b913      	cbnz	r3, 800703e <__sfp+0x16>
 8007038:	4630      	mov	r0, r6
 800703a:	f7ff ffbd 	bl	8006fb8 <__sinit>
 800703e:	3648      	adds	r6, #72	; 0x48
 8007040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007044:	3b01      	subs	r3, #1
 8007046:	d503      	bpl.n	8007050 <__sfp+0x28>
 8007048:	6833      	ldr	r3, [r6, #0]
 800704a:	b30b      	cbz	r3, 8007090 <__sfp+0x68>
 800704c:	6836      	ldr	r6, [r6, #0]
 800704e:	e7f7      	b.n	8007040 <__sfp+0x18>
 8007050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007054:	b9d5      	cbnz	r5, 800708c <__sfp+0x64>
 8007056:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <__sfp+0x88>)
 8007058:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800705c:	60e3      	str	r3, [r4, #12]
 800705e:	6665      	str	r5, [r4, #100]	; 0x64
 8007060:	f000 f847 	bl	80070f2 <__retarget_lock_init_recursive>
 8007064:	f7ff ff96 	bl	8006f94 <__sfp_lock_release>
 8007068:	2208      	movs	r2, #8
 800706a:	4629      	mov	r1, r5
 800706c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007070:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007074:	6025      	str	r5, [r4, #0]
 8007076:	61a5      	str	r5, [r4, #24]
 8007078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800707c:	f7ff fac8 	bl	8006610 <memset>
 8007080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007088:	4620      	mov	r0, r4
 800708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800708c:	3468      	adds	r4, #104	; 0x68
 800708e:	e7d9      	b.n	8007044 <__sfp+0x1c>
 8007090:	2104      	movs	r1, #4
 8007092:	4638      	mov	r0, r7
 8007094:	f7ff ff62 	bl	8006f5c <__sfmoreglue>
 8007098:	4604      	mov	r4, r0
 800709a:	6030      	str	r0, [r6, #0]
 800709c:	2800      	cmp	r0, #0
 800709e:	d1d5      	bne.n	800704c <__sfp+0x24>
 80070a0:	f7ff ff78 	bl	8006f94 <__sfp_lock_release>
 80070a4:	230c      	movs	r3, #12
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	e7ee      	b.n	8007088 <__sfp+0x60>
 80070aa:	bf00      	nop
 80070ac:	080076ac 	.word	0x080076ac
 80070b0:	ffff0001 	.word	0xffff0001

080070b4 <_fwalk_reent>:
 80070b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b8:	4606      	mov	r6, r0
 80070ba:	4688      	mov	r8, r1
 80070bc:	2700      	movs	r7, #0
 80070be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070c6:	f1b9 0901 	subs.w	r9, r9, #1
 80070ca:	d505      	bpl.n	80070d8 <_fwalk_reent+0x24>
 80070cc:	6824      	ldr	r4, [r4, #0]
 80070ce:	2c00      	cmp	r4, #0
 80070d0:	d1f7      	bne.n	80070c2 <_fwalk_reent+0xe>
 80070d2:	4638      	mov	r0, r7
 80070d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d8:	89ab      	ldrh	r3, [r5, #12]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d907      	bls.n	80070ee <_fwalk_reent+0x3a>
 80070de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070e2:	3301      	adds	r3, #1
 80070e4:	d003      	beq.n	80070ee <_fwalk_reent+0x3a>
 80070e6:	4629      	mov	r1, r5
 80070e8:	4630      	mov	r0, r6
 80070ea:	47c0      	blx	r8
 80070ec:	4307      	orrs	r7, r0
 80070ee:	3568      	adds	r5, #104	; 0x68
 80070f0:	e7e9      	b.n	80070c6 <_fwalk_reent+0x12>

080070f2 <__retarget_lock_init_recursive>:
 80070f2:	4770      	bx	lr

080070f4 <__retarget_lock_acquire_recursive>:
 80070f4:	4770      	bx	lr

080070f6 <__retarget_lock_release_recursive>:
 80070f6:	4770      	bx	lr

080070f8 <__swhatbuf_r>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	460e      	mov	r6, r1
 80070fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007100:	4614      	mov	r4, r2
 8007102:	2900      	cmp	r1, #0
 8007104:	461d      	mov	r5, r3
 8007106:	b096      	sub	sp, #88	; 0x58
 8007108:	da08      	bge.n	800711c <__swhatbuf_r+0x24>
 800710a:	2200      	movs	r2, #0
 800710c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	061a      	lsls	r2, r3, #24
 8007114:	d410      	bmi.n	8007138 <__swhatbuf_r+0x40>
 8007116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800711a:	e00e      	b.n	800713a <__swhatbuf_r+0x42>
 800711c:	466a      	mov	r2, sp
 800711e:	f000 f9f5 	bl	800750c <_fstat_r>
 8007122:	2800      	cmp	r0, #0
 8007124:	dbf1      	blt.n	800710a <__swhatbuf_r+0x12>
 8007126:	9a01      	ldr	r2, [sp, #4]
 8007128:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800712c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007130:	425a      	negs	r2, r3
 8007132:	415a      	adcs	r2, r3
 8007134:	602a      	str	r2, [r5, #0]
 8007136:	e7ee      	b.n	8007116 <__swhatbuf_r+0x1e>
 8007138:	2340      	movs	r3, #64	; 0x40
 800713a:	2000      	movs	r0, #0
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	b016      	add	sp, #88	; 0x58
 8007140:	bd70      	pop	{r4, r5, r6, pc}
	...

08007144 <__smakebuf_r>:
 8007144:	898b      	ldrh	r3, [r1, #12]
 8007146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007148:	079d      	lsls	r5, r3, #30
 800714a:	4606      	mov	r6, r0
 800714c:	460c      	mov	r4, r1
 800714e:	d507      	bpl.n	8007160 <__smakebuf_r+0x1c>
 8007150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	6123      	str	r3, [r4, #16]
 8007158:	2301      	movs	r3, #1
 800715a:	6163      	str	r3, [r4, #20]
 800715c:	b002      	add	sp, #8
 800715e:	bd70      	pop	{r4, r5, r6, pc}
 8007160:	466a      	mov	r2, sp
 8007162:	ab01      	add	r3, sp, #4
 8007164:	f7ff ffc8 	bl	80070f8 <__swhatbuf_r>
 8007168:	9900      	ldr	r1, [sp, #0]
 800716a:	4605      	mov	r5, r0
 800716c:	4630      	mov	r0, r6
 800716e:	f000 f89f 	bl	80072b0 <_malloc_r>
 8007172:	b948      	cbnz	r0, 8007188 <__smakebuf_r+0x44>
 8007174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007178:	059a      	lsls	r2, r3, #22
 800717a:	d4ef      	bmi.n	800715c <__smakebuf_r+0x18>
 800717c:	f023 0303 	bic.w	r3, r3, #3
 8007180:	f043 0302 	orr.w	r3, r3, #2
 8007184:	81a3      	strh	r3, [r4, #12]
 8007186:	e7e3      	b.n	8007150 <__smakebuf_r+0xc>
 8007188:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <__smakebuf_r+0x7c>)
 800718a:	62b3      	str	r3, [r6, #40]	; 0x28
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	6020      	str	r0, [r4, #0]
 8007190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007194:	81a3      	strh	r3, [r4, #12]
 8007196:	9b00      	ldr	r3, [sp, #0]
 8007198:	6120      	str	r0, [r4, #16]
 800719a:	6163      	str	r3, [r4, #20]
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	b15b      	cbz	r3, 80071b8 <__smakebuf_r+0x74>
 80071a0:	4630      	mov	r0, r6
 80071a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071a6:	f000 f9c3 	bl	8007530 <_isatty_r>
 80071aa:	b128      	cbz	r0, 80071b8 <__smakebuf_r+0x74>
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	f023 0303 	bic.w	r3, r3, #3
 80071b2:	f043 0301 	orr.w	r3, r3, #1
 80071b6:	81a3      	strh	r3, [r4, #12]
 80071b8:	89a0      	ldrh	r0, [r4, #12]
 80071ba:	4305      	orrs	r5, r0
 80071bc:	81a5      	strh	r5, [r4, #12]
 80071be:	e7cd      	b.n	800715c <__smakebuf_r+0x18>
 80071c0:	08006f51 	.word	0x08006f51

080071c4 <memchr>:
 80071c4:	4603      	mov	r3, r0
 80071c6:	b510      	push	{r4, lr}
 80071c8:	b2c9      	uxtb	r1, r1
 80071ca:	4402      	add	r2, r0
 80071cc:	4293      	cmp	r3, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	d101      	bne.n	80071d6 <memchr+0x12>
 80071d2:	2000      	movs	r0, #0
 80071d4:	e003      	b.n	80071de <memchr+0x1a>
 80071d6:	7804      	ldrb	r4, [r0, #0]
 80071d8:	3301      	adds	r3, #1
 80071da:	428c      	cmp	r4, r1
 80071dc:	d1f6      	bne.n	80071cc <memchr+0x8>
 80071de:	bd10      	pop	{r4, pc}

080071e0 <_free_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4605      	mov	r5, r0
 80071e4:	2900      	cmp	r1, #0
 80071e6:	d040      	beq.n	800726a <_free_r+0x8a>
 80071e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ec:	1f0c      	subs	r4, r1, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	bfb8      	it	lt
 80071f2:	18e4      	addlt	r4, r4, r3
 80071f4:	f000 f9be 	bl	8007574 <__malloc_lock>
 80071f8:	4a1c      	ldr	r2, [pc, #112]	; (800726c <_free_r+0x8c>)
 80071fa:	6813      	ldr	r3, [r2, #0]
 80071fc:	b933      	cbnz	r3, 800720c <_free_r+0x2c>
 80071fe:	6063      	str	r3, [r4, #4]
 8007200:	6014      	str	r4, [r2, #0]
 8007202:	4628      	mov	r0, r5
 8007204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007208:	f000 b9ba 	b.w	8007580 <__malloc_unlock>
 800720c:	42a3      	cmp	r3, r4
 800720e:	d908      	bls.n	8007222 <_free_r+0x42>
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	1821      	adds	r1, r4, r0
 8007214:	428b      	cmp	r3, r1
 8007216:	bf01      	itttt	eq
 8007218:	6819      	ldreq	r1, [r3, #0]
 800721a:	685b      	ldreq	r3, [r3, #4]
 800721c:	1809      	addeq	r1, r1, r0
 800721e:	6021      	streq	r1, [r4, #0]
 8007220:	e7ed      	b.n	80071fe <_free_r+0x1e>
 8007222:	461a      	mov	r2, r3
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	b10b      	cbz	r3, 800722c <_free_r+0x4c>
 8007228:	42a3      	cmp	r3, r4
 800722a:	d9fa      	bls.n	8007222 <_free_r+0x42>
 800722c:	6811      	ldr	r1, [r2, #0]
 800722e:	1850      	adds	r0, r2, r1
 8007230:	42a0      	cmp	r0, r4
 8007232:	d10b      	bne.n	800724c <_free_r+0x6c>
 8007234:	6820      	ldr	r0, [r4, #0]
 8007236:	4401      	add	r1, r0
 8007238:	1850      	adds	r0, r2, r1
 800723a:	4283      	cmp	r3, r0
 800723c:	6011      	str	r1, [r2, #0]
 800723e:	d1e0      	bne.n	8007202 <_free_r+0x22>
 8007240:	6818      	ldr	r0, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	4401      	add	r1, r0
 8007246:	6011      	str	r1, [r2, #0]
 8007248:	6053      	str	r3, [r2, #4]
 800724a:	e7da      	b.n	8007202 <_free_r+0x22>
 800724c:	d902      	bls.n	8007254 <_free_r+0x74>
 800724e:	230c      	movs	r3, #12
 8007250:	602b      	str	r3, [r5, #0]
 8007252:	e7d6      	b.n	8007202 <_free_r+0x22>
 8007254:	6820      	ldr	r0, [r4, #0]
 8007256:	1821      	adds	r1, r4, r0
 8007258:	428b      	cmp	r3, r1
 800725a:	bf01      	itttt	eq
 800725c:	6819      	ldreq	r1, [r3, #0]
 800725e:	685b      	ldreq	r3, [r3, #4]
 8007260:	1809      	addeq	r1, r1, r0
 8007262:	6021      	streq	r1, [r4, #0]
 8007264:	6063      	str	r3, [r4, #4]
 8007266:	6054      	str	r4, [r2, #4]
 8007268:	e7cb      	b.n	8007202 <_free_r+0x22>
 800726a:	bd38      	pop	{r3, r4, r5, pc}
 800726c:	20000348 	.word	0x20000348

08007270 <sbrk_aligned>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	4e0e      	ldr	r6, [pc, #56]	; (80072ac <sbrk_aligned+0x3c>)
 8007274:	460c      	mov	r4, r1
 8007276:	6831      	ldr	r1, [r6, #0]
 8007278:	4605      	mov	r5, r0
 800727a:	b911      	cbnz	r1, 8007282 <sbrk_aligned+0x12>
 800727c:	f000 f88c 	bl	8007398 <_sbrk_r>
 8007280:	6030      	str	r0, [r6, #0]
 8007282:	4621      	mov	r1, r4
 8007284:	4628      	mov	r0, r5
 8007286:	f000 f887 	bl	8007398 <_sbrk_r>
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	d00a      	beq.n	80072a4 <sbrk_aligned+0x34>
 800728e:	1cc4      	adds	r4, r0, #3
 8007290:	f024 0403 	bic.w	r4, r4, #3
 8007294:	42a0      	cmp	r0, r4
 8007296:	d007      	beq.n	80072a8 <sbrk_aligned+0x38>
 8007298:	1a21      	subs	r1, r4, r0
 800729a:	4628      	mov	r0, r5
 800729c:	f000 f87c 	bl	8007398 <_sbrk_r>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d101      	bne.n	80072a8 <sbrk_aligned+0x38>
 80072a4:	f04f 34ff 	mov.w	r4, #4294967295
 80072a8:	4620      	mov	r0, r4
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	2000034c 	.word	0x2000034c

080072b0 <_malloc_r>:
 80072b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b4:	1ccd      	adds	r5, r1, #3
 80072b6:	f025 0503 	bic.w	r5, r5, #3
 80072ba:	3508      	adds	r5, #8
 80072bc:	2d0c      	cmp	r5, #12
 80072be:	bf38      	it	cc
 80072c0:	250c      	movcc	r5, #12
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	4607      	mov	r7, r0
 80072c6:	db01      	blt.n	80072cc <_malloc_r+0x1c>
 80072c8:	42a9      	cmp	r1, r5
 80072ca:	d905      	bls.n	80072d8 <_malloc_r+0x28>
 80072cc:	230c      	movs	r3, #12
 80072ce:	2600      	movs	r6, #0
 80072d0:	603b      	str	r3, [r7, #0]
 80072d2:	4630      	mov	r0, r6
 80072d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d8:	4e2e      	ldr	r6, [pc, #184]	; (8007394 <_malloc_r+0xe4>)
 80072da:	f000 f94b 	bl	8007574 <__malloc_lock>
 80072de:	6833      	ldr	r3, [r6, #0]
 80072e0:	461c      	mov	r4, r3
 80072e2:	bb34      	cbnz	r4, 8007332 <_malloc_r+0x82>
 80072e4:	4629      	mov	r1, r5
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7ff ffc2 	bl	8007270 <sbrk_aligned>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	4604      	mov	r4, r0
 80072f0:	d14d      	bne.n	800738e <_malloc_r+0xde>
 80072f2:	6834      	ldr	r4, [r6, #0]
 80072f4:	4626      	mov	r6, r4
 80072f6:	2e00      	cmp	r6, #0
 80072f8:	d140      	bne.n	800737c <_malloc_r+0xcc>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	4631      	mov	r1, r6
 80072fe:	4638      	mov	r0, r7
 8007300:	eb04 0803 	add.w	r8, r4, r3
 8007304:	f000 f848 	bl	8007398 <_sbrk_r>
 8007308:	4580      	cmp	r8, r0
 800730a:	d13a      	bne.n	8007382 <_malloc_r+0xd2>
 800730c:	6821      	ldr	r1, [r4, #0]
 800730e:	3503      	adds	r5, #3
 8007310:	1a6d      	subs	r5, r5, r1
 8007312:	f025 0503 	bic.w	r5, r5, #3
 8007316:	3508      	adds	r5, #8
 8007318:	2d0c      	cmp	r5, #12
 800731a:	bf38      	it	cc
 800731c:	250c      	movcc	r5, #12
 800731e:	4638      	mov	r0, r7
 8007320:	4629      	mov	r1, r5
 8007322:	f7ff ffa5 	bl	8007270 <sbrk_aligned>
 8007326:	3001      	adds	r0, #1
 8007328:	d02b      	beq.n	8007382 <_malloc_r+0xd2>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	442b      	add	r3, r5
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	e00e      	b.n	8007350 <_malloc_r+0xa0>
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	1b52      	subs	r2, r2, r5
 8007336:	d41e      	bmi.n	8007376 <_malloc_r+0xc6>
 8007338:	2a0b      	cmp	r2, #11
 800733a:	d916      	bls.n	800736a <_malloc_r+0xba>
 800733c:	1961      	adds	r1, r4, r5
 800733e:	42a3      	cmp	r3, r4
 8007340:	6025      	str	r5, [r4, #0]
 8007342:	bf18      	it	ne
 8007344:	6059      	strne	r1, [r3, #4]
 8007346:	6863      	ldr	r3, [r4, #4]
 8007348:	bf08      	it	eq
 800734a:	6031      	streq	r1, [r6, #0]
 800734c:	5162      	str	r2, [r4, r5]
 800734e:	604b      	str	r3, [r1, #4]
 8007350:	4638      	mov	r0, r7
 8007352:	f104 060b 	add.w	r6, r4, #11
 8007356:	f000 f913 	bl	8007580 <__malloc_unlock>
 800735a:	f026 0607 	bic.w	r6, r6, #7
 800735e:	1d23      	adds	r3, r4, #4
 8007360:	1af2      	subs	r2, r6, r3
 8007362:	d0b6      	beq.n	80072d2 <_malloc_r+0x22>
 8007364:	1b9b      	subs	r3, r3, r6
 8007366:	50a3      	str	r3, [r4, r2]
 8007368:	e7b3      	b.n	80072d2 <_malloc_r+0x22>
 800736a:	6862      	ldr	r2, [r4, #4]
 800736c:	42a3      	cmp	r3, r4
 800736e:	bf0c      	ite	eq
 8007370:	6032      	streq	r2, [r6, #0]
 8007372:	605a      	strne	r2, [r3, #4]
 8007374:	e7ec      	b.n	8007350 <_malloc_r+0xa0>
 8007376:	4623      	mov	r3, r4
 8007378:	6864      	ldr	r4, [r4, #4]
 800737a:	e7b2      	b.n	80072e2 <_malloc_r+0x32>
 800737c:	4634      	mov	r4, r6
 800737e:	6876      	ldr	r6, [r6, #4]
 8007380:	e7b9      	b.n	80072f6 <_malloc_r+0x46>
 8007382:	230c      	movs	r3, #12
 8007384:	4638      	mov	r0, r7
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	f000 f8fa 	bl	8007580 <__malloc_unlock>
 800738c:	e7a1      	b.n	80072d2 <_malloc_r+0x22>
 800738e:	6025      	str	r5, [r4, #0]
 8007390:	e7de      	b.n	8007350 <_malloc_r+0xa0>
 8007392:	bf00      	nop
 8007394:	20000348 	.word	0x20000348

08007398 <_sbrk_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	2300      	movs	r3, #0
 800739c:	4d05      	ldr	r5, [pc, #20]	; (80073b4 <_sbrk_r+0x1c>)
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	f7fa fb3c 	bl	8001a20 <_sbrk>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_sbrk_r+0x1a>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_sbrk_r+0x1a>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	20000350 	.word	0x20000350

080073b8 <_raise_r>:
 80073b8:	291f      	cmp	r1, #31
 80073ba:	b538      	push	{r3, r4, r5, lr}
 80073bc:	4604      	mov	r4, r0
 80073be:	460d      	mov	r5, r1
 80073c0:	d904      	bls.n	80073cc <_raise_r+0x14>
 80073c2:	2316      	movs	r3, #22
 80073c4:	6003      	str	r3, [r0, #0]
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80073ce:	b112      	cbz	r2, 80073d6 <_raise_r+0x1e>
 80073d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073d4:	b94b      	cbnz	r3, 80073ea <_raise_r+0x32>
 80073d6:	4620      	mov	r0, r4
 80073d8:	f000 f830 	bl	800743c <_getpid_r>
 80073dc:	462a      	mov	r2, r5
 80073de:	4601      	mov	r1, r0
 80073e0:	4620      	mov	r0, r4
 80073e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e6:	f000 b817 	b.w	8007418 <_kill_r>
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d00a      	beq.n	8007404 <_raise_r+0x4c>
 80073ee:	1c59      	adds	r1, r3, #1
 80073f0:	d103      	bne.n	80073fa <_raise_r+0x42>
 80073f2:	2316      	movs	r3, #22
 80073f4:	6003      	str	r3, [r0, #0]
 80073f6:	2001      	movs	r0, #1
 80073f8:	e7e7      	b.n	80073ca <_raise_r+0x12>
 80073fa:	2400      	movs	r4, #0
 80073fc:	4628      	mov	r0, r5
 80073fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007402:	4798      	blx	r3
 8007404:	2000      	movs	r0, #0
 8007406:	e7e0      	b.n	80073ca <_raise_r+0x12>

08007408 <raise>:
 8007408:	4b02      	ldr	r3, [pc, #8]	; (8007414 <raise+0xc>)
 800740a:	4601      	mov	r1, r0
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	f7ff bfd3 	b.w	80073b8 <_raise_r>
 8007412:	bf00      	nop
 8007414:	20000088 	.word	0x20000088

08007418 <_kill_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	2300      	movs	r3, #0
 800741c:	4d06      	ldr	r5, [pc, #24]	; (8007438 <_kill_r+0x20>)
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	4611      	mov	r1, r2
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	f7fa fa78 	bl	800191a <_kill>
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	d102      	bne.n	8007434 <_kill_r+0x1c>
 800742e:	682b      	ldr	r3, [r5, #0]
 8007430:	b103      	cbz	r3, 8007434 <_kill_r+0x1c>
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	bd38      	pop	{r3, r4, r5, pc}
 8007436:	bf00      	nop
 8007438:	20000350 	.word	0x20000350

0800743c <_getpid_r>:
 800743c:	f7fa ba66 	b.w	800190c <_getpid>

08007440 <__sread>:
 8007440:	b510      	push	{r4, lr}
 8007442:	460c      	mov	r4, r1
 8007444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007448:	f000 f8a0 	bl	800758c <_read_r>
 800744c:	2800      	cmp	r0, #0
 800744e:	bfab      	itete	ge
 8007450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007452:	89a3      	ldrhlt	r3, [r4, #12]
 8007454:	181b      	addge	r3, r3, r0
 8007456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800745a:	bfac      	ite	ge
 800745c:	6563      	strge	r3, [r4, #84]	; 0x54
 800745e:	81a3      	strhlt	r3, [r4, #12]
 8007460:	bd10      	pop	{r4, pc}

08007462 <__swrite>:
 8007462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007466:	461f      	mov	r7, r3
 8007468:	898b      	ldrh	r3, [r1, #12]
 800746a:	4605      	mov	r5, r0
 800746c:	05db      	lsls	r3, r3, #23
 800746e:	460c      	mov	r4, r1
 8007470:	4616      	mov	r6, r2
 8007472:	d505      	bpl.n	8007480 <__swrite+0x1e>
 8007474:	2302      	movs	r3, #2
 8007476:	2200      	movs	r2, #0
 8007478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747c:	f000 f868 	bl	8007550 <_lseek_r>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	4632      	mov	r2, r6
 8007484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	4628      	mov	r0, r5
 800748c:	463b      	mov	r3, r7
 800748e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007496:	f000 b817 	b.w	80074c8 <_write_r>

0800749a <__sseek>:
 800749a:	b510      	push	{r4, lr}
 800749c:	460c      	mov	r4, r1
 800749e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a2:	f000 f855 	bl	8007550 <_lseek_r>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	bf15      	itete	ne
 80074ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80074ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074b6:	81a3      	strheq	r3, [r4, #12]
 80074b8:	bf18      	it	ne
 80074ba:	81a3      	strhne	r3, [r4, #12]
 80074bc:	bd10      	pop	{r4, pc}

080074be <__sclose>:
 80074be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c2:	f000 b813 	b.w	80074ec <_close_r>
	...

080074c8 <_write_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	4611      	mov	r1, r2
 80074d0:	2200      	movs	r2, #0
 80074d2:	4d05      	ldr	r5, [pc, #20]	; (80074e8 <_write_r+0x20>)
 80074d4:	602a      	str	r2, [r5, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	f7fa fa56 	bl	8001988 <_write>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_write_r+0x1e>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_write_r+0x1e>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	20000350 	.word	0x20000350

080074ec <_close_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	2300      	movs	r3, #0
 80074f0:	4d05      	ldr	r5, [pc, #20]	; (8007508 <_close_r+0x1c>)
 80074f2:	4604      	mov	r4, r0
 80074f4:	4608      	mov	r0, r1
 80074f6:	602b      	str	r3, [r5, #0]
 80074f8:	f7fa fa62 	bl	80019c0 <_close>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_close_r+0x1a>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	b103      	cbz	r3, 8007506 <_close_r+0x1a>
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	20000350 	.word	0x20000350

0800750c <_fstat_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	2300      	movs	r3, #0
 8007510:	4d06      	ldr	r5, [pc, #24]	; (800752c <_fstat_r+0x20>)
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
 8007518:	602b      	str	r3, [r5, #0]
 800751a:	f7fa fa5c 	bl	80019d6 <_fstat>
 800751e:	1c43      	adds	r3, r0, #1
 8007520:	d102      	bne.n	8007528 <_fstat_r+0x1c>
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	b103      	cbz	r3, 8007528 <_fstat_r+0x1c>
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	bd38      	pop	{r3, r4, r5, pc}
 800752a:	bf00      	nop
 800752c:	20000350 	.word	0x20000350

08007530 <_isatty_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	2300      	movs	r3, #0
 8007534:	4d05      	ldr	r5, [pc, #20]	; (800754c <_isatty_r+0x1c>)
 8007536:	4604      	mov	r4, r0
 8007538:	4608      	mov	r0, r1
 800753a:	602b      	str	r3, [r5, #0]
 800753c:	f7fa fa5a 	bl	80019f4 <_isatty>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_isatty_r+0x1a>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_isatty_r+0x1a>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	20000350 	.word	0x20000350

08007550 <_lseek_r>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	2200      	movs	r2, #0
 800755a:	4d05      	ldr	r5, [pc, #20]	; (8007570 <_lseek_r+0x20>)
 800755c:	602a      	str	r2, [r5, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	f7fa fa52 	bl	8001a08 <_lseek>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_lseek_r+0x1e>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_lseek_r+0x1e>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	20000350 	.word	0x20000350

08007574 <__malloc_lock>:
 8007574:	4801      	ldr	r0, [pc, #4]	; (800757c <__malloc_lock+0x8>)
 8007576:	f7ff bdbd 	b.w	80070f4 <__retarget_lock_acquire_recursive>
 800757a:	bf00      	nop
 800757c:	20000344 	.word	0x20000344

08007580 <__malloc_unlock>:
 8007580:	4801      	ldr	r0, [pc, #4]	; (8007588 <__malloc_unlock+0x8>)
 8007582:	f7ff bdb8 	b.w	80070f6 <__retarget_lock_release_recursive>
 8007586:	bf00      	nop
 8007588:	20000344 	.word	0x20000344

0800758c <_read_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	4611      	mov	r1, r2
 8007594:	2200      	movs	r2, #0
 8007596:	4d05      	ldr	r5, [pc, #20]	; (80075ac <_read_r+0x20>)
 8007598:	602a      	str	r2, [r5, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	f7fa f9d7 	bl	800194e <_read>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_read_r+0x1e>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_read_r+0x1e>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	20000350 	.word	0x20000350

080075b0 <_init>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr

080075bc <_fini>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	bf00      	nop
 80075c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c2:	bc08      	pop	{r3}
 80075c4:	469e      	mov	lr, r3
 80075c6:	4770      	bx	lr
